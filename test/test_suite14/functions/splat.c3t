// #target: macos-x64
module splat;

extern fn int sum_us(int... x);

fn void test()
{
    sum_us(1, 2, 3);
    int[3] x = { 1, 2, 3 };
    int[] z = &x;
    sum_us(...x);
    sum_us(...z);
    sum_us();
}

/* #expect: splat.ll

  %varargslots = alloca [3 x i32], align 4
  %taddr = alloca %"int[]", align 8
  %x = alloca [3 x i32], align 4
  %z = alloca %"int[]", align 8
  %taddr1 = alloca %"int[]", align 8
  %taddr6 = alloca %"int[]", align 8
  %0 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 2
  store i32 3, i32* %2, align 4
  %3 = bitcast [3 x i32]* %varargslots to i32*
  %4 = insertvalue %"int[]" undef, i32* %3, 0
  %5 = insertvalue %"int[]" %4, i64 3, 1
  store %"int[]" %5, %"int[]"* %taddr, align 8
  %6 = bitcast %"int[]"* %taddr to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  %lo = load i8*, i8** %7, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  %hi = load i64, i64* %8, align 8
  %9 = call i32 @sum_us(i8* %lo, i64 %hi)
  %10 = bitcast [3 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 bitcast ([3 x i32]* @.__const to i8*), i32 12, i1 false)
  %11 = bitcast [3 x i32]* %x to i32*
  %12 = insertvalue %"int[]" undef, i32* %11, 0
  %13 = insertvalue %"int[]" %12, i64 3, 1
  store %"int[]" %13, %"int[]"* %z, align 8
  %14 = bitcast [3 x i32]* %x to i32*
  %15 = insertvalue %"int[]" undef, i32* %14, 0
  %16 = insertvalue %"int[]" %15, i64 3, 1
  store %"int[]" %16, %"int[]"* %taddr1, align 8
  %17 = bitcast %"int[]"* %taddr1 to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %lo2 = load i8*, i8** %18, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %hi3 = load i64, i64* %19, align 8
  %20 = call i32 @sum_us(i8* %lo2, i64 %hi3)
  %21 = bitcast %"int[]"* %z to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %lo4 = load i8*, i8** %22, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %hi5 = load i64, i64* %23, align 8
  %24 = call i32 @sum_us(i8* %lo4, i64 %hi5)
  store %"int[]" zeroinitializer, %"int[]"* %taddr6, align 8
  %25 = bitcast %"int[]"* %taddr6 to { i8*, i64 }*
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  %lo7 = load i8*, i8** %26, align 8
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  %hi8 = load i64, i64* %27, align 8
  %28 = call i32 @sum_us(i8* %lo7, i64 %hi8)
  ret void
