// #target: macos-x64
module test;
import std::io;
import std::enumset;

define AbcEnumSet = EnumSet<Abc>;

enum Abc
{
	HELLO,
	WORLD
}
fn void main()
{
	AbcEnumSet set;
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
	set.add(Abc.HELLO);
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
	set.add(Abc.WORLD);
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
	AbcEnumSet set2;
	set2.add_all(set);
	io::printf("Has WORLD: %s\n", set2.has(Abc.WORLD));
	set.remove_all(set2);
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %set = alloca i32, align 4
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i8, align 1
  %taddr1 = alloca %"variant[]", align 8
  %retparam2 = alloca i64, align 8
  %varargslots3 = alloca [1 x %variant], align 16
  %taddr4 = alloca i8, align 1
  %taddr5 = alloca %"variant[]", align 8
  %retparam11 = alloca i64, align 8
  %varargslots12 = alloca [1 x %variant], align 16
  %taddr13 = alloca i8, align 1
  %taddr14 = alloca %"variant[]", align 8
  %set2 = alloca i32, align 4
  %retparam20 = alloca i64, align 8
  %varargslots21 = alloca [1 x %variant], align 16
  %taddr22 = alloca i8, align 1
  %taddr23 = alloca %"variant[]", align 8
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %variant], align 16
  %taddr31 = alloca i8, align 1
  %taddr32 = alloca %"variant[]", align 8
  store i32 0, i32* %set, align 4
  %0 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(i32* %set, i32 1)
  store i8 %0, i8* %taddr, align 1
  %1 = insertvalue %variant undef, i8* %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (%.introspect* @"ct$bool" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %2, %variant* %3, align 16
  %4 = bitcast [1 x %variant]* %varargslots to %variant*
  %5 = insertvalue %"variant[]" undef, %variant* %4, 0
  %6 = insertvalue %"variant[]" %5, i64 1, 1
  store %"variant[]" %6, %"variant[]"* %taddr1, align 8
  %7 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %lo = load i8*, i8** %8, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %hi = load i64, i64* %9, align 8
  %10 = call i64 @std_io_printf(i64* %retparam, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i64 14, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %10, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  call void @"std_enumset$$test_Abc_EnumSet_add"(i32* %set, i32 0)
  %11 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(i32* %set, i32 1)
  store i8 %11, i8* %taddr4, align 1
  %12 = insertvalue %variant undef, i8* %taddr4, 0
  %13 = insertvalue %variant %12, i64 ptrtoint (%.introspect* @"ct$bool" to i64), 1
  %14 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots3, i64 0, i64 0
  store %variant %13, %variant* %14, align 16
  %15 = bitcast [1 x %variant]* %varargslots3 to %variant*
  %16 = insertvalue %"variant[]" undef, %variant* %15, 0
  %17 = insertvalue %"variant[]" %16, i64 1, 1
  store %"variant[]" %17, %"variant[]"* %taddr5, align 8
  %18 = bitcast %"variant[]"* %taddr5 to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %lo6 = load i8*, i8** %19, align 8
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %hi7 = load i64, i64* %20, align 8
  %21 = call i64 @std_io_printf(i64* %retparam2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i64 14, i8* %lo6, i64 %hi7)
  %not_err8 = icmp eq i64 %21, 0
  br i1 %not_err8, label %after_check9, label %voiderr10

after_check9:                                     ; preds = %voiderr
  br label %voiderr10

voiderr10:                                        ; preds = %after_check9, %voiderr
  call void @"std_enumset$$test_Abc_EnumSet_add"(i32* %set, i32 1)
  %22 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(i32* %set, i32 1)
  store i8 %22, i8* %taddr13, align 1
  %23 = insertvalue %variant undef, i8* %taddr13, 0
  %24 = insertvalue %variant %23, i64 ptrtoint (%.introspect* @"ct$bool" to i64), 1
  %25 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots12, i64 0, i64 0
  store %variant %24, %variant* %25, align 16
  %26 = bitcast [1 x %variant]* %varargslots12 to %variant*
  %27 = insertvalue %"variant[]" undef, %variant* %26, 0
  %28 = insertvalue %"variant[]" %27, i64 1, 1
  store %"variant[]" %28, %"variant[]"* %taddr14, align 8
  %29 = bitcast %"variant[]"* %taddr14 to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %lo15 = load i8*, i8** %30, align 8
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %hi16 = load i64, i64* %31, align 8
  %32 = call i64 @std_io_printf(i64* %retparam11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i64 14, i8* %lo15, i64 %hi16)
  %not_err17 = icmp eq i64 %32, 0
  br i1 %not_err17, label %after_check18, label %voiderr19

after_check18:                                    ; preds = %voiderr10
  br label %voiderr19

voiderr19:                                        ; preds = %after_check18, %voiderr10
  store i32 0, i32* %set2, align 4
  %33 = load i32, i32* %set, align 4
  call void @"std_enumset$$test_Abc_EnumSet_add_all"(i32* %set2, i32 %33)
  %34 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(i32* %set2, i32 1)
  store i8 %34, i8* %taddr22, align 1
  %35 = insertvalue %variant undef, i8* %taddr22, 0
  %36 = insertvalue %variant %35, i64 ptrtoint (%.introspect* @"ct$bool" to i64), 1
  %37 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots21, i64 0, i64 0
  store %variant %36, %variant* %37, align 16
  %38 = bitcast [1 x %variant]* %varargslots21 to %variant*
  %39 = insertvalue %"variant[]" undef, %variant* %38, 0
  %40 = insertvalue %"variant[]" %39, i64 1, 1
  store %"variant[]" %40, %"variant[]"* %taddr23, align 8
  %41 = bitcast %"variant[]"* %taddr23 to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %lo24 = load i8*, i8** %42, align 8
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %hi25 = load i64, i64* %43, align 8
  %44 = call i64 @std_io_printf(i64* %retparam20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i64 14, i8* %lo24, i64 %hi25)
  %not_err26 = icmp eq i64 %44, 0
  br i1 %not_err26, label %after_check27, label %voiderr28

after_check27:                                    ; preds = %voiderr19
  br label %voiderr28

voiderr28:                                        ; preds = %after_check27, %voiderr19
  %45 = load i32, i32* %set2, align 4
  call void @"std_enumset$$test_Abc_EnumSet_remove_all"(i32* %set, i32 %45)
  %46 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(i32* %set, i32 1)
  store i8 %46, i8* %taddr31, align 1
  %47 = insertvalue %variant undef, i8* %taddr31, 0
  %48 = insertvalue %variant %47, i64 ptrtoint (%.introspect* @"ct$bool" to i64), 1
  %49 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots30, i64 0, i64 0
  store %variant %48, %variant* %49, align 16
  %50 = bitcast [1 x %variant]* %varargslots30 to %variant*
  %51 = insertvalue %"variant[]" undef, %variant* %50, 0
  %52 = insertvalue %"variant[]" %51, i64 1, 1
  store %"variant[]" %52, %"variant[]"* %taddr32, align 8
  %53 = bitcast %"variant[]"* %taddr32 to { i8*, i64 }*
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 0
  %lo33 = load i8*, i8** %54, align 8
  %55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 1
  %hi34 = load i64, i64* %55, align 8
  %56 = call i64 @std_io_printf(i64* %retparam29, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i64 14, i8* %lo33, i64 %hi34)
  %not_err35 = icmp eq i64 %56, 0
  br i1 %not_err35, label %after_check36, label %voiderr37

after_check36:                                    ; preds = %voiderr28
  br label %voiderr37

voiderr37:                                        ; preds = %after_check36, %voiderr28
  ret void
}
