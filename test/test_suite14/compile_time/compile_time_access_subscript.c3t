// #target: macos-x64
module test;
import std::io;
struct Abc
{
	float m00, m01, m10, m11;
}

Abc a = flip(Abc { 1, 2, 3, 4 });

macro flip($init)
{
	return Abc { $init.m01, $init.m10, $init.m11, $init.m00 };
}

macro check_type($Type)
{
	var $b = $Type[4][4] {};
	$Type z = $b[2][2];
	return z;
}

enum Blurb { FOO }

define Bdd = distinct Abc;
fn void main()
{
	var $i = int[4] { 1, 2, 3, 4 };
	var $b = Abc[2] { Abc {}, Abc { 11, 22, 33, 44 }};
	var $c = variant[4] {};
	check_type(int);
	check_type(Abc);
	check_type(anyerr);
	check_type(Blurb);
	check_type(int*);
	check_type(bool);
	check_type(typeid);
	check_type(int[<3>]);
	check_type(Bdd);
	check_type(int[2]);
	check_type(int[]);
	io::printfn("%d", $b[0].m11);
}

/* #expect: test.ll

  %z = alloca i32, align 4
  %z1 = alloca %Abc, align 4
  %z2 = alloca i64, align 8
  %z3 = alloca i32, align 4
  %z4 = alloca i32*, align 8
  %z5 = alloca i8, align 1
  %z6 = alloca i64, align 8
  %z7 = alloca <3 x i32>, align 16
  %z8 = alloca %Abc, align 4
  %z9 = alloca [2 x i32], align 4
  %z10 = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %literal = alloca %Abc, align 4
  %taddr = alloca %"variant[]", align 8
  store i32 0, i32* %z, align 4
  %0 = getelementptr inbounds %Abc, %Abc* %z1, i32 0, i32 0
  store float 0.000000e+00, float* %0, align 4
  %1 = getelementptr inbounds %Abc, %Abc* %z1, i32 0, i32 1
  store float 0.000000e+00, float* %1, align 4
  %2 = getelementptr inbounds %Abc, %Abc* %z1, i32 0, i32 2
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr inbounds %Abc, %Abc* %z1, i32 0, i32 3
  store float 0.000000e+00, float* %3, align 4
  store i64 0, i64* %z2, align 8
  store i32 0, i32* %z3, align 4
  store i32* null, i32** %z4, align 8
  store i8 0, i8* %z5, align 1
  store i64 0, i64* %z6, align 8
  store <3 x i32> zeroinitializer, <3 x i32>* %z7, align 16
  %4 = getelementptr inbounds %Abc, %Abc* %z8, i32 0, i32 0
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %Abc, %Abc* %z8, i32 0, i32 1
  store float 0.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %Abc, %Abc* %z8, i32 0, i32 2
  store float 0.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %Abc, %Abc* %z8, i32 0, i32 3
  store float 0.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds [2 x i32], [2 x i32]* %z9, i64 0, i64 0
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %z9, i64 0, i64 1
  store i32 0, i32* %9, align 4
  %10 = bitcast %"int[]"* %z10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  %11 = getelementptr inbounds %Abc, %Abc* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %Abc, %Abc* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %Abc, %Abc* %literal, i32 0, i32 2
  store float 0.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds %Abc, %Abc* %literal, i32 0, i32 3
  store float 0.000000e+00, float* %14, align 4
  %15 = bitcast %Abc* %literal to i8*
  %16 = insertvalue %variant undef, i8* %15, 0
  %17 = insertvalue %variant %16, i64 ptrtoint (%.introspect* @"ct$test_Abc" to i64), 1
  %18 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %17, %variant* %18, align 16
  %19 = bitcast [1 x %variant]* %varargslots to %variant*
  %20 = insertvalue %"variant[]" undef, %variant* %19, 0
  %21 = insertvalue %"variant[]" %20, i64 1, 1
  store %"variant[]" %21, %"variant[]"* %taddr, align 8
  %22 = bitcast %"variant[]"* %taddr to { i8*, i64 }*
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 0
  %lo = load i8*, i8** %23, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 1
  %hi = load i64, i64* %24, align 8
  %25 = call i64 @std_io_printfn(i64* %retparam, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %25, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  ret void
}
