// #target: macos-x64
module test;

int* foo = &&3;

int a;
int c;
int d;
int[3] abc;
int *b = (&((&a + 1)[2]) + 1 - 2) + 5;
int *bf = &abc[2] + 2;
int *bf2 = &abc[2];
int *bf3 = &abc[2] + 2;

fn void main() {
	int *bf34 = (&abc[2] + 2) + 3;
	static variant[3] x = { &&42, &&'c', &&"for" };
	variant[3] y = { &&42, &&'c', &&"for" };
}

/* #expect: test.ll

@.taddr = private global i32 3, align 4
@test_foo = local_unnamed_addr global i32* @.taddr, align 8
@test_a = global i32 0, align 4
@test_c = local_unnamed_addr global i32 0, align 4
@test_d = local_unnamed_addr global i32 0, align 4
@test_abc = local_unnamed_addr global [3 x i32] zeroinitializer, align 4
@test_b = local_unnamed_addr global i32* getelementptr (i32, i32* @test_a, i64 7), align 8
@test_bf = local_unnamed_addr global i32* getelementptr ([3 x i32], [3 x i32]* @test_abc, i64 1, i64 1), align 8
@test_bf2 = local_unnamed_addr global i32* getelementptr inbounds ([3 x i32], [3 x i32]* @test_abc, i64 0, i64 2), align 8
@test_bf3 = local_unnamed_addr global i32* getelementptr ([3 x i32], [3 x i32]* @test_abc, i64 1, i64 1), align 8
@.taddr.9 = private global i32 42, align 4
@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.taddr.10 = private global i8 99, align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [4 x i8] c"for\00", align 1
@.taddr.11 = private global [3 x i8]* bitcast ([4 x i8]* @.str to [3 x i8]*), align 8
@"ct$a3$char" = linkonce constant %.introspect { i8 15, i64 3, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 3, [0 x i64] zeroinitializer }, align 8
@"ct$p$a3$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a3$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"main$x" = internal unnamed_addr global [3 x %variant] [%variant { i8* bitcast (i32* @.taddr.9 to i8*), i64 ptrtoint (%.introspect* @"ct$int" to i64) }, %variant { i8* @.taddr.10, i64 ptrtoint (%.introspect* @"ct$char" to i64) }, %variant { i8* bitcast ([3 x i8]** @.taddr.11 to i8*), i64 ptrtoint (%.introspect* @"ct$p$a3$char" to i64) }], align 16
@.str.12 = private unnamed_addr constant [4 x i8] c"for\00", align 1

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %bf34 = alloca i32*, align 8
  %y = alloca [3 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca i8, align 1
  %taddr2 = alloca [3 x i8]*, align 8
  store i32* getelementptr
  %0 = getelementptr inbounds [3 x %variant], [3 x %variant]* %y, i64 0, i64 0
  store i32 42, i32* %taddr, align 4
  %1 = bitcast i32* %taddr to i8*
  %2 = insertvalue %variant undef, i8* %1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %3, %variant* %0, align 16
  %4 = getelementptr inbounds [3 x %variant], [3 x %variant]* %y, i64 0, i64 1
  store i8 99, i8* %taddr1, align 1
  %5 = insertvalue %variant undef, i8* %taddr1, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (%.introspect* @"ct$char" to i64), 1
  store %variant %6, %variant* %4, align 16
  %7 = getelementptr inbounds [3 x %variant], [3 x %variant]* %y, i64 0, i64 2
  store [3 x i8]* bitcast ([4 x i8]* @.str.12 to [3 x i8]*), [3 x i8]** %taddr2, align 8
  %8 = bitcast [3 x i8]** %taddr2 to i8*
  %9 = insertvalue %variant undef, i8* %8, 0
  %10 = insertvalue %variant %9, i64 ptrtoint (%.introspect* @"ct$p$a3$char" to i64), 1
  store %variant %10, %variant* %7, align 16
  ret void
}
