module foo;
macro int @cofefe(a; @body(x))
{
    @body(a);
    @body(a);
    return 1;
}

extern fn int printf(char *, ...);

fn void main()
{
    int x = 0;
    @cofefe(1; int y)
    {
        defer printf("defer: %d\n", x++);
        printf("%d\n", x++);
    };
    printf("Done!\n");
}

/* #expect: foo.ll

define void @foo_main() #0 {
entry:
  %x = alloca i32, align 4
  %a = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 0, i32* %x, align 4
  store i32 1, i32* %a, align 4
  %0 = load i32, i32* %a, align 4
  store i32 %0, i32* %y, align 4
  %1 = load i32, i32* %x, align 4
  %add = add i32 %1, 1
  store i32 %add, i32* %x, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %1)
  %3 = load i32, i32* %x, align 4
  %add1 = add i32 %3, 1
  store i32 %add1, i32* %x, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  %5 = load i32, i32* %a, align 4
  store i32 %5, i32* %y, align 4
  %6 = load i32, i32* %x, align 4
  %add2 = add i32 %6, 1
  store i32 %add2, i32* %x, align 4
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %6)
  %8 = load i32, i32* %x, align 4
  %add3 = add i32 %8, 1
  store i32 %add3, i32* %x, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i32 %8)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0))
  ret void
}


