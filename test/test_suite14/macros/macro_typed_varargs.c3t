// #target: macos-x64

module test;

import std::io;

macro foo(int... x)
{
	foreach (i : x)
	{
		io::printfn("%d", i);
	}
}

macro foo2(x...)
{
	foreach (i : x)
	{
		io::printfn("%d", *(int*)i);
	}
}

fn void main()
{
	foo(1, -1, 3141, 999 + 1);
	foo2(1, -1, 3141, 999 + 1);
}

/* #expect: test.ll


define void @test_main() #0 {
entry:
  %x = alloca %"int[]", align 8
  %literal = alloca [4 x i32], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i32, align 4
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca %"variant[]", align 8
  %x2 = alloca %"variant[]", align 8
  %literal3 = alloca [4 x %variant], align 16
  %taddr4 = alloca i32, align 4
  %taddr5 = alloca i32, align 4
  %taddr6 = alloca i32, align 4
  %taddr7 = alloca i32, align 4
  %.anon8 = alloca i64, align 8
  %.anon9 = alloca i64, align 8
  %i13 = alloca %variant, align 8
  %retparam15 = alloca i64, align 8
  %varargslots16 = alloca [1 x %variant], align 16
  %taddr17 = alloca %"variant[]", align 8
  %0 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 1
  store i32 -1, i32* %1, align 4
  %2 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 2
  store i32 3141, i32* %2, align 4
  %3 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 3
  store i32 1000, i32* %3, align 4
  %4 = bitcast [4 x i32]* %literal to i32*
  %5 = insertvalue %"int[]" undef, i32* %4, 0
  %6 = insertvalue %"int[]" %5, i64 4, 1
  store %"int[]" %6, %"int[]"* %x, align 8
  %7 = getelementptr inbounds %"int[]", %"int[]"* %x, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %.anon, align 8
  store i64 0, i64* %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %voiderr, %entry
  %9 = load i64, i64* %.anon1, align 8
  %10 = load i64, i64* %.anon, align 8
  %lt = icmp ult i64 %9, %10
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %11 = getelementptr inbounds %"int[]", %"int[]"* %x, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = load i64, i64* %.anon1, align 8
  %ptroffset = getelementptr inbounds i32, i32* %12, i64 %13
  %14 = load i32, i32* %ptroffset, align 4
  store i32 %14, i32* %i, align 4
  %15 = bitcast i32* %i to i8*
  %16 = insertvalue %variant undef, i8* %15, 0
  %17 = insertvalue %variant %16, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %18 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %17, %variant* %18, align 16
  %19 = bitcast [1 x %variant]* %varargslots to %variant*
  %20 = insertvalue %"variant[]" undef, %variant* %19, 0
  %21 = insertvalue %"variant[]" %20, i64 1, 1
  store %"variant[]" %21, %"variant[]"* %taddr, align 8
  %22 = bitcast %"variant[]"* %taddr to { i8*, i64 }*
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 0
  %lo = load i8*, i8** %23, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 1
  %hi = load i64, i64* %24, align 8
  %25 = call i64 @std_io_printfn(i64* %retparam, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %25, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %loop.body
  br label %voiderr

voiderr:                                          ; preds = %after_check, %loop.body
  %26 = load i64, i64* %.anon1, align 8
  %add = add i64 %26, 1
  store i64 %add, i64* %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  %27 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal3, i64 0, i64 0
  store i32 1, i32* %taddr4, align 4
  %28 = bitcast i32* %taddr4 to i8*
  %29 = insertvalue %variant undef, i8* %28, 0
  %30 = insertvalue %variant %29, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %30, %variant* %27, align 8
  %31 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal3, i64 0, i64 1
  store i32 -1, i32* %taddr5, align 4
  %32 = bitcast i32* %taddr5 to i8*
  %33 = insertvalue %variant undef, i8* %32, 0
  %34 = insertvalue %variant %33, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %34, %variant* %31, align 8
  %35 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal3, i64 0, i64 2
  store i32 3141, i32* %taddr6, align 4
  %36 = bitcast i32* %taddr6 to i8*
  %37 = insertvalue %variant undef, i8* %36, 0
  %38 = insertvalue %variant %37, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %38, %variant* %35, align 8
  %39 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal3, i64 0, i64 3
  store i32 1000, i32* %taddr7, align 4
  %40 = bitcast i32* %taddr7 to i8*
  %41 = insertvalue %variant undef, i8* %40, 0
  %42 = insertvalue %variant %41, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %42, %variant* %39, align 8
  %43 = bitcast [4 x %variant]* %literal3 to %variant*
  %44 = insertvalue %"variant[]" undef, %variant* %43, 0
  %45 = insertvalue %"variant[]" %44, i64 4, 1
  store %"variant[]" %45, %"variant[]"* %x2, align 8
  %46 = getelementptr inbounds %"variant[]", %"variant[]"* %x2, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %.anon8, align 8
  store i64 0, i64* %.anon9, align 8
  br label %loop.cond10

loop.cond10:                                      ; preds = %voiderr22, %loop.exit
  %48 = load i64, i64* %.anon9, align 8
  %49 = load i64, i64* %.anon8, align 8
  %lt11 = icmp ult i64 %48, %49
  br i1 %lt11, label %loop.body12, label %loop.exit24

loop.body12:                                      ; preds = %loop.cond10
  %50 = getelementptr inbounds %"variant[]", %"variant[]"* %x2, i32 0, i32 0
  %51 = load %variant*, %variant** %50, align 8
  %52 = load i64, i64* %.anon9, align 8
  %ptroffset14 = getelementptr inbounds %variant, %variant* %51, i64 %52
  %53 = bitcast %variant* %i13 to i8*
  %54 = bitcast %variant* %ptroffset14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %53, i8* align 8 %54, i32 16, i1 false)
  %55 = getelementptr inbounds %variant, %variant* %i13, i32 0, i32 0
  %56 = bitcast i8** %55 to i32**
  %57 = load i32*, i32** %56, align 8
  %58 = bitcast i32* %57 to i8*
  %59 = insertvalue %variant undef, i8* %58, 0
  %60 = insertvalue %variant %59, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %61 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots16, i64 0, i64 0
  store %variant %60, %variant* %61, align 16
  %62 = bitcast [1 x %variant]* %varargslots16 to %variant*
  %63 = insertvalue %"variant[]" undef, %variant* %62, 0
  %64 = insertvalue %"variant[]" %63, i64 1, 1
  store %"variant[]" %64, %"variant[]"* %taddr17, align 8
  %65 = bitcast %"variant[]"* %taddr17 to { i8*, i64 }*
  %66 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %65, i32 0, i32 0
  %lo18 = load i8*, i8** %66, align 8
  %67 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %65, i32 0, i32 1
  %hi19 = load i64, i64* %67, align 8
  %68 = call i64 @std_io_printfn(i64* %retparam15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i64 2, i8* %lo18, i64 %hi19)
  %not_err20 = icmp eq i64 %68, 0
  br i1 %not_err20, label %after_check21, label %voiderr22

after_check21:                                    ; preds = %loop.body12
  br label %voiderr22

voiderr22:                                        ; preds = %after_check21, %loop.body12
  %69 = load i64, i64* %.anon9, align 8
  %add23 = add i64 %69, 1
  store i64 %add23, i64* %.anon9, align 8
  br label %loop.cond10

loop.exit24:                                      ; preds = %loop.cond10
  ret void
}

