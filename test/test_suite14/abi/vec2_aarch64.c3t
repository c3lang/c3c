// #target: linux-aarch64
module abi;

struct Vector2 {
  float x;
  float y;
}
extern fn Vector2 vector2_zero() { return Vector2 {}; }
extern fn Vector2 vector2_one() { return Vector2 {}; }
extern fn Vector2 vector2_add(Vector2 v1, Vector2 v2) { return Vector2 {}; }
extern fn Vector2 vector2_add_value(Vector2 v, float add) { return Vector2 {}; }
extern fn Vector2 vector2_subtract(Vector2 v1, Vector2 v2) { return Vector2 {}; }
extern fn Vector2 vector2_subtract_value(Vector2 v, float sub) { return Vector2 {}; }

// #expect: abi.ll
%Vector2 = type { float, float }

define %Vector2 @vector2_zero() #0 {
entry:
  %literal = alloca %Vector2, align 4
  %0 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %0, align 4
  %1 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %1, align 4
  %2 = load %Vector2, %Vector2* %literal, align 4
  ret %Vector2 %2
}

define %Vector2 @vector2_one() #0 {
entry:
  %literal = alloca %Vector2, align 4
  %0 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %0, align 4
  %1 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %1, align 4
  %2 = load %Vector2, %Vector2* %literal, align 4
  ret %Vector2 %2
}

define %Vector2 @vector2_add([2 x float] %0, [2 x float] %1) #0 {
entry:
  %v1 = alloca %Vector2, align 4
  %v2 = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %2 = bitcast %Vector2* %v1 to [2 x float]*
  store [2 x float] %0, [2 x float]* %2, align 4
  %3 = bitcast %Vector2* %v2 to [2 x float]*
  store [2 x float] %1, [2 x float]* %3, align 4
  %4 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %5, align 4
  %6 = load %Vector2, %Vector2* %literal, align 4
  ret %Vector2 %6
}

define %Vector2 @vector2_add_value([2 x float] %0, float %1) #0 {
entry:
  %v = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %2 = bitcast %Vector2* %v to [2 x float]*
  store [2 x float] %0, [2 x float]* %2, align 4
  %3 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %3, align 4
  %4 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %4, align 4
  %5 = load %Vector2, %Vector2* %literal, align 4
  ret %Vector2 %5
}

define %Vector2 @vector2_subtract([2 x float] %0, [2 x float] %1) #0 {
entry:
  %v1 = alloca %Vector2, align 4
  %v2 = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %2 = bitcast %Vector2* %v1 to [2 x float]*
  store [2 x float] %0, [2 x float]* %2, align 4
  %3 = bitcast %Vector2* %v2 to [2 x float]*
  store [2 x float] %1, [2 x float]* %3, align 4
  %4 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %5, align 4
  %6 = load %Vector2, %Vector2* %literal, align 4
  ret %Vector2 %6
}

define %Vector2 @vector2_subtract_value([2 x float] %0, float %1) #0 {
entry:
  %v = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %2 = bitcast %Vector2* %v to [2 x float]*
  store [2 x float] %0, [2 x float]* %2, align 4
  %3 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 0
  store float 0.000000e+00, float* %3, align 4
  %4 = getelementptr inbounds %Vector2, %Vector2* %literal, i32 0, i32 1
  store float 0.000000e+00, float* %4, align 4
  %5 = load %Vector2, %Vector2* %literal, align 4
  ret %Vector2 %5
}
