// #target: macos-x64
module test;
import std::io;

fault Foo { ABC, DEF }

fn void main()
{
	io::printfn("1:%d", get_a(1) ?? get_b(4) ?? -1);
	io::printfn("2:%d", get_a(2) ?? get_b(4) ?? -1);
	io::printfn("3:%d", get_a(1) ?? get_b(5) ?? -1);
	io::printfn("4:%s", catch(Foo.ABC! ?? Foo.DEF!));
	io::printfn("5:%s", Foo.ABC! ?? 3);
	io::printfn("6:%s", catch((3 > 2 ? Foo.ABC! : 4) ?? Foo.DEF!));
	io::printfn("7:%s", catch((3 < 2 ? Foo.ABC! : 4) ?? Foo.DEF!));
	long x = Foo.DEF! ?? 3;
	io::printfn("8:%s", x);
	int! xy = Foo.ABC! ?? Foo.DEF!;
}

fn int! get_a(int x)
{
	if (x % 2) return Foo.ABC!;
	return x * 2;
}

fn int! get_b(int x)
{
	if (x % 2 == 0) return Foo.ABC!;
	return x * 2;
}

/* #expect: test.ll


define void @test_main() #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %retparam1 = alloca i32, align 4
  %retparam2 = alloca i32, align 4
  %taddr = alloca i32, align 4
  %taddr8 = alloca %"variant[]", align 8
  %retparam11 = alloca i64, align 8
  %varargslots12 = alloca [1 x %variant], align 16
  %retparam13 = alloca i32, align 4
  %retparam17 = alloca i32, align 4
  %taddr25 = alloca i32, align 4
  %taddr26 = alloca %"variant[]", align 8
  %retparam32 = alloca i64, align 8
  %varargslots33 = alloca [1 x %variant], align 16
  %retparam34 = alloca i32, align 4
  %retparam38 = alloca i32, align 4
  %taddr46 = alloca i32, align 4
  %taddr47 = alloca %"variant[]", align 8
  %retparam53 = alloca i64, align 8
  %varargslots54 = alloca [1 x %variant], align 16
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca %"variant[]", align 8
  %retparam62 = alloca i64, align 8
  %varargslots63 = alloca [1 x %variant], align 16
  %taddr64 = alloca i32, align 4
  %taddr65 = alloca %"variant[]", align 8
  %retparam71 = alloca i64, align 8
  %varargslots72 = alloca [1 x %variant], align 16
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca %"variant[]", align 8
  %retparam80 = alloca i64, align 8
  %varargslots81 = alloca [1 x %variant], align 16
  %error_var = alloca i64, align 8
  %taddr84 = alloca %"variant[]", align 8
  %x = alloca i64, align 8
  %retparam90 = alloca i64, align 8
  %varargslots91 = alloca [1 x %variant], align 16
  %taddr92 = alloca %"variant[]", align 8
  %xy = alloca i32, align 4
  %xy.f = alloca i64, align 8
  %0 = call i64 @test_get_a(i32* %retparam1, i32 1)
  %not_err = icmp eq i64 %0, 0
  br i1 %not_err, label %after_check, label %else_block

after_check:                                      ; preds = %entry
  %1 = load i32, i32* %retparam1, align 4
  br label %phi_block

else_block:                                       ; preds = %entry
  %2 = call i64 @test_get_b(i32* %retparam2, i32 4)
  %not_err3 = icmp eq i64 %2, 0
  br i1 %not_err3, label %after_check4, label %else_block5

after_check4:                                     ; preds = %else_block
  %3 = load i32, i32* %retparam2, align 4
  br label %phi_block

phi_block:                                        ; preds = %after_check4, %after_check
  %val = phi i32 [ %1, %after_check ], [ %3, %after_check4 ]
  br label %phi_block6

else_block5:                                      ; preds = %else_block
  br label %phi_block6

phi_block6:                                       ; preds = %else_block5, %phi_block
  %val7 = phi i32 [ %val, %phi_block ], [ -1, %else_block5 ]
  store i32 %val7, i32* %taddr, align 4
  %4 = bitcast i32* %taddr to i8*
  %5 = insertvalue %variant undef, i8* %4, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %7 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %6, %variant* %7, align 16
  %8 = bitcast [1 x %variant]* %varargslots to %variant*
  %9 = insertvalue %"variant[]" undef, %variant* %8, 0
  %10 = insertvalue %"variant[]" %9, i64 1, 1
  store %"variant[]" %10, %"variant[]"* %taddr8, align 8
  %11 = bitcast %"variant[]"* %taddr8 to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %lo = load i8*, i8** %12, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %hi = load i64, i64* %13, align 8
  %14 = call i64 @std_io_printfn(i64* %retparam, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i64 4, i8* %lo, i64 %hi)
  %not_err9 = icmp eq i64 %14, 0
  br i1 %not_err9, label %after_check10, label %voiderr

after_check10:                                    ; preds = %phi_block6
  br label %voiderr

voiderr:                                          ; preds = %after_check10, %phi_block6
  %15 = call i64 @test_get_a(i32* %retparam13, i32 2)
  %not_err14 = icmp eq i64 %15, 0
  br i1 %not_err14, label %after_check15, label %else_block16

after_check15:                                    ; preds = %voiderr
  %16 = load i32, i32* %retparam13, align 4
  br label %phi_block20

else_block16:                                     ; preds = %voiderr
  %17 = call i64 @test_get_b(i32* %retparam17, i32 4)
  %not_err18 = icmp eq i64 %17, 0
  br i1 %not_err18, label %after_check19, label %else_block22

after_check19:                                    ; preds = %else_block16
  %18 = load i32, i32* %retparam17, align 4
  br label %phi_block20

phi_block20:                                      ; preds = %after_check19, %after_check15
  %val21 = phi i32 [ %16, %after_check15 ], [ %18, %after_check19 ]
  br label %phi_block23

else_block22:                                     ; preds = %else_block16
  br label %phi_block23

phi_block23:                                      ; preds = %else_block22, %phi_block20
  %val24 = phi i32 [ %val21, %phi_block20 ], [ -1, %else_block22 ]
  store i32 %val24, i32* %taddr25, align 4
  %19 = bitcast i32* %taddr25 to i8*
  %20 = insertvalue %variant undef, i8* %19, 0
  %21 = insertvalue %variant %20, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %22 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots12, i64 0, i64 0
  store %variant %21, %variant* %22, align 16
  %23 = bitcast [1 x %variant]* %varargslots12 to %variant*
  %24 = insertvalue %"variant[]" undef, %variant* %23, 0
  %25 = insertvalue %"variant[]" %24, i64 1, 1
  store %"variant[]" %25, %"variant[]"* %taddr26, align 8
  %26 = bitcast %"variant[]"* %taddr26 to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %lo27 = load i8*, i8** %27, align 8
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %hi28 = load i64, i64* %28, align 8
  %29 = call i64 @std_io_printfn(i64* %retparam11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i64 4, i8* %lo27, i64 %hi28)
  %not_err29 = icmp eq i64 %29, 0
  br i1 %not_err29, label %after_check30, label %voiderr31

after_check30:                                    ; preds = %phi_block23
  br label %voiderr31

voiderr31:                                        ; preds = %after_check30, %phi_block23
  %30 = call i64 @test_get_a(i32* %retparam34, i32 1)
  %not_err35 = icmp eq i64 %30, 0
  br i1 %not_err35, label %after_check36, label %else_block37

after_check36:                                    ; preds = %voiderr31
  %31 = load i32, i32* %retparam34, align 4
  br label %phi_block41

else_block37:                                     ; preds = %voiderr31
  %32 = call i64 @test_get_b(i32* %retparam38, i32 5)
  %not_err39 = icmp eq i64 %32, 0
  br i1 %not_err39, label %after_check40, label %else_block43

after_check40:                                    ; preds = %else_block37
  %33 = load i32, i32* %retparam38, align 4
  br label %phi_block41

phi_block41:                                      ; preds = %after_check40, %after_check36
  %val42 = phi i32 [ %31, %after_check36 ], [ %33, %after_check40 ]
  br label %phi_block44

else_block43:                                     ; preds = %else_block37
  br label %phi_block44

phi_block44:                                      ; preds = %else_block43, %phi_block41
  %val45 = phi i32 [ %val42, %phi_block41 ], [ -1, %else_block43 ]
  store i32 %val45, i32* %taddr46, align 4
  %34 = bitcast i32* %taddr46 to i8*
  %35 = insertvalue %variant undef, i8* %34, 0
  %36 = insertvalue %variant %35, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %37 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots33, i64 0, i64 0
  store %variant %36, %variant* %37, align 16
  %38 = bitcast [1 x %variant]* %varargslots33 to %variant*
  %39 = insertvalue %"variant[]" undef, %variant* %38, 0
  %40 = insertvalue %"variant[]" %39, i64 1, 1
  store %"variant[]" %40, %"variant[]"* %taddr47, align 8
  %41 = bitcast %"variant[]"* %taddr47 to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %lo48 = load i8*, i8** %42, align 8
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %hi49 = load i64, i64* %43, align 8
  %44 = call i64 @std_io_printfn(i64* %retparam32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i64 4, i8* %lo48, i64 %hi49)
  %not_err50 = icmp eq i64 %44, 0
  br i1 %not_err50, label %after_check51, label %voiderr52

after_check51:                                    ; preds = %phi_block44
  br label %voiderr52

voiderr52:                                        ; preds = %after_check51, %phi_block44
  store i64 ptrtoint (%.fault* @"test_Foo$DEF" to i64), i64* %taddr55, align 8
  %45 = bitcast i64* %taddr55 to i8*
  %46 = insertvalue %variant undef, i8* %45, 0
  %47 = insertvalue %variant %46, i64 ptrtoint (%.introspect* @"ct$anyerr" to i64), 1
  %48 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots54, i64 0, i64 0
  store %variant %47, %variant* %48, align 16
  %49 = bitcast [1 x %variant]* %varargslots54 to %variant*
  %50 = insertvalue %"variant[]" undef, %variant* %49, 0
  %51 = insertvalue %"variant[]" %50, i64 1, 1
  store %"variant[]" %51, %"variant[]"* %taddr56, align 8
  %52 = bitcast %"variant[]"* %taddr56 to { i8*, i64 }*
  %53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %52, i32 0, i32 0
  %lo57 = load i8*, i8** %53, align 8
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %52, i32 0, i32 1
  %hi58 = load i64, i64* %54, align 8
  %55 = call i64 @std_io_printfn(i64* %retparam53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i64 4, i8* %lo57, i64 %hi58)
  %not_err59 = icmp eq i64 %55, 0
  br i1 %not_err59, label %after_check60, label %voiderr61

after_check60:                                    ; preds = %voiderr52
  br label %voiderr61

voiderr61:                                        ; preds = %after_check60, %voiderr52
  store i32 3, i32* %taddr64, align 4
  %56 = bitcast i32* %taddr64 to i8*
  %57 = insertvalue %variant undef, i8* %56, 0
  %58 = insertvalue %variant %57, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %59 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots63, i64 0, i64 0
  store %variant %58, %variant* %59, align 16
  %60 = bitcast [1 x %variant]* %varargslots63 to %variant*
  %61 = insertvalue %"variant[]" undef, %variant* %60, 0
  %62 = insertvalue %"variant[]" %61, i64 1, 1
  store %"variant[]" %62, %"variant[]"* %taddr65, align 8
  %63 = bitcast %"variant[]"* %taddr65 to { i8*, i64 }*
  %64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %63, i32 0, i32 0
  %lo66 = load i8*, i8** %64, align 8
  %65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %63, i32 0, i32 1
  %hi67 = load i64, i64* %65, align 8
  %66 = call i64 @std_io_printfn(i64* %retparam62, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 4, i8* %lo66, i64 %hi67)
  %not_err68 = icmp eq i64 %66, 0
  br i1 %not_err68, label %after_check69, label %voiderr70

after_check69:                                    ; preds = %voiderr61
  br label %voiderr70

voiderr70:                                        ; preds = %after_check69, %voiderr61
  store i64 ptrtoint (%.fault* @"test_Foo$DEF" to i64), i64* %taddr73, align 8
  %67 = bitcast i64* %taddr73 to i8*
  %68 = insertvalue %variant undef, i8* %67, 0
  %69 = insertvalue %variant %68, i64 ptrtoint (%.introspect* @"ct$anyerr" to i64), 1
  %70 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots72, i64 0, i64 0
  store %variant %69, %variant* %70, align 16
  %71 = bitcast [1 x %variant]* %varargslots72 to %variant*
  %72 = insertvalue %"variant[]" undef, %variant* %71, 0
  %73 = insertvalue %"variant[]" %72, i64 1, 1
  store %"variant[]" %73, %"variant[]"* %taddr74, align 8
  %74 = bitcast %"variant[]"* %taddr74 to { i8*, i64 }*
  %75 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %74, i32 0, i32 0
  %lo75 = load i8*, i8** %75, align 8
  %76 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %74, i32 0, i32 1
  %hi76 = load i64, i64* %76, align 8
  %77 = call i64 @std_io_printfn(i64* %retparam71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 4, i8* %lo75, i64 %hi76)
  %not_err77 = icmp eq i64 %77, 0
  br i1 %not_err77, label %after_check78, label %voiderr79

after_check78:                                    ; preds = %voiderr70
  br label %voiderr79

voiderr79:                                        ; preds = %after_check78, %voiderr70
  store i64 0, i64* %error_var, align 8
  br label %phi_block83

phi_block83:                                      ; preds = %voiderr79
  br label %noerr_block

noerr_block:                                      ; preds = %phi_block83
  %78 = bitcast i64* %error_var to i8*
  %79 = insertvalue %variant undef, i8* %78, 0
  %80 = insertvalue %variant %79, i64 ptrtoint (%.introspect* @"ct$anyerr" to i64), 1
  %81 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots81, i64 0, i64 0
  store %variant %80, %variant* %81, align 16
  %82 = bitcast [1 x %variant]* %varargslots81 to %variant*
  %83 = insertvalue %"variant[]" undef, %variant* %82, 0
  %84 = insertvalue %"variant[]" %83, i64 1, 1
  store %"variant[]" %84, %"variant[]"* %taddr84, align 8
  %85 = bitcast %"variant[]"* %taddr84 to { i8*, i64 }*
  %86 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %85, i32 0, i32 0
  %lo85 = load i8*, i8** %86, align 8
  %87 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %85, i32 0, i32 1
  %hi86 = load i64, i64* %87, align 8
  %88 = call i64 @std_io_printfn(i64* %retparam80, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i64 4, i8* %lo85, i64 %hi86)
  %not_err87 = icmp eq i64 %88, 0
  br i1 %not_err87, label %after_check88, label %voiderr89

after_check88:                                    ; preds = %noerr_block
  br label %voiderr89

voiderr89:                                        ; preds = %after_check88, %noerr_block
  store i64 3, i64* %x, align 8
  %89 = bitcast i64* %x to i8*
  %90 = insertvalue %variant undef, i8* %89, 0
  %91 = insertvalue %variant %90, i64 ptrtoint (%.introspect* @"ct$long" to i64), 1
  %92 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots91, i64 0, i64 0
  store %variant %91, %variant* %92, align 16
  %93 = bitcast [1 x %variant]* %varargslots91 to %variant*
  %94 = insertvalue %"variant[]" undef, %variant* %93, 0
  %95 = insertvalue %"variant[]" %94, i64 1, 1
  store %"variant[]" %95, %"variant[]"* %taddr92, align 8
  %96 = bitcast %"variant[]"* %taddr92 to { i8*, i64 }*
  %97 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %96, i32 0, i32 0
  %lo93 = load i8*, i8** %97, align 8
  %98 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %96, i32 0, i32 1
  %hi94 = load i64, i64* %98, align 8
  %99 = call i64 @std_io_printfn(i64* %retparam90, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i64 4, i8* %lo93, i64 %hi94)
  %not_err95 = icmp eq i64 %99, 0
  br i1 %not_err95, label %after_check96, label %voiderr97

after_check96:                                    ; preds = %voiderr89
  br label %voiderr97

voiderr97:                                        ; preds = %after_check96, %voiderr89
  store i64 ptrtoint (%.fault* @"test_Foo$DEF" to i64), i64* %xy.f, align 8
  ret void
}

; Function Attrs: nounwind
define i64 @test_get_a(i32* %0, i32 %1) #0 {
entry:
  %reterr = alloca i64, align 8
  %smod = srem i32 %1, 2
  %intbool = icmp ne i32 %smod, 0
  br i1 %intbool, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (%.fault* @"test_Foo$ABC" to i64)

if.exit:                                          ; preds = %entry
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %0, align 4
  ret i64 0
}

; Function Attrs: nounwind
define i64 @test_get_b(i32* %0, i32 %1) #0 {
entry:
  %reterr = alloca i64, align 8
  %smod = srem i32 %1, 2
  %eq = icmp eq i32 %smod, 0
  br i1 %eq, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (%.fault* @"test_Foo$ABC" to i64)

if.exit:                                          ; preds = %entry
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %0, align 4
  ret i64 0
}
