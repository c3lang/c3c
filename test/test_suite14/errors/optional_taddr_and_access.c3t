// #target: macos-x64

module test;
struct Foo
{
    int x, y;
}

fault MyErr
{
    FOO
}

extern fn int printf(char *c, ...);

fn void main()
{
    int! z = 2;
    Foo*! w = &&Foo{ z, 0 };
    printf("%d\n", w.x);
    z = MyErr.FOO!;
    w = &&Foo{ z, 0 };
    printf("Not visible: %d\n", w.x);
}

/* #expect: test.ll

%Foo = type { i32, i32 }

@"ct$test_Foo" = linkonce constant %.introspect { i8 10, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"test_MyErr$FOO" = linkonce constant %.fault { i64 ptrtoint (%.introspect* @"ct$test_MyErr" to i64), %"char[]" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fault, i64 0, i64 0), i64 3 } }, align 8
@.fault = internal constant [4 x i8] c"FOO\00", align 1
@"ct$test_MyErr" = linkonce constant %.introspect { i8 9, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"Not visible: %d\0A\00", align 1

; Function Attrs: nounwind
declare i32 @printf(i8*, ...) #0

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %z = alloca i32, align 4
  %z.f = alloca i64, align 8
  %w = alloca %Foo*, align 8
  %w.f = alloca i64, align 8
  %literal = alloca %Foo, align 4
  %literal6 = alloca %Foo, align 4
  store i32 2, i32* %z, align 4
  store i64 0, i64* %z.f, align 8
  %0 = getelementptr inbounds %Foo, %Foo* %literal, i32 0, i32 0
  %optval = load i64, i64* %z.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %optval, i64* %w.f, align 8
  br label %after_assign

after_check:                                      ; preds = %entry
  %1 = load i32, i32* %z, align 4
  store i32 %1, i32* %0, align 4
  %2 = getelementptr inbounds %Foo, %Foo* %literal, i32 0, i32 1
  store i32 0, i32* %2, align 4
  store %Foo* %literal, %Foo** %w, align 8
  store i64 0, i64* %w.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %assign_optional
  %optval1 = load i64, i64* %w.f, align 8
  %not_err2 = icmp eq i64 %optval1, 0
  br i1 %not_err2, label %after_check3, label %voiderr

after_check3:                                     ; preds = %after_assign
  %3 = load %Foo*, %Foo** %w, align 8
  %4 = getelementptr inbounds %Foo, %Foo* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %5)
  br label %voiderr

voiderr:                                          ; preds = %after_check3, %after_assign
  store i64 ptrtoint (%.fault* @"test_MyErr$FOO" to i64), i64* %z.f, align 8
  br label %voiderr5

voiderr5:                                         ; preds = %voiderr
  %7 = getelementptr inbounds %Foo, %Foo* %literal6, i32 0, i32 0
  %optval7 = load i64, i64* %z.f, align 8
  %not_err8 = icmp eq i64 %optval7, 0
  br i1 %not_err8, label %after_check10, label %assign_optional9

assign_optional9:                                 ; preds = %voiderr5
  store i64 %optval7, i64* %w.f, align 8
  br label %after_assign11

after_check10:                                    ; preds = %voiderr5
  %8 = load i32, i32* %z, align 4
  store i32 %8, i32* %7, align 4
  %9 = getelementptr inbounds %Foo, %Foo* %literal6, i32 0, i32 1
  store i32 0, i32* %9, align 4
  store %Foo* %literal6, %Foo** %w, align 8
  store i64 0, i64* %w.f, align 8
  br label %after_assign11

after_assign11:                                   ; preds = %after_check10, %assign_optional9
  br label %voiderr12

voiderr12:                                        ; preds = %after_assign11
  %optval13 = load i64, i64* %w.f, align 8
  %not_err14 = icmp eq i64 %optval13, 0
  br i1 %not_err14, label %after_check15, label %voiderr16

after_check15:                                    ; preds = %voiderr12
  %10 = load %Foo*, %Foo** %w, align 8
  %11 = getelementptr inbounds %Foo, %Foo* %10, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %12)
  br label %voiderr16

voiderr16:                                        ; preds = %after_check15, %voiderr12
  ret void
}