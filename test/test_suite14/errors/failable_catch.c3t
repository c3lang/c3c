// #target: macos-x64

fault MyErr
{
    TEST
}

macro foo(int x)
{
    if (x) return x;
    return MyErr.TEST!;
}

extern fn void printf(char*, ...);

fn int main()
{
    int! a = foo(1);

    int! b = foo((a + 3) ?? 2);
    int! c = foo(0);
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    printf("c = %d\n", c);
    if (catch(c)) printf("c had error\n");
    c = 3;
    printf("c = %d\n", c);
    return 0;
}

/* #expect: failable_catch.ll

define i32 @main() #0 {
entry:
  %a = alloca i32, align 4
  %a.f = alloca i64, align 8
  %x = alloca i32, align 4
  %blockret = alloca i32, align 4
  %b = alloca i32, align 4
  %b.f = alloca i64, align 8
  %x1 = alloca i32, align 4
  %blockret2 = alloca i32, align 4
  %c = alloca i32, align 4
  %c.f = alloca i64, align 8
  %x8 = alloca i32, align 4
  %blockret9 = alloca i32, align 4
  store i32 1, i32* %x, align 4
  %0 = load i32, i32* %x, align 4
  %intbool = icmp ne i32 %0, 0
  br i1 %intbool, label %if.then, label %if.exit
if.then:                                          ; preds = %entry
  %1 = load i32, i32* %x, align 4
  store i32 %1, i32* %blockret, align 4
  br label %expr_block.exit
if.exit:                                          ; preds = %entry
  store i64 ptrtoint (%.fault* @"failable_catch_MyErr$TEST" to i64), i64* %a.f, align 8
  br label %after_assign
expr_block.exit:                                  ; preds = %if.then
  %2 = load i32, i32* %blockret, align 4
  store i32 %2, i32* %a, align 4
  store i64 0, i64* %a.f, align 8
  br label %after_assign
after_assign:                                     ; preds = %expr_block.exit, %if.exit
  %optval = load i64, i64* %a.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %else_block
after_check:                                      ; preds = %after_assign
  %3 = load i32, i32* %a, align 4
  %add = add i32 %3, 3
  br label %phi_block
else_block:                                       ; preds = %after_assign
  br label %phi_block
phi_block:                                        ; preds = %else_block, %after_check
  %val = phi i32 [ %add, %after_check ], [ 2, %else_block ]
  store i32 %val, i32* %x1, align 4
  %4 = load i32, i32* %x1, align 4
  %intbool3 = icmp ne i32 %4, 0
  br i1 %intbool3, label %if.then4, label %if.exit5
if.then4:                                         ; preds = %phi_block
  %5 = load i32, i32* %x1, align 4
  store i32 %5, i32* %blockret2, align 4
  br label %expr_block.exit6
if.exit5:                                         ; preds = %phi_block
  store i64 ptrtoint (%.fault* @"failable_catch_MyErr$TEST" to i64), i64* %b.f, align 8
  br label %after_assign7
expr_block.exit6:                                 ; preds = %if.then4
  %6 = load i32, i32* %blockret2, align 4
  store i32 %6, i32* %b, align 4
  store i64 0, i64* %b.f, align 8
  br label %after_assign7
after_assign7:                                    ; preds = %expr_block.exit6, %if.exit5
  store i32 0, i32* %x8, align 4
  %7 = load i32, i32* %x8, align 4
  %intbool10 = icmp ne i32 %7, 0
  br i1 %intbool10, label %if.then11, label %if.exit12
if.then11:                                        ; preds = %after_assign7
  %8 = load i32, i32* %x8, align 4
  store i32 %8, i32* %blockret9, align 4
  br label %expr_block.exit13
if.exit12:                                        ; preds = %after_assign7
  store i64 ptrtoint (%.fault* @"failable_catch_MyErr$TEST" to i64), i64* %c.f, align 8
  br label %after_assign14
expr_block.exit13:                                ; preds = %if.then11
  %9 = load i32, i32* %blockret9, align 4
  store i32 %9, i32* %c, align 4
  store i64 0, i64* %c.f, align 8
  br label %after_assign14
after_assign14:                                   ; preds = %expr_block.exit13, %if.exit12
  %optval15 = load i64, i64* %a.f, align 8
  %not_err16 = icmp eq i64 %optval15, 0
  br i1 %not_err16, label %after_check17, label %voiderr
after_check17:                                    ; preds = %after_assign14
  %10 = load i32, i32* %a, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 %10)
  br label %voiderr
voiderr:                                          ; preds = %after_check17, %after_assign14
  %optval18 = load i64, i64* %b.f, align 8
  %not_err19 = icmp eq i64 %optval18, 0
  br i1 %not_err19, label %after_check20, label %voiderr21
after_check20:                                    ; preds = %voiderr
  %11 = load i32, i32* %b, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 %11)
  br label %voiderr21
voiderr21:                                        ; preds = %after_check20, %voiderr
  %optval22 = load i64, i64* %c.f, align 8
  %not_err23 = icmp eq i64 %optval22, 0
  br i1 %not_err23, label %after_check24, label %voiderr25
after_check24:                                    ; preds = %voiderr21
  %12 = load i32, i32* %c, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i32 %12)
  br label %voiderr25
voiderr25:                                        ; preds = %after_check24, %voiderr21
  %13 = load i64, i64* %c.f, align 8
  %neq = icmp ne i64 %13, 0
  br i1 %neq, label %if.then26, label %if.exit27
if.then26:                                        ; preds = %voiderr25
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0))
  br label %if.exit27
if.exit27:                                        ; preds = %if.then26, %voiderr25
  store i32 3, i32* %c, align 4
  store i64 0, i64* %c.f, align 8
  %optval28 = load i64, i64* %c.f, align 8
  %not_err29 = icmp eq i64 %optval28, 0
  br i1 %not_err29, label %after_check30, label %voiderr31
after_check30:                                    ; preds = %if.exit27
  %14 = load i32, i32* %c, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i32 %14)
  br label %voiderr31
voiderr31:                                        ; preds = %after_check30, %if.exit27
  ret i32 0
}
