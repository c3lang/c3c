// #target: macos-x64

extern fn int! testError();

fn void test()
{

    double x = (testError() + testError()) ?? 100;
    double y = (1 << testError()) ?? 100;
    double z = testError() >> 1 ?? 100;
    double w = testError() * testError() ?? 100;
}

/* #expect: else_checks.ll

; Function Attrs: nounwind
declare i64 @testError(ptr) #0

; Function Attrs: nounwind
define void @else_checks_test() #0 {
entry:
  %x = alloca double, align 8
  %retparam = alloca i32, align 4
  %retparam1 = alloca i32, align 4
  %y = alloca double, align 8
  %retparam4 = alloca i32, align 4
  %z = alloca double, align 8
  %retparam11 = alloca i32, align 4
  %w = alloca double, align 8
  %retparam18 = alloca i32, align 4
  %retparam21 = alloca i32, align 4
  %0 = call i64 @testError(ptr %retparam)
  %not_err = icmp eq i64 %0, 0
  br i1 %not_err, label %after.errcheck, label %else_block

after.errcheck:                                   ; preds = %entry
  %1 = load i32, ptr %retparam, align 4
  %2 = call i64 @testError(ptr %retparam1)
  %not_err2 = icmp eq i64 %2, 0
  br i1 %not_err2, label %after.errcheck3, label %else_block

after.errcheck3:                                  ; preds = %after.errcheck
  %3 = load i32, ptr %retparam1, align 4
  %add = add i32 %1, %3
  br label %phi_block

else_block:                                       ; preds = %after.errcheck, %entry
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after.errcheck3
  %val = phi i32 [ %add, %after.errcheck3 ], [ 100, %else_block ]
  %sifp = sitofp i32 %val to double
  store double %sifp, ptr %x, align 8
  %4 = call i64 @testError(ptr %retparam4)
  %not_err5 = icmp eq i64 %4, 0
  br i1 %not_err5, label %after.errcheck6, label %else_block7

after.errcheck6:                                  ; preds = %phi_block
  %5 = load i32, ptr %retparam4, align 4
  %shl = shl i32 1, %5
  %6 = freeze i32 %shl
  br label %phi_block8

else_block7:                                      ; preds = %phi_block
  br label %phi_block8

phi_block8:                                       ; preds = %else_block7, %after.errcheck6
  %val9 = phi i32 [ %6, %after.errcheck6 ], [ 100, %else_block7 ]
  %sifp10 = sitofp i32 %val9 to double
  store double %sifp10, ptr %y, align 8
  %7 = call i64 @testError(ptr %retparam11)
  %not_err12 = icmp eq i64 %7, 0
  br i1 %not_err12, label %after.errcheck13, label %else_block14

after.errcheck13:                                 ; preds = %phi_block8
  %8 = load i32, ptr %retparam11, align 4
  %ashr = ashr i32 %8, 1
  %9 = freeze i32 %ashr
  br label %phi_block15

else_block14:                                     ; preds = %phi_block8
  br label %phi_block15

phi_block15:                                      ; preds = %else_block14, %after.errcheck13
  %val16 = phi i32 [ %9, %after.errcheck13 ], [ 100, %else_block14 ]
  %sifp17 = sitofp i32 %val16 to double
  store double %sifp17, ptr %z, align 8
  %10 = call i64 @testError(ptr %retparam18)
  %not_err19 = icmp eq i64 %10, 0
  br i1 %not_err19, label %after.errcheck20, label %else_block24

after.errcheck20:                                 ; preds = %phi_block15
  %11 = load i32, ptr %retparam18, align 4
  %12 = call i64 @testError(ptr %retparam21)
  %not_err22 = icmp eq i64 %12, 0
  br i1 %not_err22, label %after.errcheck23, label %else_block24

after.errcheck23:                                 ; preds = %after.errcheck20
  %13 = load i32, ptr %retparam21, align 4
  %mul = mul i32 %11, %13
  br label %phi_block25

else_block24:                                     ; preds = %after.errcheck20, %phi_block15
  br label %phi_block25

phi_block25:                                      ; preds = %else_block24, %after.errcheck23
  %val26 = phi i32 [ %mul, %after.errcheck23 ], [ 100, %else_block24 ]
  %sifp27 = sitofp i32 %val26 to double
  store double %sifp27, ptr %w, align 8
  ret void
}
