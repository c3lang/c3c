// #target: macos-x64
module test;
import std::io;

fault Cde
{
	HELLO,
	WORLD,
}
fn void main()
{
	anyerr x = Cde.WORLD;
	io::printf("%s %s\n", Cde.HELLO.nameof, x.nameof);
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %x = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr1 = alloca ptr, align 8
  %faultname_zero = alloca %"char[]", align 8
  store i64 ptrtoint (ptr @"test_Cde$WORLD" to i64), ptr %x, align 8
  store %"char[]" { ptr @.str, i64 6 }, ptr %taddr, align 8
  %0 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %0, align 8
  %1 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %1, align 8
  store ptr @.str.2, ptr %taddr1, align 8
  %2 = insertvalue %variant undef, ptr %taddr1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$p$a5$char" to i64), 1
  %4 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = load i64, ptr %x, align 8
  %eq = icmp eq i64 %5, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %entry
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %entry
  %6 = inttoptr i64 %5 to ptr
  %7 = getelementptr inbounds %.fault, ptr %6, i32 0, i32 1
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %7, %faultname_ok ]
  %8 = insertvalue %variant undef, ptr %faultname, 0
  %9 = insertvalue %variant %8, i64 ptrtoint (ptr @"ct$sa$char" to i64), 1
  %10 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 1
  store %variant %9, ptr %10, align 16
  %11 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 1
  store i64 2, ptr %11, align 8
  %12 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 0
  store ptr %varargslots, ptr %12, align 8
  %13 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 0
  %lo2 = load ptr, ptr %13, align 8
  %14 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 1
  %hi3 = load i64, ptr %14, align 8
  %15 = call i64 @std_io_printf(ptr %retparam, ptr %lo, i64 %hi, ptr %lo2, i64 %hi3)
  %not_err = icmp eq i64 %15, 0
  br i1 %not_err, label %after.errcheck, label %voiderr

after.errcheck:                                   ; preds = %faultname_exit
  br label %voiderr

voiderr:                                          ; preds = %after.errcheck, %faultname_exit
  ret void
}
