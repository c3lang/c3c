// #target: macos-x64
module foo;
import std::io;

fault Foo { ABC }

fn void blurb() { io::println("Blurb");}

macro int! tester()
{
	defer blurb();
	return Foo.ABC!;
}
fn void! test(int x)
{
	io::printfln("test(%d)", x);
	if (x || (tester()?)) io::println("Ok1");
	io::println("Test next");
	if (tester()? || x) io::println("Ok?");
	io::println("Test ok");
}

fn void! test2(int x)
{
	io::printfln("test2(%d)", x);
	if (x && (tester()?)) io::println("Ok1");
	io::println("Test next");
	if ((tester()?) && x) io::println("Ok?");
	io::println("Test ok");
}

fn void main()
{
	anyerr a = test(0);
	anyerr b = test(1);
	anyerr c = test2(0);
	anyerr d = test2(1);
}

/* #expect: foo.ll

define i64 @foo_test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %error_var = alloca i64, align 8
  %blockret = alloca i32, align 4
  %error_var1 = alloca i64, align 8
  %blockret2 = alloca i32, align 4
  %reterr = alloca i64, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %variant undef, ptr %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printfln(ptr %retparam, ptr @.str.1, i64 8, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %4, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %intbool = icmp ne i32 %0, 0
  br i1 %intbool, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %voiderr
  store i64 ptrtoint (ptr @"foo_Foo$ABC" to i64), ptr %error_var, align 8
  br label %opt_block_cleanup

opt_block_cleanup:                                ; preds = %or.rhs
  call void @foo_blurb()
  br label %guard_block

guard_block:                                      ; preds = %opt_block_cleanup
  %5 = load i64, ptr %error_var, align 8
  ret i64 %5

or.phi:                                           ; preds = %voiderr
  br label %if.then

if.then:                                          ; preds = %or.phi
  %6 = call i32 @std_io_println(ptr @.str.2) #1
  br label %if.exit

if.exit:                                          ; preds = %if.then
  %7 = call i32 @std_io_println(ptr @.str.3) #1
  store i64 ptrtoint (ptr @"foo_Foo$ABC" to i64), ptr %error_var1, align 8
  br label %opt_block_cleanup3

opt_block_cleanup3:                               ; preds = %if.exit
  call void @foo_blurb()
  br label %guard_block4

guard_block4:                                     ; preds = %opt_block_cleanup3
  %8 = load i64, ptr %error_var1, align 8
  ret i64 %8

if.exit6:                                         ; No predecessors!
  %9 = call i32 @std_io_println(ptr @.str.5) #1
  ret i64 0
}

; Function Attrs: nounwind
define i64 @foo_test2(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %error_var = alloca i64, align 8
  %blockret = alloca i32, align 4
  %error_var1 = alloca i64, align 8
  %blockret2 = alloca i32, align 4
  %reterr = alloca i64, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %variant undef, ptr %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printfln(ptr %retparam, ptr @.str.6, i64 9, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %4, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %intbool = icmp ne i32 %0, 0
  br i1 %intbool, label %and.rhs, label %and.phi

and.rhs:                                          ; preds = %voiderr
  store i64 ptrtoint (ptr @"foo_Foo$ABC" to i64), ptr %error_var, align 8
  br label %opt_block_cleanup

opt_block_cleanup:                                ; preds = %and.rhs
  call void @foo_blurb()
  br label %guard_block

guard_block:                                      ; preds = %opt_block_cleanup
  %5 = load i64, ptr %error_var, align 8
  ret i64 %5

and.phi:                                          ; preds = %voiderr
  br label %if.exit

if.exit:                                          ; preds = %and.phi
  %6 = call i32 @std_io_println(ptr @.str.7) #1
  store i64 ptrtoint (ptr @"foo_Foo$ABC" to i64), ptr %error_var1, align 8
  br label %opt_block_cleanup3

opt_block_cleanup3:                               ; preds = %if.exit
  call void @foo_blurb()
  br label %guard_block4

guard_block4:                                     ; preds = %opt_block_cleanup3
  %7 = load i64, ptr %error_var1, align 8
  ret i64 %7

if.exit5:                                         ; No predecessors!
  %8 = call i32 @std_io_println(ptr @.str.8) #1
  ret i64 0
}
