// #target: macos-x64

module test;
struct Foo
{
    int x, y;
}

fault MyErr
{
    FOO
}

extern fn int printf(char *c, ...);

fn void main()
{
    int! z = 2;
    Foo*! w = &&Foo{ z, 0 };
    printf("%d\n", w.x);
    z = MyErr.FOO!;
    w = &&Foo{ z, 0 };
    printf("Not visible: %d\n", w.x);
}

/* #expect: test.ll

%Foo = type { i32, i32 }

@"ct$test_Foo" = linkonce constant %.introspect { i8 10, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"test_MyErr$FOO" = linkonce constant i8 1, align 1
@"ct$test_MyErr" = linkonce constant %.introspect { i8 9, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"Not visible: %d\0A\00", align 1

; Function Attrs: nounwind
declare i32 @printf(ptr, ...) #0

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %z = alloca i32, align 4
  %z.f = alloca i64, align 8
  %w = alloca ptr, align 8
  %w.f = alloca i64, align 8
  %literal = alloca %Foo, align 4
  %literal4 = alloca %Foo, align 4
  store i32 2, ptr %z, align 4
  store i64 0, ptr %z.f, align 8
  %0 = getelementptr inbounds %Foo, ptr %literal, i32 0, i32 0
  %1 = load i64, ptr %z.f, align 8
  %not_err = icmp eq i64 %1, 0
  br i1 %not_err, label %after_check, label %error

error:                                            ; preds = %entry
  store i64 %1, ptr %w.f, align 8
  br label %after_assign

after_check:                                      ; preds = %entry
  %2 = load i32, ptr %z, align 4
  store i32 %2, ptr %0, align 4
  %3 = getelementptr inbounds %Foo, ptr %literal, i32 0, i32 1
  store i32 0, ptr %3, align 4
  store ptr %literal, ptr %w, align 8
  store i64 0, ptr %w.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %error
  %4 = load i64, ptr %w.f, align 8
  %not_err1 = icmp eq i64 %4, 0
  br i1 %not_err1, label %after_check2, label %voiderr

after_check2:                                     ; preds = %after_assign
  %5 = load ptr, ptr %w, align 8
  %6 = getelementptr inbounds %Foo, ptr %5, i32 0, i32 0
  %7 = load i32, ptr %6, align 8
  %8 = call i32 (ptr, ...) @printf(ptr @.str, i32 %7)
  br label %voiderr

voiderr:                                          ; preds = %after_check2, %after_assign
  store i64 ptrtoint (ptr @"test_MyErr$FOO" to i64), ptr %z.f, align 8
  br label %voiderr3

voiderr3:                                         ; preds = %voiderr
  %9 = getelementptr inbounds %Foo, ptr %literal4, i32 0, i32 0
  %10 = load i64, ptr %z.f, align 8
  %not_err5 = icmp eq i64 %10, 0
  br i1 %not_err5, label %after_check7, label %error6

error6:                                           ; preds = %voiderr3
  store i64 %10, ptr %w.f, align 8
  br label %after_assign8

after_check7:                                     ; preds = %voiderr3
  %11 = load i32, ptr %z, align 4
  store i32 %11, ptr %9, align 4
  %12 = getelementptr inbounds %Foo, ptr %literal4, i32 0, i32 1
  store i32 0, ptr %12, align 4
  store ptr %literal4, ptr %w, align 8
  store i64 0, ptr %w.f, align 8
  br label %after_assign8

after_assign8:                                    ; preds = %after_check7, %error6
  br label %voiderr9

voiderr9:                                         ; preds = %after_assign8
  %13 = load i64, ptr %w.f, align 8
  %not_err10 = icmp eq i64 %13, 0
  br i1 %not_err10, label %after_check11, label %voiderr12

after_check11:                                    ; preds = %voiderr9
  %14 = load ptr, ptr %w, align 8
  %15 = getelementptr inbounds %Foo, ptr %14, i32 0, i32 0
  %16 = load i32, ptr %15, align 8
  %17 = call i32 (ptr, ...) @printf(ptr @.str.1, i32 %16)
  br label %voiderr12

voiderr12:                                        ; preds = %after_check11, %voiderr9
  ret void
}