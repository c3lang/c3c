// #target: macos-x64
module test;

fn void test()
{
    int[3] x;
    int g = 0;
    foreach_r (z : x)
    {
        if (z > 0) break;
        if (z == 1) continue;
        g += z;
    }
}

/* #expect: test.ll

; Function Attrs: nounwind
define void @test_test() #0 {
entry:
  %x = alloca [3 x i32], align 4
  %g = alloca i32, align 4
  %.anon = alloca i64, align 8
  %z = alloca i32, align 4
  %0 = getelementptr inbounds [3 x i32], ptr %x, i64 0, i64 0
  store i32 0, ptr %0, align 4
  %1 = getelementptr inbounds [3 x i32], ptr %x, i64 0, i64 1
  store i32 0, ptr %1, align 4
  %2 = getelementptr inbounds [3 x i32], ptr %x, i64 0, i64 2
  store i32 0, ptr %2, align 4
  store i32 0, ptr %g, align 4
  store i64 3, ptr %.anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %if.exit3, %if.then2, %entry
  %3 = load i64, ptr %.anon, align 8
  %gt = icmp ugt i64 %3, 0
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %4 = load i64, ptr %.anon, align 8
  %sub = sub i64 %4, 1
  store i64 %sub, ptr %.anon, align 8
  %5 = load i64, ptr %.anon, align 8
  %6 = getelementptr inbounds [3 x i32], ptr %x, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4
  store i32 %7, ptr %z, align 4
  %8 = load i32, ptr %z, align 4
  %gt1 = icmp sgt i32 %8, 0
  br i1 %gt1, label %if.then, label %if.exit

if.then:                                          ; preds = %loop.body
  br label %loop.exit

if.exit:                                          ; preds = %loop.body
  %9 = load i32, ptr %z, align 4
  %eq = icmp eq i32 %9, 1
  br i1 %eq, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  br label %loop.cond

if.exit3:                                         ; preds = %if.exit
  %10 = load i32, ptr %g, align 4
  %11 = load i32, ptr %z, align 4
  %add = add i32 %10, %11
  store i32 %add, ptr %g, align 4
  br label %loop.cond

loop.exit:                                        ; preds = %if.then, %loop.cond
  ret void
}
