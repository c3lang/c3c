// #target: macos-x64
module foo;

struct Foo
{
    int[3] a;
}

extern fn void printf(char*, ...);

macro int* Foo.@operator_element_at_ref(Foo &f, int a) @operator(&[])
{
    return &f.a[a];
}

macro int Foo.@operator_len(Foo &f) @operator(len)
{
    return 3;
}

macro int Foo.@operator_element_at(Foo &f, int a) @operator([])
{
    return f.a[a];
}

fn int[5] getFields()
{
    printf("getFields\n");
    return int[5] { 3, 5, 2, 10, 111};
}
fn Foo *call(Foo *f)
{
    printf("Call made\n");
    return f;
}
fn void main()
{
    Foo x = { { 1, 5, 7} };
    printf("%d %d %d\n", x[0], x[1], x[2]);
    foreach (i, int y : *call(&x))
    {
        printf("Hello %d: %d\n", i, y);
    }
    foreach (i, int* &y : x)
    {
        *y += 1;
        printf("Hello %d: %d\n", i, *y);
    }
    foreach (i, int y : x)
    {
        printf("After one %d: %d\n", i, y);
    }

    foreach (i, int y : &x)
    {
        printf("By pointer %d: %d\n", i, y);
    }

    foreach (i, int y : x)
    {
        printf("Adding %d: %d\n", i, y);
        i++;
    }

    foreach(i, y : int[5] { 1, 2, 10, 111, 123 } )
    {
        printf("Adding %d: %d\n", i, y);
        i++;
    }
    foreach(i, y : getFields() )
    {
        printf("Pull value %d: %d\n", i, y);
    }
    foreach(i, y : &&getFields())
    {
        printf("Pull value tempptr %d: %d\n", i, y);
    }
    printf("%d %d\n", x[0], x[1]);
    int* y = &x[1];
    *y += 1;
    printf("%d %d\n", x[0], x[1]);
}

/* #expect: foo.ll

%Foo = type { [3 x i32] }

@"ct$foo_Foo" = linkonce constant %.introspect { i8 10, i64 12, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [11 x i8] c"getFields\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"Call made\0A\00", align 1
@.__const = private unnamed_addr constant %Foo { [3 x i32] [i32 1, i32 5, i32 7] }, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"%d %d %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Hello %d: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Hello %d: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"After one %d: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"By pointer %d: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"Adding %d: %d\0A\00", align 1
@.__const.8 = private unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 10, i32 111, i32 123], align 16
@.str.9 = private unnamed_addr constant [15 x i8] c"Adding %d: %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"Pull value %d: %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"Pull value tempptr %d: %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1

define void @foo_getFields(ptr noalias sret([5 x i32]) align 4 %0) #0 {
entry:
  %literal = alloca [5 x i32], align 16
  call void (ptr, ...) @printf(ptr @.str)
  %1 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 0
  store i32 3, ptr %1, align 4
  %2 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 1
  store i32 5, ptr %2, align 4
  %3 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 2
  store i32 2, ptr %3, align 4
  %4 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 3
  store i32 10, ptr %4, align 4
  %5 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 4
  store i32 111, ptr %5, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %0, ptr align 4 %literal, i32 20, i1 false)
  ret void
}

define ptr @foo_call(ptr %0) #0 {
entry:
  call void (ptr, ...) @printf(ptr @.str.1)
  ret ptr %0
}

define void @foo_main() #0 {
entry:
  %x = alloca %Foo, align 4
  %a = alloca i32, align 4
  %a1 = alloca i32, align 4
  %a3 = alloca i32, align 4
  %.anon = alloca ptr, align 8
  %.anon5 = alloca i32, align 4
  %.anon6 = alloca i32, align 4
  %i = alloca i32, align 4
  %y = alloca i32, align 4
  %a7 = alloca i32, align 4
  %.anon9 = alloca i32, align 4
  %.anon10 = alloca i32, align 4
  %i14 = alloca i32, align 4
  %y15 = alloca ptr, align 8
  %a16 = alloca i32, align 4
  %.anon21 = alloca i32, align 4
  %.anon22 = alloca i32, align 4
  %i26 = alloca i32, align 4
  %y27 = alloca i32, align 4
  %a28 = alloca i32, align 4
  %.anon32 = alloca i32, align 4
  %.anon33 = alloca i32, align 4
  %i37 = alloca i32, align 4
  %y38 = alloca i32, align 4
  %a39 = alloca i32, align 4
  %.anon43 = alloca i32, align 4
  %.anon44 = alloca i32, align 4
  %i48 = alloca i32, align 4
  %y49 = alloca i32, align 4
  %a50 = alloca i32, align 4
  %.anon55 = alloca [5 x i32], align 16
  %.anon56 = alloca i64, align 8
  %i59 = alloca i64, align 8
  %y60 = alloca i32, align 4
  %.anon64 = alloca [5 x i32], align 16
  %.anon65 = alloca i64, align 8
  %i69 = alloca i64, align 8
  %y70 = alloca i32, align 4
  %.anon73 = alloca ptr, align 8
  %sretparam = alloca [5 x i32], align 4
  %.anon74 = alloca i64, align 8
  %i78 = alloca i64, align 8
  %y79 = alloca i32, align 4
  %a82 = alloca i32, align 4
  %a84 = alloca i32, align 4
  %y86 = alloca ptr, align 8
  %a87 = alloca i32, align 4
  %a90 = alloca i32, align 4
  %a92 = alloca i32, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const, i32 12, i1 false)
  store i32 0, ptr %a, align 4
  %0 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %1 = load i32, ptr %a, align 4
  %sisiext = sext i32 %1 to i64
  %2 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 %sisiext
  %3 = load i32, ptr %2, align 4
  store i32 1, ptr %a1, align 4
  %4 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %5 = load i32, ptr %a1, align 4
  %sisiext2 = sext i32 %5 to i64
  %6 = getelementptr inbounds [3 x i32], ptr %4, i64 0, i64 %sisiext2
  %7 = load i32, ptr %6, align 4
  store i32 2, ptr %a3, align 4
  %8 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %9 = load i32, ptr %a3, align 4
  %sisiext4 = sext i32 %9 to i64
  %10 = getelementptr inbounds [3 x i32], ptr %8, i64 0, i64 %sisiext4
  %11 = load i32, ptr %10, align 4
  call void (ptr, ...) @printf(ptr @.str.2, i32 %3, i32 %7, i32 %11)
  %12 = call ptr @foo_call(ptr %x)
  store ptr %12, ptr %.anon, align 8
  store i32 3, ptr %.anon5, align 4
  store i32 0, ptr %.anon6, align 4
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %13 = load i32, ptr %.anon6, align 4
  %14 = load i32, ptr %.anon5, align 4
  %lt = icmp slt i32 %13, %14
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %15 = load i32, ptr %.anon6, align 4
  store i32 %15, ptr %i, align 4
  %16 = load ptr, ptr %.anon, align 8
  %17 = load i32, ptr %.anon6, align 4
  store i32 %17, ptr %a7, align 4
  %18 = getelementptr inbounds %Foo, ptr %16, i32 0, i32 0
  %19 = load i32, ptr %a7, align 4
  %sisiext8 = sext i32 %19 to i64
  %20 = getelementptr inbounds [3 x i32], ptr %18, i64 0, i64 %sisiext8
  %21 = load i32, ptr %20, align 4
  store i32 %21, ptr %y, align 4
  %22 = load i32, ptr %i, align 4
  %23 = load i32, ptr %y, align 4
  call void (ptr, ...) @printf(ptr @.str.3, i32 %22, i32 %23)
  %24 = load i32, ptr %.anon6, align 4
  %add = add i32 %24, 1
  store i32 %add, ptr %.anon6, align 4
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i32 3, ptr %.anon9, align 4
  store i32 0, ptr %.anon10, align 4
  br label %loop.cond11

loop.cond11:                                      ; preds = %loop.body13, %loop.exit
  %25 = load i32, ptr %.anon10, align 4
  %26 = load i32, ptr %.anon9, align 4
  %lt12 = icmp slt i32 %25, %26
  br i1 %lt12, label %loop.body13, label %loop.exit20

loop.body13:                                      ; preds = %loop.cond11
  %27 = load i32, ptr %.anon10, align 4
  store i32 %27, ptr %i14, align 4
  %28 = load i32, ptr %.anon10, align 4
  store i32 %28, ptr %a16, align 4
  %29 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %30 = load i32, ptr %a16, align 4
  %sisiext17 = sext i32 %30 to i64
  %31 = getelementptr inbounds [3 x i32], ptr %29, i64 0, i64 %sisiext17
  store ptr %31, ptr %y15, align 8
  %32 = load ptr, ptr %y15, align 8
  %33 = load i32, ptr %32, align 8
  %add18 = add i32 %33, 1
  store i32 %add18, ptr %32, align 8
  %34 = load i32, ptr %i14, align 4
  %35 = load ptr, ptr %y15, align 8
  %36 = load i32, ptr %35, align 8
  call void (ptr, ...) @printf(ptr @.str.4, i32 %34, i32 %36)
  %37 = load i32, ptr %.anon10, align 4
  %add19 = add i32 %37, 1
  store i32 %add19, ptr %.anon10, align 4
  br label %loop.cond11

loop.exit20:                                      ; preds = %loop.cond11
  store i32 3, ptr %.anon21, align 4
  store i32 0, ptr %.anon22, align 4
  br label %loop.cond23

loop.cond23:                                      ; preds = %loop.body25, %loop.exit20
  %38 = load i32, ptr %.anon22, align 4
  %39 = load i32, ptr %.anon21, align 4
  %lt24 = icmp slt i32 %38, %39
  br i1 %lt24, label %loop.body25, label %loop.exit31

loop.body25:                                      ; preds = %loop.cond23
  %40 = load i32, ptr %.anon22, align 4
  store i32 %40, ptr %i26, align 4
  %41 = load i32, ptr %.anon22, align 4
  store i32 %41, ptr %a28, align 4
  %42 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %43 = load i32, ptr %a28, align 4
  %sisiext29 = sext i32 %43 to i64
  %44 = getelementptr inbounds [3 x i32], ptr %42, i64 0, i64 %sisiext29
  %45 = load i32, ptr %44, align 4
  store i32 %45, ptr %y27, align 4
  %46 = load i32, ptr %i26, align 4
  %47 = load i32, ptr %y27, align 4
  call void (ptr, ...) @printf(ptr @.str.5, i32 %46, i32 %47)
  %48 = load i32, ptr %.anon22, align 4
  %add30 = add i32 %48, 1
  store i32 %add30, ptr %.anon22, align 4
  br label %loop.cond23

loop.exit31:                                      ; preds = %loop.cond23
  store i32 3, ptr %.anon32, align 4
  store i32 0, ptr %.anon33, align 4
  br label %loop.cond34

loop.cond34:                                      ; preds = %loop.body36, %loop.exit31
  %49 = load i32, ptr %.anon33, align 4
  %50 = load i32, ptr %.anon32, align 4
  %lt35 = icmp slt i32 %49, %50
  br i1 %lt35, label %loop.body36, label %loop.exit42

loop.body36:                                      ; preds = %loop.cond34
  %51 = load i32, ptr %.anon33, align 4
  store i32 %51, ptr %i37, align 4
  %52 = load i32, ptr %.anon33, align 4
  store i32 %52, ptr %a39, align 4
  %53 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %54 = load i32, ptr %a39, align 4
  %sisiext40 = sext i32 %54 to i64
  %55 = getelementptr inbounds [3 x i32], ptr %53, i64 0, i64 %sisiext40
  %56 = load i32, ptr %55, align 4
  store i32 %56, ptr %y38, align 4
  %57 = load i32, ptr %i37, align 4
  %58 = load i32, ptr %y38, align 4
  call void (ptr, ...) @printf(ptr @.str.6, i32 %57, i32 %58)
  %59 = load i32, ptr %.anon33, align 4
  %add41 = add i32 %59, 1
  store i32 %add41, ptr %.anon33, align 4
  br label %loop.cond34

loop.exit42:                                      ; preds = %loop.cond34
  store i32 3, ptr %.anon43, align 4
  store i32 0, ptr %.anon44, align 4
  br label %loop.cond45

loop.cond45:                                      ; preds = %loop.body47, %loop.exit42
  %60 = load i32, ptr %.anon44, align 4
  %61 = load i32, ptr %.anon43, align 4
  %lt46 = icmp slt i32 %60, %61
  br i1 %lt46, label %loop.body47, label %loop.exit54

loop.body47:                                      ; preds = %loop.cond45
  %62 = load i32, ptr %.anon44, align 4
  store i32 %62, ptr %i48, align 4
  %63 = load i32, ptr %.anon44, align 4
  store i32 %63, ptr %a50, align 4
  %64 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %65 = load i32, ptr %a50, align 4
  %sisiext51 = sext i32 %65 to i64
  %66 = getelementptr inbounds [3 x i32], ptr %64, i64 0, i64 %sisiext51
  %67 = load i32, ptr %66, align 4
  store i32 %67, ptr %y49, align 4
  %68 = load i32, ptr %i48, align 4
  %69 = load i32, ptr %y49, align 4
  call void (ptr, ...) @printf(ptr @.str.7, i32 %68, i32 %69)
  %70 = load i32, ptr %i48, align 4
  %add52 = add i32 %70, 1
  store i32 %add52, ptr %i48, align 4
  %71 = load i32, ptr %.anon44, align 4
  %add53 = add i32 %71, 1
  store i32 %add53, ptr %.anon44, align 4
  br label %loop.cond45

loop.exit54:                                      ; preds = %loop.cond45
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %.anon55, ptr align 16 @.__const.8, i32 20, i1 false)
  store i64 0, ptr %.anon56, align 8
  br label %loop.cond57

loop.cond57:                                      ; preds = %loop.body58, %loop.exit54
  %72 = load i64, ptr %.anon56, align 8
  %gt = icmp ugt i64 5, %72
  br i1 %gt, label %loop.body58, label %loop.exit63

loop.body58:                                      ; preds = %loop.cond57
  %73 = load i64, ptr %.anon56, align 8
  store i64 %73, ptr %i59, align 8
  %74 = load i64, ptr %.anon56, align 8
  %75 = getelementptr inbounds [5 x i32], ptr %.anon55, i64 0, i64 %74
  %76 = load i32, ptr %75, align 4
  store i32 %76, ptr %y60, align 4
  %77 = load i64, ptr %i59, align 8
  %78 = load i32, ptr %y60, align 4
  call void (ptr, ...) @printf(ptr @.str.9, i64 %77, i32 %78)
  %79 = load i64, ptr %i59, align 8
  %add61 = add i64 %79, 1
  store i64 %add61, ptr %i59, align 8
  %80 = load i64, ptr %.anon56, align 8
  %add62 = add i64 %80, 1
  store i64 %add62, ptr %.anon56, align 8
  br label %loop.cond57

loop.exit63:                                      ; preds = %loop.cond57
  call void @foo_getFields(ptr sret([5 x i32]) align 4 %.anon64)
  store i64 0, ptr %.anon65, align 8
  br label %loop.cond66

loop.cond66:                                      ; preds = %loop.body68, %loop.exit63
  %81 = load i64, ptr %.anon65, align 8
  %gt67 = icmp ugt i64 5, %81
  br i1 %gt67, label %loop.body68, label %loop.exit72

loop.body68:                                      ; preds = %loop.cond66
  %82 = load i64, ptr %.anon65, align 8
  store i64 %82, ptr %i69, align 8
  %83 = load i64, ptr %.anon65, align 8
  %84 = getelementptr inbounds [5 x i32], ptr %.anon64, i64 0, i64 %83
  %85 = load i32, ptr %84, align 4
  store i32 %85, ptr %y70, align 4
  %86 = load i64, ptr %i69, align 8
  %87 = load i32, ptr %y70, align 4
  call void (ptr, ...) @printf(ptr @.str.10, i64 %86, i32 %87)
  %88 = load i64, ptr %.anon65, align 8
  %add71 = add i64 %88, 1
  store i64 %add71, ptr %.anon65, align 8
  br label %loop.cond66

loop.exit72:                                      ; preds = %loop.cond66
  call void @foo_getFields(ptr sret([5 x i32]) align 4 %sretparam)
  store ptr %sretparam, ptr %.anon73, align 8
  store i64 0, ptr %.anon74, align 8
  br label %loop.cond75

loop.cond75:                                      ; preds = %loop.body77, %loop.exit72
  %89 = load i64, ptr %.anon74, align 8
  %gt76 = icmp ugt i64 5, %89
  br i1 %gt76, label %loop.body77, label %loop.exit81

loop.body77:                                      ; preds = %loop.cond75
  %90 = load i64, ptr %.anon74, align 8
  store i64 %90, ptr %i78, align 8
  %91 = load ptr, ptr %.anon73, align 8
  %92 = load i64, ptr %.anon74, align 8
  %93 = getelementptr inbounds [5 x i32], ptr %91, i64 0, i64 %92
  %94 = load i32, ptr %93, align 4
  store i32 %94, ptr %y79, align 4
  %95 = load i64, ptr %i78, align 8
  %96 = load i32, ptr %y79, align 4
  call void (ptr, ...) @printf(ptr @.str.11, i64 %95, i32 %96)
  %97 = load i64, ptr %.anon74, align 8
  %add80 = add i64 %97, 1
  store i64 %add80, ptr %.anon74, align 8
  br label %loop.cond75

loop.exit81:                                      ; preds = %loop.cond75
  store i32 0, ptr %a82, align 4
  %98 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %99 = load i32, ptr %a82, align 4
  %sisiext83 = sext i32 %99 to i64
  %100 = getelementptr inbounds [3 x i32], ptr %98, i64 0, i64 %sisiext83
  %101 = load i32, ptr %100, align 4
  store i32 1, ptr %a84, align 4
  %102 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %103 = load i32, ptr %a84, align 4
  %sisiext85 = sext i32 %103 to i64
  %104 = getelementptr inbounds [3 x i32], ptr %102, i64 0, i64 %sisiext85
  %105 = load i32, ptr %104, align 4
  call void (ptr, ...) @printf(ptr @.str.12, i32 %101, i32 %105)
  store i32 1, ptr %a87, align 4
  %106 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %107 = load i32, ptr %a87, align 4
  %sisiext88 = sext i32 %107 to i64
  %108 = getelementptr inbounds [3 x i32], ptr %106, i64 0, i64 %sisiext88
  store ptr %108, ptr %y86, align 8
  %109 = load ptr, ptr %y86, align 8
  %110 = load i32, ptr %109, align 8
  %add89 = add i32 %110, 1
  store i32 %add89, ptr %109, align 8
  store i32 0, ptr %a90, align 4
  %111 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %112 = load i32, ptr %a90, align 4
  %sisiext91 = sext i32 %112 to i64
  %113 = getelementptr inbounds [3 x i32], ptr %111, i64 0, i64 %sisiext91
  %114 = load i32, ptr %113, align 4
  store i32 1, ptr %a92, align 4
  %115 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %116 = load i32, ptr %a92, align 4
  %sisiext93 = sext i32 %116 to i64
  %117 = getelementptr inbounds [3 x i32], ptr %115, i64 0, i64 %sisiext93
  %118 = load i32, ptr %117, align 4
  call void (ptr, ...) @printf(ptr @.str.13, i32 %114, i32 %118)
  ret void
}
