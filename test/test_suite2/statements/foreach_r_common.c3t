// #target: macos-x64
module test;

extern fn void printf(char*, ...);

fn void main()
{
    float[3] foo = { 2, 4.5, 8 };
    float[<3>] foo2 = { 2, 4.5, 8 };
    foreach_r (a : foo)
    {
        printf("Value: %f\n", a);
    }
    foreach_r (float* &a : foo)
    {
        *a *= 2;
        printf("Value: %f\n", *a);
    }
    foreach_r (void* &a : foo)
    {
        printf("Value: %f\n", *((float*)(a)));
    }
    foreach_r (i, a : foo)
    {
        printf("Value[%d]: %f\n", i, a);
    }
    foreach_r (char i, double a : foo)
    {
        printf("Value2[%d]: %f\n", i, a);
    }
    foreach_r (double a : foo)
    {
        printf("Value3: %f\n", a);
    }

    foreach_r (a : foo2)
    {
        printf("Value: %f\n", a);
    }
    foreach_r (float* &a : foo2)
    {
        *a *= 2;
        printf("Value: %f\n", *a);
    }
    foreach_r (i, a : foo2)
    {
        printf("Value[%d]: %f\n", i, a);
    }
    foreach_r (char i, double a : foo2)
    {
        printf("Value2[%d]: %f\n", i, a);
    }
    foreach_r (double a : foo2)
    {
        printf("Value3: %f\n", a);
    }
}

/* #expect: test.ll

entry:
  %foo = alloca [3 x float], align 4
  %foo2 = alloca <3 x float>, align 16
  %.anon = alloca i64, align 8
  %a = alloca float, align 4
  %.anon1 = alloca i64, align 8
  %a6 = alloca ptr, align 8
  %.anon9 = alloca i64, align 8
  %a14 = alloca ptr, align 8
  %.anon17 = alloca i64, align 8
  %i = alloca i64, align 8
  %a22 = alloca float, align 4
  %.anon25 = alloca i64, align 8
  %i30 = alloca i8, align 1
  %a31 = alloca double, align 8
  %.anon34 = alloca i64, align 8
  %a39 = alloca double, align 8
  %.anon42 = alloca i64, align 8
  %a47 = alloca float, align 4
  %.anon50 = alloca i64, align 8
  %a55 = alloca ptr, align 8
  %.anon59 = alloca i64, align 8
  %i64 = alloca i64, align 8
  %a65 = alloca float, align 4
  %.anon68 = alloca i64, align 8
  %i73 = alloca i8, align 1
  %a75 = alloca double, align 8
  %.anon79 = alloca i64, align 8
  %a84 = alloca double, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %foo, ptr align 4 @.__const, i32 12, i1 false)
  store <3 x float> <float 2.000000e+00, float 4.500000e+00, float 8.000000e+00>, ptr %foo2, align 16
  store i64 3, ptr %.anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %0 = load i64, ptr %.anon, align 8
  %gt = icmp ugt i64 %0, 0
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %1 = load i64, ptr %.anon, align 8
  %sub = sub i64 %1, 1
  store i64 %sub, ptr %.anon, align 8
  %2 = load i64, ptr %.anon, align 8
  %3 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %2
  %4 = load float, ptr %3, align 4
  store float %4, ptr %a, align 4
  %5 = load float, ptr %a, align 4
  %fpfpext = fpext float %5 to double
  call void (ptr, ...) @printf(ptr @.str, double %fpfpext)
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i64 3, ptr %.anon1, align 8
  br label %loop.cond2

loop.cond2:                                       ; preds = %loop.body4, %loop.exit
  %6 = load i64, ptr %.anon1, align 8
  %gt3 = icmp ugt i64 %6, 0
  br i1 %gt3, label %loop.body4, label %loop.exit8

loop.body4:                                       ; preds = %loop.cond2
  %7 = load i64, ptr %.anon1, align 8
  %sub5 = sub i64 %7, 1
  store i64 %sub5, ptr %.anon1, align 8
  %8 = load i64, ptr %.anon1, align 8
  %9 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %8
  store ptr %9, ptr %a6, align 8
  %10 = load ptr, ptr %a6, align 8
  %11 = load float, ptr %10, align 8
  %fmul = fmul float %11, 2.000000e+00
  store float %fmul, ptr %10, align 8
  %12 = load ptr, ptr %a6, align 8
  %13 = load float, ptr %12, align 8
  %fpfpext7 = fpext float %13 to double
  call void (ptr, ...) @printf(ptr @.str.1, double %fpfpext7)
  br label %loop.cond2

loop.exit8:                                       ; preds = %loop.cond2
  store i64 3, ptr %.anon9, align 8
  br label %loop.cond10

loop.cond10:                                      ; preds = %loop.body12, %loop.exit8
  %14 = load i64, ptr %.anon9, align 8
  %gt11 = icmp ugt i64 %14, 0
  br i1 %gt11, label %loop.body12, label %loop.exit16

loop.body12:                                      ; preds = %loop.cond10
  %15 = load i64, ptr %.anon9, align 8
  %sub13 = sub i64 %15, 1
  store i64 %sub13, ptr %.anon9, align 8
  %16 = load i64, ptr %.anon9, align 8
  %17 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %16
  store ptr %17, ptr %a14, align 8
  %18 = load ptr, ptr %a14, align 8
  %19 = load float, ptr %18, align 8
  %fpfpext15 = fpext float %19 to double
  call void (ptr, ...) @printf(ptr @.str.2, double %fpfpext15)
  br label %loop.cond10

loop.exit16:                                      ; preds = %loop.cond10
  store i64 3, ptr %.anon17, align 8
  br label %loop.cond18

loop.cond18:                                      ; preds = %loop.body20, %loop.exit16
  %20 = load i64, ptr %.anon17, align 8
  %gt19 = icmp ugt i64 %20, 0
  br i1 %gt19, label %loop.body20, label %loop.exit24

loop.body20:                                      ; preds = %loop.cond18
  %21 = load i64, ptr %.anon17, align 8
  %sub21 = sub i64 %21, 1
  store i64 %sub21, ptr %.anon17, align 8
  %22 = load i64, ptr %.anon17, align 8
  store i64 %22, ptr %i, align 8
  %23 = load i64, ptr %.anon17, align 8
  %24 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %23
  %25 = load float, ptr %24, align 4
  store float %25, ptr %a22, align 4
  %26 = load i64, ptr %i, align 8
  %27 = load float, ptr %a22, align 4
  %fpfpext23 = fpext float %27 to double
  call void (ptr, ...) @printf(ptr @.str.3, i64 %26, double %fpfpext23)
  br label %loop.cond18

loop.exit24:                                      ; preds = %loop.cond18
  store i64 3, ptr %.anon25, align 8
  br label %loop.cond26

loop.cond26:                                      ; preds = %loop.body28, %loop.exit24
  %28 = load i64, ptr %.anon25, align 8
  %gt27 = icmp ugt i64 %28, 0
  br i1 %gt27, label %loop.body28, label %loop.exit33

loop.body28:                                      ; preds = %loop.cond26
  %29 = load i64, ptr %.anon25, align 8
  %sub29 = sub i64 %29, 1
  store i64 %sub29, ptr %.anon25, align 8
  %30 = load i64, ptr %.anon25, align 8
  %ztrunc = trunc i64 %30 to i8
  store i8 %ztrunc, ptr %i30, align 1
  %31 = load i64, ptr %.anon25, align 8
  %32 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %31
  %33 = load float, ptr %32, align 4
  %fpfpext32 = fpext float %33 to double
  store double %fpfpext32, ptr %a31, align 8
  %34 = load i8, ptr %i30, align 1
  %uisiext = zext i8 %34 to i32
  %35 = load double, ptr %a31, align 8
  call void (ptr, ...) @printf(ptr @.str.4, i32 %uisiext, double %35)
  br label %loop.cond26

loop.exit33:                                      ; preds = %loop.cond26
  store i64 3, ptr %.anon34, align 8
  br label %loop.cond35

loop.cond35:                                      ; preds = %loop.body37, %loop.exit33
  %36 = load i64, ptr %.anon34, align 8
  %gt36 = icmp ugt i64 %36, 0
  br i1 %gt36, label %loop.body37, label %loop.exit41

loop.body37:                                      ; preds = %loop.cond35
  %37 = load i64, ptr %.anon34, align 8
  %sub38 = sub i64 %37, 1
  store i64 %sub38, ptr %.anon34, align 8
  %38 = load i64, ptr %.anon34, align 8
  %39 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %38
  %40 = load float, ptr %39, align 4
  %fpfpext40 = fpext float %40 to double
  store double %fpfpext40, ptr %a39, align 8
  %41 = load double, ptr %a39, align 8
  call void (ptr, ...) @printf(ptr @.str.5, double %41)
  br label %loop.cond35

loop.exit41:                                      ; preds = %loop.cond35
  store i64 3, ptr %.anon42, align 8
  br label %loop.cond43

loop.cond43:                                      ; preds = %loop.body45, %loop.exit41
  %42 = load i64, ptr %.anon42, align 8
  %gt44 = icmp ugt i64 %42, 0
  br i1 %gt44, label %loop.body45, label %loop.exit49

loop.body45:                                      ; preds = %loop.cond43
  %43 = load i64, ptr %.anon42, align 8
  %sub46 = sub i64 %43, 1
  store i64 %sub46, ptr %.anon42, align 8
  %44 = load <3 x float>, ptr %foo2, align 16
  %45 = load i64, ptr %.anon42, align 8
  %46 = extractelement <3 x float> %44, i64 %45
  store float %46, ptr %a47, align 4
  %47 = load float, ptr %a47, align 4
  %fpfpext48 = fpext float %47 to double
  call void (ptr, ...) @printf(ptr @.str.6, double %fpfpext48)
  br label %loop.cond43

loop.exit49:                                      ; preds = %loop.cond43
  store i64 3, ptr %.anon50, align 8
  br label %loop.cond51

loop.cond51:                                      ; preds = %loop.body53, %loop.exit49
  %48 = load i64, ptr %.anon50, align 8
  %gt52 = icmp ugt i64 %48, 0
  br i1 %gt52, label %loop.body53, label %loop.exit58

loop.body53:                                      ; preds = %loop.cond51
  %49 = load i64, ptr %.anon50, align 8
  %sub54 = sub i64 %49, 1
  store i64 %sub54, ptr %.anon50, align 8
  %50 = load i64, ptr %.anon50, align 8
  %51 = getelementptr inbounds <3 x float>, ptr %foo2, i64 0, i64 %50
  store ptr %51, ptr %a55, align 8
  %52 = load ptr, ptr %a55, align 8
  %53 = load float, ptr %52, align 8
  %fmul56 = fmul float %53, 2.000000e+00
  store float %fmul56, ptr %52, align 8
  %54 = load ptr, ptr %a55, align 8
  %55 = load float, ptr %54, align 8
  %fpfpext57 = fpext float %55 to double
  call void (ptr, ...) @printf(ptr @.str.7, double %fpfpext57)
  br label %loop.cond51

loop.exit58:                                      ; preds = %loop.cond51
  store i64 3, ptr %.anon59, align 8
  br label %loop.cond60

loop.cond60:                                      ; preds = %loop.body62, %loop.exit58
  %56 = load i64, ptr %.anon59, align 8
  %gt61 = icmp ugt i64 %56, 0
  br i1 %gt61, label %loop.body62, label %loop.exit67

loop.body62:                                      ; preds = %loop.cond60
  %57 = load i64, ptr %.anon59, align 8
  %sub63 = sub i64 %57, 1
  store i64 %sub63, ptr %.anon59, align 8
  %58 = load i64, ptr %.anon59, align 8
  store i64 %58, ptr %i64, align 8
  %59 = load <3 x float>, ptr %foo2, align 16
  %60 = load i64, ptr %.anon59, align 8
  %61 = extractelement <3 x float> %59, i64 %60
  store float %61, ptr %a65, align 4
  %62 = load i64, ptr %i64, align 8
  %63 = load float, ptr %a65, align 4
  %fpfpext66 = fpext float %63 to double
  call void (ptr, ...) @printf(ptr @.str.8, i64 %62, double %fpfpext66)
  br label %loop.cond60

loop.exit67:                                      ; preds = %loop.cond60
  store i64 3, ptr %.anon68, align 8
  br label %loop.cond69

loop.cond69:                                      ; preds = %loop.body71, %loop.exit67
  %64 = load i64, ptr %.anon68, align 8
  %gt70 = icmp ugt i64 %64, 0
  br i1 %gt70, label %loop.body71, label %loop.exit78

loop.body71:                                      ; preds = %loop.cond69
  %65 = load i64, ptr %.anon68, align 8
  %sub72 = sub i64 %65, 1
  store i64 %sub72, ptr %.anon68, align 8
  %66 = load i64, ptr %.anon68, align 8
  %ztrunc74 = trunc i64 %66 to i8
  store i8 %ztrunc74, ptr %i73, align 1
  %67 = load <3 x float>, ptr %foo2, align 16
  %68 = load i64, ptr %.anon68, align 8
  %69 = extractelement <3 x float> %67, i64 %68
  %fpfpext76 = fpext float %69 to double
  store double %fpfpext76, ptr %a75, align 8
  %70 = load i8, ptr %i73, align 1
  %uisiext77 = zext i8 %70 to i32
  %71 = load double, ptr %a75, align 8
  call void (ptr, ...) @printf(ptr @.str.9, i32 %uisiext77, double %71)
  br label %loop.cond69

loop.exit78:                                      ; preds = %loop.cond69
  store i64 3, ptr %.anon79, align 8
  br label %loop.cond80

loop.cond80:                                      ; preds = %loop.body82, %loop.exit78
  %72 = load i64, ptr %.anon79, align 8
  %gt81 = icmp ugt i64 %72, 0
  br i1 %gt81, label %loop.body82, label %loop.exit86

loop.body82:                                      ; preds = %loop.cond80
  %73 = load i64, ptr %.anon79, align 8
  %sub83 = sub i64 %73, 1
  store i64 %sub83, ptr %.anon79, align 8
  %74 = load <3 x float>, ptr %foo2, align 16
  %75 = load i64, ptr %.anon79, align 8
  %76 = extractelement <3 x float> %74, i64 %75
  %fpfpext85 = fpext float %76 to double
  store double %fpfpext85, ptr %a84, align 8
  %77 = load double, ptr %a84, align 8
  call void (ptr, ...) @printf(ptr @.str.10, double %77)
  br label %loop.cond80

loop.exit86:                                      ; preds = %loop.cond80
  ret void
}
