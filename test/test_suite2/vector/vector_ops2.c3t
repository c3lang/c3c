// #target: macos-x64
// #safe: yes
module test;
import libc;

fn void testf()
{
    float[<4>] y = { 1, 2, 3, 4 };
    float[<4>] z = { 2, 2, 2, -100 };
    float[<4>] w = y + z;
    libc::printf("%f %f %f %f\n", w[0], w[1], w[2], w[3]);
    w = y * z;
    libc::printf("%f %f %f %f\n", w[0], w[1], w[2], w[3]);
    w = y / z;
    libc::printf("%f %f %f %f\n", w[0], w[1], w[2], w[3]);
    w = y - z;
    libc::printf("%f %f %f %f\n", w[0], w[1], w[2], w[3]);
    int[<4>] ww = y < z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y <= z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y > z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y >= z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y == z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y != z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
}

fn void testb()
{
    bool[<4>] y = { true, false, true, true };
    bool[<4>] z = { false, false, true, true };
    ichar[<4>] ww = y < z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y <= z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y > z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y >= z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y == z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
    ww = y != z;
    libc::printf("%d %d %d %d\n", ww[0], ww[1], ww[2], ww[3]);
}

fn void testi()
{
    int[<4>] y = { 1, 2, 3, 4 };
    int[<4>] z = { 2, 2, 2, -100 };
    int[<4>] w = y + z;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = y * z;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = y / z;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = y - z;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z >> y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z << y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z > y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z >= y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z < y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z <= y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z == y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = z != y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    uint[<4>] uz = { 2, 6, 2, 1 };
    w = uz > y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = uz >= y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = uz < y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = uz <= y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = uz == y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
    w = uz != y;
    libc::printf("%d %d %d %d\n", w[0], w[1], w[2], w[3]);
}

fn void main()
{
    testf();
    testi();
    testb();
}

/* #expect: test.ll

define void @test_testf() #0 {
entry:
  %y = alloca <4 x float>, align 16
  %z = alloca <4 x float>, align 16
  %w = alloca <4 x float>, align 16
  %ww = alloca <4 x i32>, align 16
  store <4 x float> <float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00>, ptr %y, align 16
  store <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float -1.000000e+02>, ptr %z, align 16
  %0 = load <4 x float>, ptr %y, align 16
  %1 = load <4 x float>, ptr %z, align 16
  %fadd = fadd <4 x float> %0, %1
  store <4 x float> %fadd, ptr %w, align 16
  %2 = load <4 x float>, ptr %w, align 16
  %3 = extractelement <4 x float> %2, i64 0
  %fpfpext = fpext float %3 to double
  %4 = load <4 x float>, ptr %w, align 16
  %5 = extractelement <4 x float> %4, i64 1
  %fpfpext1 = fpext float %5 to double
  %6 = load <4 x float>, ptr %w, align 16
  %7 = extractelement <4 x float> %6, i64 2
  %fpfpext2 = fpext float %7 to double
  %8 = load <4 x float>, ptr %w, align 16
  %9 = extractelement <4 x float> %8, i64 3
  %fpfpext3 = fpext float %9 to double
  %10 = call i32 (ptr, ...) @printf(ptr @.str, double %fpfpext, double %fpfpext1, double %fpfpext2, double %fpfpext3)
  %11 = load <4 x float>, ptr %y, align 16
  %12 = load <4 x float>, ptr %z, align 16
  %fmul = fmul <4 x float> %11, %12
  store <4 x float> %fmul, ptr %w, align 16
  %13 = load <4 x float>, ptr %w, align 16
  %14 = extractelement <4 x float> %13, i64 0
  %fpfpext4 = fpext float %14 to double
  %15 = load <4 x float>, ptr %w, align 16
  %16 = extractelement <4 x float> %15, i64 1
  %fpfpext5 = fpext float %16 to double
  %17 = load <4 x float>, ptr %w, align 16
  %18 = extractelement <4 x float> %17, i64 2
  %fpfpext6 = fpext float %18 to double
  %19 = load <4 x float>, ptr %w, align 16
  %20 = extractelement <4 x float> %19, i64 3
  %fpfpext7 = fpext float %20 to double
  %21 = call i32 (ptr, ...) @printf(ptr @.str.1, double %fpfpext4, double %fpfpext5, double %fpfpext6, double %fpfpext7)
  %22 = load <4 x float>, ptr %y, align 16
  %23 = load <4 x float>, ptr %z, align 16
  %24 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %23)
  %25 = call float @llvm.vector.reduce.fmin.v4f32(<4 x float> %24)
  %zero = fcmp ueq float %25, 0.000000e+00
  br i1 %zero, label %panic, label %checkok

panic:                                            ; preds = %entry
  %26 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %26(ptr @.panic_msg, i64 17, ptr @.file, i64 14, ptr @.func, i64 5, i32 12)
  br label %checkok

checkok:                                          ; preds = %panic, %entry
  %fdiv = fdiv <4 x float> %22, %23
  store <4 x float> %fdiv, ptr %w, align 16
  %27 = load <4 x float>, ptr %w, align 16
  %28 = extractelement <4 x float> %27, i64 0
  %fpfpext8 = fpext float %28 to double
  %29 = load <4 x float>, ptr %w, align 16
  %30 = extractelement <4 x float> %29, i64 1
  %fpfpext9 = fpext float %30 to double
  %31 = load <4 x float>, ptr %w, align 16
  %32 = extractelement <4 x float> %31, i64 2
  %fpfpext10 = fpext float %32 to double
  %33 = load <4 x float>, ptr %w, align 16
  %34 = extractelement <4 x float> %33, i64 3
  %fpfpext11 = fpext float %34 to double
  %35 = call i32 (ptr, ...) @printf(ptr @.str.2, double %fpfpext8, double %fpfpext9, double %fpfpext10, double %fpfpext11)
  %36 = load <4 x float>, ptr %y, align 16
  %37 = load <4 x float>, ptr %z, align 16
  %fsub = fsub <4 x float> %36, %37
  store <4 x float> %fsub, ptr %w, align 16
  %38 = load <4 x float>, ptr %w, align 16
  %39 = extractelement <4 x float> %38, i64 0
  %fpfpext12 = fpext float %39 to double
  %40 = load <4 x float>, ptr %w, align 16
  %41 = extractelement <4 x float> %40, i64 1
  %fpfpext13 = fpext float %41 to double
  %42 = load <4 x float>, ptr %w, align 16
  %43 = extractelement <4 x float> %42, i64 2
  %fpfpext14 = fpext float %43 to double
  %44 = load <4 x float>, ptr %w, align 16
  %45 = extractelement <4 x float> %44, i64 3
  %fpfpext15 = fpext float %45 to double
  %46 = call i32 (ptr, ...) @printf(ptr @.str.3, double %fpfpext12, double %fpfpext13, double %fpfpext14, double %fpfpext15)
  %47 = load <4 x float>, ptr %y, align 16
  %48 = load <4 x float>, ptr %z, align 16
  %lt = fcmp olt <4 x float> %47, %48
  %49 = sext <4 x i1> %lt to <4 x i32>
  store <4 x i32> %49, ptr %ww, align 16
  %50 = load <4 x i32>, ptr %ww, align 16
  %51 = extractelement <4 x i32> %50, i64 0
  %52 = load <4 x i32>, ptr %ww, align 16
  %53 = extractelement <4 x i32> %52, i64 1
  %54 = load <4 x i32>, ptr %ww, align 16
  %55 = extractelement <4 x i32> %54, i64 2
  %56 = load <4 x i32>, ptr %ww, align 16
  %57 = extractelement <4 x i32> %56, i64 3
  %58 = call i32 (ptr, ...) @printf(ptr @.str.4, i32 %51, i32 %53, i32 %55, i32 %57)
  %59 = load <4 x float>, ptr %y, align 16
  %60 = load <4 x float>, ptr %z, align 16
  %le = fcmp ole <4 x float> %59, %60
  %61 = sext <4 x i1> %le to <4 x i32>
  store <4 x i32> %61, ptr %ww, align 16
  %62 = load <4 x i32>, ptr %ww, align 16
  %63 = extractelement <4 x i32> %62, i64 0
  %64 = load <4 x i32>, ptr %ww, align 16
  %65 = extractelement <4 x i32> %64, i64 1
  %66 = load <4 x i32>, ptr %ww, align 16
  %67 = extractelement <4 x i32> %66, i64 2
  %68 = load <4 x i32>, ptr %ww, align 16
  %69 = extractelement <4 x i32> %68, i64 3
  %70 = call i32 (ptr, ...) @printf(ptr @.str.5, i32 %63, i32 %65, i32 %67, i32 %69)
  %71 = load <4 x float>, ptr %y, align 16
  %72 = load <4 x float>, ptr %z, align 16
  %gt = fcmp ogt <4 x float> %71, %72
  %73 = sext <4 x i1> %gt to <4 x i32>
  store <4 x i32> %73, ptr %ww, align 16
  %74 = load <4 x i32>, ptr %ww, align 16
  %75 = extractelement <4 x i32> %74, i64 0
  %76 = load <4 x i32>, ptr %ww, align 16
  %77 = extractelement <4 x i32> %76, i64 1
  %78 = load <4 x i32>, ptr %ww, align 16
  %79 = extractelement <4 x i32> %78, i64 2
  %80 = load <4 x i32>, ptr %ww, align 16
  %81 = extractelement <4 x i32> %80, i64 3
  %82 = call i32 (ptr, ...) @printf(ptr @.str.6, i32 %75, i32 %77, i32 %79, i32 %81)
  %83 = load <4 x float>, ptr %y, align 16
  %84 = load <4 x float>, ptr %z, align 16
  %ge = fcmp oge <4 x float> %83, %84
  %85 = sext <4 x i1> %ge to <4 x i32>
  store <4 x i32> %85, ptr %ww, align 16
  %86 = load <4 x i32>, ptr %ww, align 16
  %87 = extractelement <4 x i32> %86, i64 0
  %88 = load <4 x i32>, ptr %ww, align 16
  %89 = extractelement <4 x i32> %88, i64 1
  %90 = load <4 x i32>, ptr %ww, align 16
  %91 = extractelement <4 x i32> %90, i64 2
  %92 = load <4 x i32>, ptr %ww, align 16
  %93 = extractelement <4 x i32> %92, i64 3
  %94 = call i32 (ptr, ...) @printf(ptr @.str.7, i32 %87, i32 %89, i32 %91, i32 %93)
  %95 = load <4 x float>, ptr %y, align 16
  %96 = load <4 x float>, ptr %z, align 16
  %eq = fcmp oeq <4 x float> %95, %96
  %97 = sext <4 x i1> %eq to <4 x i32>
  store <4 x i32> %97, ptr %ww, align 16
  %98 = load <4 x i32>, ptr %ww, align 16
  %99 = extractelement <4 x i32> %98, i64 0
  %100 = load <4 x i32>, ptr %ww, align 16
  %101 = extractelement <4 x i32> %100, i64 1
  %102 = load <4 x i32>, ptr %ww, align 16
  %103 = extractelement <4 x i32> %102, i64 2
  %104 = load <4 x i32>, ptr %ww, align 16
  %105 = extractelement <4 x i32> %104, i64 3
  %106 = call i32 (ptr, ...) @printf(ptr @.str.8, i32 %99, i32 %101, i32 %103, i32 %105)
  %107 = load <4 x float>, ptr %y, align 16
  %108 = load <4 x float>, ptr %z, align 16
  %neq = fcmp one <4 x float> %107, %108
  %109 = sext <4 x i1> %neq to <4 x i32>
  store <4 x i32> %109, ptr %ww, align 16
  %110 = load <4 x i32>, ptr %ww, align 16
  %111 = extractelement <4 x i32> %110, i64 0
  %112 = load <4 x i32>, ptr %ww, align 16
  %113 = extractelement <4 x i32> %112, i64 1
  %114 = load <4 x i32>, ptr %ww, align 16
  %115 = extractelement <4 x i32> %114, i64 2
  %116 = load <4 x i32>, ptr %ww, align 16
  %117 = extractelement <4 x i32> %116, i64 3
  %118 = call i32 (ptr, ...) @printf(ptr @.str.9, i32 %111, i32 %113, i32 %115, i32 %117)
  ret void
}

; Function Attrs: nounwind
define void @test_testb() #0 {
entry:
  %y = alloca <4 x i8>, align 4
  %z = alloca <4 x i8>, align 4
  %ww = alloca <4 x i8>, align 4
  store <4 x i8> <i8 1, i8 0, i8 1, i8 1>, ptr %y, align 4
  store <4 x i8> <i8 0, i8 0, i8 1, i8 1>, ptr %z, align 4
  %0 = load <4 x i8>, ptr %y, align 4
  %1 = load <4 x i8>, ptr %z, align 4
  %lt = icmp ult <4 x i8> %0, %1
  %2 = sext <4 x i1> %lt to <4 x i8>
  store <4 x i8> %2, ptr %ww, align 4
  %3 = load <4 x i8>, ptr %ww, align 4
  %4 = extractelement <4 x i8> %3, i64 0
  %sisiext = sext i8 %4 to i32
  %5 = load <4 x i8>, ptr %ww, align 4
  %6 = extractelement <4 x i8> %5, i64 1
  %sisiext1 = sext i8 %6 to i32
  %7 = load <4 x i8>, ptr %ww, align 4
  %8 = extractelement <4 x i8> %7, i64 2
  %sisiext2 = sext i8 %8 to i32
  %9 = load <4 x i8>, ptr %ww, align 4
  %10 = extractelement <4 x i8> %9, i64 3
  %sisiext3 = sext i8 %10 to i32
  %11 = call i32 (ptr, ...) @printf(ptr @.str.10, i32 %sisiext, i32 %sisiext1, i32 %sisiext2, i32 %sisiext3)
  %12 = load <4 x i8>, ptr %y, align 4
  %13 = load <4 x i8>, ptr %z, align 4
  %le = icmp ule <4 x i8> %12, %13
  %14 = sext <4 x i1> %le to <4 x i8>
  store <4 x i8> %14, ptr %ww, align 4
  %15 = load <4 x i8>, ptr %ww, align 4
  %16 = extractelement <4 x i8> %15, i64 0
  %sisiext4 = sext i8 %16 to i32
  %17 = load <4 x i8>, ptr %ww, align 4
  %18 = extractelement <4 x i8> %17, i64 1
  %sisiext5 = sext i8 %18 to i32
  %19 = load <4 x i8>, ptr %ww, align 4
  %20 = extractelement <4 x i8> %19, i64 2
  %sisiext6 = sext i8 %20 to i32
  %21 = load <4 x i8>, ptr %ww, align 4
  %22 = extractelement <4 x i8> %21, i64 3
  %sisiext7 = sext i8 %22 to i32
  %23 = call i32 (ptr, ...) @printf(ptr @.str.11, i32 %sisiext4, i32 %sisiext5, i32 %sisiext6, i32 %sisiext7)
  %24 = load <4 x i8>, ptr %y, align 4
  %25 = load <4 x i8>, ptr %z, align 4
  %gt = icmp ugt <4 x i8> %24, %25
  %26 = sext <4 x i1> %gt to <4 x i8>
  store <4 x i8> %26, ptr %ww, align 4
  %27 = load <4 x i8>, ptr %ww, align 4
  %28 = extractelement <4 x i8> %27, i64 0
  %sisiext8 = sext i8 %28 to i32
  %29 = load <4 x i8>, ptr %ww, align 4
  %30 = extractelement <4 x i8> %29, i64 1
  %sisiext9 = sext i8 %30 to i32
  %31 = load <4 x i8>, ptr %ww, align 4
  %32 = extractelement <4 x i8> %31, i64 2
  %sisiext10 = sext i8 %32 to i32
  %33 = load <4 x i8>, ptr %ww, align 4
  %34 = extractelement <4 x i8> %33, i64 3
  %sisiext11 = sext i8 %34 to i32
  %35 = call i32 (ptr, ...) @printf(ptr @.str.12, i32 %sisiext8, i32 %sisiext9, i32 %sisiext10, i32 %sisiext11)
  %36 = load <4 x i8>, ptr %y, align 4
  %37 = load <4 x i8>, ptr %z, align 4
  %ge = icmp uge <4 x i8> %36, %37
  %38 = sext <4 x i1> %ge to <4 x i8>
  store <4 x i8> %38, ptr %ww, align 4
  %39 = load <4 x i8>, ptr %ww, align 4
  %40 = extractelement <4 x i8> %39, i64 0
  %sisiext12 = sext i8 %40 to i32
  %41 = load <4 x i8>, ptr %ww, align 4
  %42 = extractelement <4 x i8> %41, i64 1
  %sisiext13 = sext i8 %42 to i32
  %43 = load <4 x i8>, ptr %ww, align 4
  %44 = extractelement <4 x i8> %43, i64 2
  %sisiext14 = sext i8 %44 to i32
  %45 = load <4 x i8>, ptr %ww, align 4
  %46 = extractelement <4 x i8> %45, i64 3
  %sisiext15 = sext i8 %46 to i32
  %47 = call i32 (ptr, ...) @printf(ptr @.str.13, i32 %sisiext12, i32 %sisiext13, i32 %sisiext14, i32 %sisiext15)
  %48 = load <4 x i8>, ptr %y, align 4
  %49 = load <4 x i8>, ptr %z, align 4
  %eq = icmp eq <4 x i8> %48, %49
  %50 = sext <4 x i1> %eq to <4 x i8>
  store <4 x i8> %50, ptr %ww, align 4
  %51 = load <4 x i8>, ptr %ww, align 4
  %52 = extractelement <4 x i8> %51, i64 0
  %sisiext16 = sext i8 %52 to i32
  %53 = load <4 x i8>, ptr %ww, align 4
  %54 = extractelement <4 x i8> %53, i64 1
  %sisiext17 = sext i8 %54 to i32
  %55 = load <4 x i8>, ptr %ww, align 4
  %56 = extractelement <4 x i8> %55, i64 2
  %sisiext18 = sext i8 %56 to i32
  %57 = load <4 x i8>, ptr %ww, align 4
  %58 = extractelement <4 x i8> %57, i64 3
  %sisiext19 = sext i8 %58 to i32
  %59 = call i32 (ptr, ...) @printf(ptr @.str.14, i32 %sisiext16, i32 %sisiext17, i32 %sisiext18, i32 %sisiext19)
  %60 = load <4 x i8>, ptr %y, align 4
  %61 = load <4 x i8>, ptr %z, align 4
  %neq = icmp ne <4 x i8> %60, %61
  %62 = sext <4 x i1> %neq to <4 x i8>
  store <4 x i8> %62, ptr %ww, align 4
  %63 = load <4 x i8>, ptr %ww, align 4
  %64 = extractelement <4 x i8> %63, i64 0
  %sisiext20 = sext i8 %64 to i32
  %65 = load <4 x i8>, ptr %ww, align 4
  %66 = extractelement <4 x i8> %65, i64 1
  %sisiext21 = sext i8 %66 to i32
  %67 = load <4 x i8>, ptr %ww, align 4
  %68 = extractelement <4 x i8> %67, i64 2
  %sisiext22 = sext i8 %68 to i32
  %69 = load <4 x i8>, ptr %ww, align 4
  %70 = extractelement <4 x i8> %69, i64 3
  %sisiext23 = sext i8 %70 to i32
  %71 = call i32 (ptr, ...) @printf(ptr @.str.15, i32 %sisiext20, i32 %sisiext21, i32 %sisiext22, i32 %sisiext23)
  ret void
}

; Function Attrs: nounwind
define void @test_testi() #0 {
entry:
  %y = alloca <4 x i32>, align 16
  %z = alloca <4 x i32>, align 16
  %w = alloca <4 x i32>, align 16
  %uz = alloca <4 x i32>, align 16
  store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, ptr %y, align 16
  store <4 x i32> <i32 2, i32 2, i32 2, i32 -100>, ptr %z, align 16
  %0 = load <4 x i32>, ptr %y, align 16
  %1 = load <4 x i32>, ptr %z, align 16
  %add = add <4 x i32> %0, %1
  store <4 x i32> %add, ptr %w, align 16
  %2 = load <4 x i32>, ptr %w, align 16
  %3 = extractelement <4 x i32> %2, i64 0
  %4 = load <4 x i32>, ptr %w, align 16
  %5 = extractelement <4 x i32> %4, i64 1
  %6 = load <4 x i32>, ptr %w, align 16
  %7 = extractelement <4 x i32> %6, i64 2
  %8 = load <4 x i32>, ptr %w, align 16
  %9 = extractelement <4 x i32> %8, i64 3
  %10 = call i32 (ptr, ...) @printf(ptr @.str.16, i32 %3, i32 %5, i32 %7, i32 %9)
  %11 = load <4 x i32>, ptr %y, align 16
  %12 = load <4 x i32>, ptr %z, align 16
  %mul = mul <4 x i32> %11, %12
  store <4 x i32> %mul, ptr %w, align 16
  %13 = load <4 x i32>, ptr %w, align 16
  %14 = extractelement <4 x i32> %13, i64 0
  %15 = load <4 x i32>, ptr %w, align 16
  %16 = extractelement <4 x i32> %15, i64 1
  %17 = load <4 x i32>, ptr %w, align 16
  %18 = extractelement <4 x i32> %17, i64 2
  %19 = load <4 x i32>, ptr %w, align 16
  %20 = extractelement <4 x i32> %19, i64 3
  %21 = call i32 (ptr, ...) @printf(ptr @.str.17, i32 %14, i32 %16, i32 %18, i32 %20)
  %22 = load <4 x i32>, ptr %y, align 16
  %23 = load <4 x i32>, ptr %z, align 16
  %24 = call i32 @llvm.vector.reduce.umin.v4i32(<4 x i32> %23)
  %zero = icmp eq i32 %24, 0
  br i1 %zero, label %panic, label %checkok

panic:                                            ; preds = %entry
  %25 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %25(ptr @.panic_msg.18, i64 17, ptr @.file.19, i64 14, ptr @.func.20, i64 5, i32 56)
  br label %checkok

checkok:                                          ; preds = %panic, %entry
  %sdiv = sdiv <4 x i32> %22, %23
  store <4 x i32> %sdiv, ptr %w, align 16
  %26 = load <4 x i32>, ptr %w, align 16
  %27 = extractelement <4 x i32> %26, i64 0
  %28 = load <4 x i32>, ptr %w, align 16
  %29 = extractelement <4 x i32> %28, i64 1
  %30 = load <4 x i32>, ptr %w, align 16
  %31 = extractelement <4 x i32> %30, i64 2
  %32 = load <4 x i32>, ptr %w, align 16
  %33 = extractelement <4 x i32> %32, i64 3
  %34 = call i32 (ptr, ...) @printf(ptr @.str.21, i32 %27, i32 %29, i32 %31, i32 %33)
  %35 = load <4 x i32>, ptr %y, align 16
  %36 = load <4 x i32>, ptr %z, align 16
  %sub = sub <4 x i32> %35, %36
  store <4 x i32> %sub, ptr %w, align 16
  %37 = load <4 x i32>, ptr %w, align 16
  %38 = extractelement <4 x i32> %37, i64 0
  %39 = load <4 x i32>, ptr %w, align 16
  %40 = extractelement <4 x i32> %39, i64 1
  %41 = load <4 x i32>, ptr %w, align 16
  %42 = extractelement <4 x i32> %41, i64 2
  %43 = load <4 x i32>, ptr %w, align 16
  %44 = extractelement <4 x i32> %43, i64 3
  %45 = call i32 (ptr, ...) @printf(ptr @.str.22, i32 %38, i32 %40, i32 %42, i32 %44)
  %46 = load <4 x i32>, ptr %z, align 16
  %47 = load <4 x i32>, ptr %y, align 16
  %48 = call i32 @llvm.vector.reduce.smin.v4i32(<4 x i32> %47)
  %shift_underflow = icmp slt i32 %48, 0
  br i1 %shift_underflow, label %panic1, label %checkok2

panic1:                                           ; preds = %checkok
  %49 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %49(ptr @.panic_msg.23, i64 26, ptr @.file.24, i64 14, ptr @.func.25, i64 5, i32 60)
  br label %checkok2

checkok2:                                         ; preds = %panic1, %checkok
  %50 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %47)
  %shift_exceeds = icmp sge i32 %50, 32
  br i1 %shift_exceeds, label %panic3, label %checkok4

panic3:                                           ; preds = %checkok2
  %51 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %51(ptr @.panic_msg.26, i64 26, ptr @.file.27, i64 14, ptr @.func.28, i64 5, i32 60)
  br label %checkok4

checkok4:                                         ; preds = %panic3, %checkok2
  %ashr = ashr <4 x i32> %46, %47
  %52 = freeze <4 x i32> %ashr
  store <4 x i32> %52, ptr %w, align 16
  %53 = load <4 x i32>, ptr %w, align 16
  %54 = extractelement <4 x i32> %53, i64 0
  %55 = load <4 x i32>, ptr %w, align 16
  %56 = extractelement <4 x i32> %55, i64 1
  %57 = load <4 x i32>, ptr %w, align 16
  %58 = extractelement <4 x i32> %57, i64 2
  %59 = load <4 x i32>, ptr %w, align 16
  %60 = extractelement <4 x i32> %59, i64 3
  %61 = call i32 (ptr, ...) @printf(ptr @.str.29, i32 %54, i32 %56, i32 %58, i32 %60)
  %62 = load <4 x i32>, ptr %z, align 16
  %63 = load <4 x i32>, ptr %y, align 16
  %64 = call i32 @llvm.vector.reduce.smin.v4i32(<4 x i32> %63)
  %shift_underflow5 = icmp slt i32 %64, 0
  br i1 %shift_underflow5, label %panic6, label %checkok7

panic6:                                           ; preds = %checkok4
  %65 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %65(ptr @.panic_msg.30, i64 26, ptr @.file.31, i64 14, ptr @.func.32, i64 5, i32 62)
  br label %checkok7

checkok7:                                         ; preds = %panic6, %checkok4
  %66 = call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %63)
  %shift_exceeds8 = icmp sge i32 %66, 32
  br i1 %shift_exceeds8, label %panic9, label %checkok10

panic9:                                           ; preds = %checkok7
  %67 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %67(ptr @.panic_msg.33, i64 26, ptr @.file.34, i64 14, ptr @.func.35, i64 5, i32 62)
  br label %checkok10

checkok10:                                        ; preds = %panic9, %checkok7
  %shl = shl <4 x i32> %62, %63
  %68 = freeze <4 x i32> %shl
  store <4 x i32> %68, ptr %w, align 16
  %69 = load <4 x i32>, ptr %w, align 16
  %70 = extractelement <4 x i32> %69, i64 0
  %71 = load <4 x i32>, ptr %w, align 16
  %72 = extractelement <4 x i32> %71, i64 1
  %73 = load <4 x i32>, ptr %w, align 16
  %74 = extractelement <4 x i32> %73, i64 2
  %75 = load <4 x i32>, ptr %w, align 16
  %76 = extractelement <4 x i32> %75, i64 3
  %77 = call i32 (ptr, ...) @printf(ptr @.str.36, i32 %70, i32 %72, i32 %74, i32 %76)
  %78 = load <4 x i32>, ptr %z, align 16
  %79 = load <4 x i32>, ptr %y, align 16
  %gt = icmp sgt <4 x i32> %78, %79
  %80 = sext <4 x i1> %gt to <4 x i32>
  store <4 x i32> %80, ptr %w, align 16
  %81 = load <4 x i32>, ptr %w, align 16
  %82 = extractelement <4 x i32> %81, i64 0
  %83 = load <4 x i32>, ptr %w, align 16
  %84 = extractelement <4 x i32> %83, i64 1
  %85 = load <4 x i32>, ptr %w, align 16
  %86 = extractelement <4 x i32> %85, i64 2
  %87 = load <4 x i32>, ptr %w, align 16
  %88 = extractelement <4 x i32> %87, i64 3
  %89 = call i32 (ptr, ...) @printf(ptr @.str.37, i32 %82, i32 %84, i32 %86, i32 %88)
  %90 = load <4 x i32>, ptr %z, align 16
  %91 = load <4 x i32>, ptr %y, align 16
  %ge = icmp sge <4 x i32> %90, %91
  %92 = sext <4 x i1> %ge to <4 x i32>
  store <4 x i32> %92, ptr %w, align 16
  %93 = load <4 x i32>, ptr %w, align 16
  %94 = extractelement <4 x i32> %93, i64 0
  %95 = load <4 x i32>, ptr %w, align 16
  %96 = extractelement <4 x i32> %95, i64 1
  %97 = load <4 x i32>, ptr %w, align 16
  %98 = extractelement <4 x i32> %97, i64 2
  %99 = load <4 x i32>, ptr %w, align 16
  %100 = extractelement <4 x i32> %99, i64 3
  %101 = call i32 (ptr, ...) @printf(ptr @.str.38, i32 %94, i32 %96, i32 %98, i32 %100)
  %102 = load <4 x i32>, ptr %z, align 16
  %103 = load <4 x i32>, ptr %y, align 16
  %lt = icmp slt <4 x i32> %102, %103
  %104 = sext <4 x i1> %lt to <4 x i32>
  store <4 x i32> %104, ptr %w, align 16
  %105 = load <4 x i32>, ptr %w, align 16
  %106 = extractelement <4 x i32> %105, i64 0
  %107 = load <4 x i32>, ptr %w, align 16
  %108 = extractelement <4 x i32> %107, i64 1
  %109 = load <4 x i32>, ptr %w, align 16
  %110 = extractelement <4 x i32> %109, i64 2
  %111 = load <4 x i32>, ptr %w, align 16
  %112 = extractelement <4 x i32> %111, i64 3
  %113 = call i32 (ptr, ...) @printf(ptr @.str.39, i32 %106, i32 %108, i32 %110, i32 %112)
  %114 = load <4 x i32>, ptr %z, align 16
  %115 = load <4 x i32>, ptr %y, align 16
  %le = icmp sle <4 x i32> %114, %115
  %116 = sext <4 x i1> %le to <4 x i32>
  store <4 x i32> %116, ptr %w, align 16
  %117 = load <4 x i32>, ptr %w, align 16
  %118 = extractelement <4 x i32> %117, i64 0
  %119 = load <4 x i32>, ptr %w, align 16
  %120 = extractelement <4 x i32> %119, i64 1
  %121 = load <4 x i32>, ptr %w, align 16
  %122 = extractelement <4 x i32> %121, i64 2
  %123 = load <4 x i32>, ptr %w, align 16
  %124 = extractelement <4 x i32> %123, i64 3
  %125 = call i32 (ptr, ...) @printf(ptr @.str.40, i32 %118, i32 %120, i32 %122, i32 %124)
  %126 = load <4 x i32>, ptr %z, align 16
  %127 = load <4 x i32>, ptr %y, align 16
  %eq = icmp eq <4 x i32> %126, %127
  %128 = sext <4 x i1> %eq to <4 x i32>
  store <4 x i32> %128, ptr %w, align 16
  %129 = load <4 x i32>, ptr %w, align 16
  %130 = extractelement <4 x i32> %129, i64 0
  %131 = load <4 x i32>, ptr %w, align 16
  %132 = extractelement <4 x i32> %131, i64 1
  %133 = load <4 x i32>, ptr %w, align 16
  %134 = extractelement <4 x i32> %133, i64 2
  %135 = load <4 x i32>, ptr %w, align 16
  %136 = extractelement <4 x i32> %135, i64 3
  %137 = call i32 (ptr, ...) @printf(ptr @.str.41, i32 %130, i32 %132, i32 %134, i32 %136)
  %138 = load <4 x i32>, ptr %z, align 16
  %139 = load <4 x i32>, ptr %y, align 16
  %neq = icmp ne <4 x i32> %138, %139
  %140 = sext <4 x i1> %neq to <4 x i32>
  store <4 x i32> %140, ptr %w, align 16
  %141 = load <4 x i32>, ptr %w, align 16
  %142 = extractelement <4 x i32> %141, i64 0
  %143 = load <4 x i32>, ptr %w, align 16
  %144 = extractelement <4 x i32> %143, i64 1
  %145 = load <4 x i32>, ptr %w, align 16
  %146 = extractelement <4 x i32> %145, i64 2
  %147 = load <4 x i32>, ptr %w, align 16
  %148 = extractelement <4 x i32> %147, i64 3
  %149 = call i32 (ptr, ...) @printf(ptr @.str.42, i32 %142, i32 %144, i32 %146, i32 %148)
  store <4 x i32> <i32 2, i32 6, i32 2, i32 1>, ptr %uz, align 16
  %150 = load <4 x i32>, ptr %uz, align 16
  %151 = load <4 x i32>, ptr %y, align 16
  %lt11 = icmp slt <4 x i32> %151, %150
  %check = icmp slt <4 x i32> %150, zeroinitializer
  %siui-lt = or <4 x i1> %check, %lt11
  %152 = sext <4 x i1> %siui-lt to <4 x i32>
  store <4 x i32> %152, ptr %w, align 16
  %153 = load <4 x i32>, ptr %w, align 16
  %154 = extractelement <4 x i32> %153, i64 0
  %155 = load <4 x i32>, ptr %w, align 16
  %156 = extractelement <4 x i32> %155, i64 1
  %157 = load <4 x i32>, ptr %w, align 16
  %158 = extractelement <4 x i32> %157, i64 2
  %159 = load <4 x i32>, ptr %w, align 16
  %160 = extractelement <4 x i32> %159, i64 3
  %161 = call i32 (ptr, ...) @printf(ptr @.str.43, i32 %154, i32 %156, i32 %158, i32 %160)
  %162 = load <4 x i32>, ptr %uz, align 16
  %163 = load <4 x i32>, ptr %y, align 16
  %le12 = icmp sle <4 x i32> %163, %162
  %check13 = icmp slt <4 x i32> %162, zeroinitializer
  %siui-le = or <4 x i1> %check13, %le12
  %164 = sext <4 x i1> %siui-le to <4 x i32>
  store <4 x i32> %164, ptr %w, align 16
  %165 = load <4 x i32>, ptr %w, align 16
  %166 = extractelement <4 x i32> %165, i64 0
  %167 = load <4 x i32>, ptr %w, align 16
  %168 = extractelement <4 x i32> %167, i64 1
  %169 = load <4 x i32>, ptr %w, align 16
  %170 = extractelement <4 x i32> %169, i64 2
  %171 = load <4 x i32>, ptr %w, align 16
  %172 = extractelement <4 x i32> %171, i64 3
  %173 = call i32 (ptr, ...) @printf(ptr @.str.44, i32 %166, i32 %168, i32 %170, i32 %172)
  %174 = load <4 x i32>, ptr %uz, align 16
  %175 = load <4 x i32>, ptr %y, align 16
  %gt14 = icmp sgt <4 x i32> %175, %174
  %check15 = icmp sge <4 x i32> %174, zeroinitializer
  %siui-gt = and <4 x i1> %check15, %gt14
  %176 = sext <4 x i1> %siui-gt to <4 x i32>
  store <4 x i32> %176, ptr %w, align 16
  %177 = load <4 x i32>, ptr %w, align 16
  %178 = extractelement <4 x i32> %177, i64 0
  %179 = load <4 x i32>, ptr %w, align 16
  %180 = extractelement <4 x i32> %179, i64 1
  %181 = load <4 x i32>, ptr %w, align 16
  %182 = extractelement <4 x i32> %181, i64 2
  %183 = load <4 x i32>, ptr %w, align 16
  %184 = extractelement <4 x i32> %183, i64 3
  %185 = call i32 (ptr, ...) @printf(ptr @.str.45, i32 %178, i32 %180, i32 %182, i32 %184)
  %186 = load <4 x i32>, ptr %uz, align 16
  %187 = load <4 x i32>, ptr %y, align 16
  %ge16 = icmp sge <4 x i32> %187, %186
  %check17 = icmp sge <4 x i32> %186, zeroinitializer
  %siui-ge = and <4 x i1> %check17, %ge16
  %188 = sext <4 x i1> %siui-ge to <4 x i32>
  store <4 x i32> %188, ptr %w, align 16
  %189 = load <4 x i32>, ptr %w, align 16
  %190 = extractelement <4 x i32> %189, i64 0
  %191 = load <4 x i32>, ptr %w, align 16
  %192 = extractelement <4 x i32> %191, i64 1
  %193 = load <4 x i32>, ptr %w, align 16
  %194 = extractelement <4 x i32> %193, i64 2
  %195 = load <4 x i32>, ptr %w, align 16
  %196 = extractelement <4 x i32> %195, i64 3
  %197 = call i32 (ptr, ...) @printf(ptr @.str.46, i32 %190, i32 %192, i32 %194, i32 %196)
  %198 = load <4 x i32>, ptr %uz, align 16
  %199 = load <4 x i32>, ptr %y, align 16
  %eq18 = icmp eq <4 x i32> %199, %198
  %check19 = icmp sge <4 x i32> %199, zeroinitializer
  %siui-eq = and <4 x i1> %check19, %eq18
  %200 = sext <4 x i1> %siui-eq to <4 x i32>
  store <4 x i32> %200, ptr %w, align 16
  %201 = load <4 x i32>, ptr %w, align 16
  %202 = extractelement <4 x i32> %201, i64 0
  %203 = load <4 x i32>, ptr %w, align 16
  %204 = extractelement <4 x i32> %203, i64 1
  %205 = load <4 x i32>, ptr %w, align 16
  %206 = extractelement <4 x i32> %205, i64 2
  %207 = load <4 x i32>, ptr %w, align 16
  %208 = extractelement <4 x i32> %207, i64 3
  %209 = call i32 (ptr, ...) @printf(ptr @.str.47, i32 %202, i32 %204, i32 %206, i32 %208)
  %210 = load <4 x i32>, ptr %uz, align 16
  %211 = load <4 x i32>, ptr %y, align 16
  %neq20 = icmp ne <4 x i32> %211, %210
  %check21 = icmp slt <4 x i32> %211, zeroinitializer
  %siui-ne = or <4 x i1> %check21, %neq20
  %212 = sext <4 x i1> %siui-ne to <4 x i32>
  store <4 x i32> %212, ptr %w, align 16
  %213 = load <4 x i32>, ptr %w, align 16
  %214 = extractelement <4 x i32> %213, i64 0
  %215 = load <4 x i32>, ptr %w, align 16
  %216 = extractelement <4 x i32> %215, i64 1
  %217 = load <4 x i32>, ptr %w, align 16
  %218 = extractelement <4 x i32> %217, i64 2
  %219 = load <4 x i32>, ptr %w, align 16
  %220 = extractelement <4 x i32> %219, i64 3
  %221 = call i32 (ptr, ...) @printf(ptr @.str.48, i32 %214, i32 %216, i32 %218, i32 %220)
  ret void
}
