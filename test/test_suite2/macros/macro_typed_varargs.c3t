// #target: macos-x64

module test;

import std::io;

macro foo(int... x)
{
	foreach (i : x)
	{
		io::printfln("%d", i);
	}
}

macro foo2(x...)
{
	foreach (i : x)
	{
		io::printfln("%d", *(int*)i);
	}
}

fn void main()
{
	foo(1, -1, 3141, 999 + 1);
	foo2(1, -1, 3141, 999 + 1);
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %x = alloca %"int[]", align 8
  %literal = alloca [4 x i32], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i32, align 4
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %x4 = alloca %"variant[]", align 8
  %literal5 = alloca [4 x %variant], align 16
  %taddr6 = alloca i32, align 4
  %taddr7 = alloca i32, align 4
  %taddr8 = alloca i32, align 4
  %taddr9 = alloca i32, align 4
  %.anon10 = alloca i64, align 8
  %.anon11 = alloca i64, align 8
  %i15 = alloca %variant, align 8
  %retparam17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %vararg21 = alloca %"variant[]", align 8
  %varargslots22 = alloca [1 x %variant], align 16
  %0 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 0
  store i32 1, ptr %0, align 4
  %1 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 1
  store i32 -1, ptr %1, align 4
  %2 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 2
  store i32 3141, ptr %2, align 4
  %3 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 3
  store i32 1000, ptr %3, align 4
  %4 = insertvalue %"int[]" undef, ptr %literal, 0
  %5 = insertvalue %"int[]" %4, i64 4, 1
  store %"int[]" %5, ptr %x, align 8
  %6 = getelementptr inbounds %"int[]", ptr %x, i32 0, i32 1
  %7 = load i64, ptr %6, align 8
  store i64 %7, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %voiderr, %entry
  %8 = load i64, ptr %.anon1, align 8
  %9 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %8, %9
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %10 = getelementptr inbounds %"int[]", ptr %x, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds i32, ptr %11, i64 %12
  %13 = load i32, ptr %ptroffset, align 4
  store i32 %13, ptr %i, align 4
  store %"char[]" { ptr @.str, i64 2 }, ptr %taddr, align 8
  %14 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %14, align 8
  %15 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %15, align 8
  %16 = insertvalue %variant undef, ptr %i, 0
  %17 = insertvalue %variant %16, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %18 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %17, ptr %18, align 16
  %19 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 1
  store i64 1, ptr %19, align 8
  %20 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 0
  store ptr %varargslots, ptr %20, align 8
  %21 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 0
  %lo2 = load ptr, ptr %21, align 8
  %22 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 1
  %hi3 = load i64, ptr %22, align 8
  %23 = call i64 @std_io_printfln(ptr %retparam, ptr %lo, i64 %hi, ptr %lo2, i64 %hi3)
  %not_err = icmp eq i64 %23, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %loop.body
  br label %voiderr

voiderr:                                          ; preds = %after_check, %loop.body
  %24 = load i64, ptr %.anon1, align 8
  %add = add i64 %24, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  %25 = getelementptr inbounds [4 x %variant], ptr %literal5, i64 0, i64 0
  store i32 1, ptr %taddr6, align 4
  %26 = insertvalue %variant undef, ptr %taddr6, 0
  %27 = insertvalue %variant %26, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %27, ptr %25, align 8
  %28 = getelementptr inbounds [4 x %variant], ptr %literal5, i64 0, i64 1
  store i32 -1, ptr %taddr7, align 4
  %29 = insertvalue %variant undef, ptr %taddr7, 0
  %30 = insertvalue %variant %29, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %30, ptr %28, align 8
  %31 = getelementptr inbounds [4 x %variant], ptr %literal5, i64 0, i64 2
  store i32 3141, ptr %taddr8, align 4
  %32 = insertvalue %variant undef, ptr %taddr8, 0
  %33 = insertvalue %variant %32, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %33, ptr %31, align 8
  %34 = getelementptr inbounds [4 x %variant], ptr %literal5, i64 0, i64 3
  store i32 1000, ptr %taddr9, align 4
  %35 = insertvalue %variant undef, ptr %taddr9, 0
  %36 = insertvalue %variant %35, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %36, ptr %34, align 8
  %37 = insertvalue %"variant[]" undef, ptr %literal5, 0
  %38 = insertvalue %"variant[]" %37, i64 4, 1
  store %"variant[]" %38, ptr %x4, align 8
  %39 = getelementptr inbounds %"variant[]", ptr %x4, i32 0, i32 1
  %40 = load i64, ptr %39, align 8
  store i64 %40, ptr %.anon10, align 8
  store i64 0, ptr %.anon11, align 8
  br label %loop.cond12

loop.cond12:                                      ; preds = %voiderr27, %loop.exit
  %41 = load i64, ptr %.anon11, align 8
  %42 = load i64, ptr %.anon10, align 8
  %lt13 = icmp ult i64 %41, %42
  br i1 %lt13, label %loop.body14, label %loop.exit29

loop.body14:                                      ; preds = %loop.cond12
  %43 = getelementptr inbounds %"variant[]", ptr %x4, i32 0, i32 0
  %44 = load ptr, ptr %43, align 8
  %45 = load i64, ptr %.anon11, align 8
  %ptroffset16 = getelementptr inbounds %variant, ptr %44, i64 %45
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %i15, ptr align 8 %ptroffset16, i32 16, i1 false)
  store %"char[]" { ptr @.str.1, i64 2 }, ptr %taddr18, align 8
  %46 = getelementptr inbounds { ptr, i64 }, ptr %taddr18, i32 0, i32 0
  %lo19 = load ptr, ptr %46, align 8
  %47 = getelementptr inbounds { ptr, i64 }, ptr %taddr18, i32 0, i32 1
  %hi20 = load i64, ptr %47, align 8
  %48 = getelementptr inbounds %variant, ptr %i15, i32 0, i32 0
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue %variant undef, ptr %49, 0
  %51 = insertvalue %variant %50, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %52 = getelementptr inbounds [1 x %variant], ptr %varargslots22, i64 0, i64 0
  store %variant %51, ptr %52, align 16
  %53 = getelementptr inbounds %"variant[]", ptr %vararg21, i32 0, i32 1
  store i64 1, ptr %53, align 8
  %54 = getelementptr inbounds %"variant[]", ptr %vararg21, i32 0, i32 0
  store ptr %varargslots22, ptr %54, align 8
  %55 = getelementptr inbounds { ptr, i64 }, ptr %vararg21, i32 0, i32 0
  %lo23 = load ptr, ptr %55, align 8
  %56 = getelementptr inbounds { ptr, i64 }, ptr %vararg21, i32 0, i32 1
  %hi24 = load i64, ptr %56, align 8
  %57 = call i64 @std_io_printfln(ptr %retparam17, ptr %lo19, i64 %hi20, ptr %lo23, i64 %hi24)
  %not_err25 = icmp eq i64 %57, 0
  br i1 %not_err25, label %after_check26, label %voiderr27

after_check26:                                    ; preds = %loop.body14
  br label %voiderr27

voiderr27:                                        ; preds = %after_check26, %loop.body14
  %58 = load i64, ptr %.anon11, align 8
  %add28 = add i64 %58, 1
  store i64 %add28, ptr %.anon11, align 8
  br label %loop.cond12

loop.exit29:                                      ; preds = %loop.cond12
  ret void
}
