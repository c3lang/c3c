// #target: macos-x64
module abi;

struct Vector2 {
  float x;
  float y;
}
extern fn Vector2 vector2_zero() { return Vector2 {}; }
extern fn Vector2 vector2_one() { return Vector2 {}; }
extern fn Vector2 vector2_add(Vector2 v1, Vector2 v2) { return Vector2 {}; }
extern fn Vector2 vector2_add_value(Vector2 v, float add) { return Vector2 {}; }
extern fn Vector2 vector2_subtract(Vector2 v1, Vector2 v2) { return Vector2 {}; }
extern fn Vector2 vector2_subtract_value(Vector2 v, float sub) { return Vector2 {}; }

/* #expect: abi.ll

%Vector2 = type { float, float }

define <2 x float> @vector2_zero() #0 {
entry:
  %literal = alloca %Vector2, align 4
  %tempcoerce = alloca <2 x float>, align 8
  %0 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %1, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 8, i1 false)
  %2 = load <2 x float>, ptr %tempcoerce, align 8
  ret <2 x float> %2
}

define <2 x float> @vector2_one() #0 {
entry:
  %literal = alloca %Vector2, align 4
  %tempcoerce = alloca <2 x float>, align 8
  %0 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %1, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 8, i1 false)
  %2 = load <2 x float>, ptr %tempcoerce, align 8
  ret <2 x float> %2
}

define <2 x float> @vector2_add(<2 x float> %0, <2 x float> %1) #0 {
entry:
  %v1 = alloca %Vector2, align 4
  %v2 = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %tempcoerce = alloca <2 x float>, align 8
  store <2 x float> %0, ptr %v1, align 4
  store <2 x float> %1, ptr %v2, align 4
  %2 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %2, align 4
  %3 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %3, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 8, i1 false)
  %4 = load <2 x float>, ptr %tempcoerce, align 8
  ret <2 x float> %4
}

define <2 x float> @vector2_add_value(<2 x float> %0, float %1) #0 {
entry:
  %v = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %tempcoerce = alloca <2 x float>, align 8
  store <2 x float> %0, ptr %v, align 4
  %2 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %2, align 4
  %3 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %3, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 8, i1 false)
  %4 = load <2 x float>, ptr %tempcoerce, align 8
  ret <2 x float> %4
}

define <2 x float> @vector2_subtract(<2 x float> %0, <2 x float> %1) #0 {
entry:
  %v1 = alloca %Vector2, align 4
  %v2 = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %tempcoerce = alloca <2 x float>, align 8
  store <2 x float> %0, ptr %v1, align 4
  store <2 x float> %1, ptr %v2, align 4
  %2 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %2, align 4
  %3 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %3, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 8, i1 false)
  %4 = load <2 x float>, ptr %tempcoerce, align 8
  ret <2 x float> %4
}

define <2 x float> @vector2_subtract_value(<2 x float> %0, float %1) #0 {
entry:
  %v = alloca %Vector2, align 4
  %literal = alloca %Vector2, align 4
  %tempcoerce = alloca <2 x float>, align 8
  store <2 x float> %0, ptr %v, align 4
  %2 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %2, align 4
  %3 = getelementptr inbounds %Vector2, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %3, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 8, i1 false)
  %4 = load <2 x float>, ptr %tempcoerce, align 8
  ret <2 x float> %4
}
