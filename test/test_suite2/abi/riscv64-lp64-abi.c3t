// #target: linux-riscv64
module test;

struct Large {
  long a, b, c, d;
}

define V32i8 = char[<32>];

fn int f_scalar_stack_1(int a, int128 b, float c, float128 d, V32i8 e,
                     char f, char g, char h) {
  return g + h;
}

fn Large f_scalar_stack_2(double a, int128 b, float128 c, V32i8 d,
                              char e, ichar f, char g) {
  return Large {(long)(a), e, f, g};
}

/* #expect: test.ll

define signext i32 @test_f_scalar_stack_1(i32 signext %0, i128 %1, float %2, fp128 %3, ptr align 32 %4, i8 zeroext %5, i8 %6, i8 %7) #0 {
entry:
  %uisiext = zext i8 %6 to i32
  %uisiext1 = zext i8 %7 to i32
  %add = add i32 %uisiext, %uisiext1
  ret i32 %add
}

define void @test_f_scalar_stack_2(ptr noalias sret(%Large) align 8 %0, double %1, i128 %2, fp128 %3, ptr align 32 %4, i8 zeroext %5, i8 %6, i8 %7) #0 {
entry:
  %literal = alloca %Large, align 8
  %8 = getelementptr inbounds %Large, ptr %literal, i32 0, i32 0
  %fpsi = fptosi double %1 to i64
  store i64 %fpsi, ptr %8, align 8
  %9 = getelementptr inbounds %Large, ptr %literal, i32 0, i32 1
  %uisiext = zext i8 %5 to i64
  store i64 %uisiext, ptr %9, align 8
  %10 = getelementptr inbounds %Large, ptr %literal, i32 0, i32 2
  %sisiext = sext i8 %6 to i64
  store i64 %sisiext, ptr %10, align 8
  %11 = getelementptr inbounds %Large, ptr %literal, i32 0, i32 3
  %uisiext1 = zext i8 %7 to i64
  store i64 %uisiext1, ptr %11, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 32, i1 false)
  ret void
}
