// #target: macos-x64

module test;

extern fn void printf(char*, ...);

fn void main()
{
    test();
    test2();
    test3();
}

fn void test()
{
    int f = 3;
    int* x = &(((f)));
    int* h = &&(f++);
    printf("x = %d (4), h = %d (3)\n", *x, *h);
}


const int XX = 314;
fn void test2()
{
    int* w = &XX;
    printf("w = %d (314)\n", *w);
}

struct Foo
{
    int x;
    int y;
}
fn void test3()
{
    Foo h = { 345, 555 };
    int* zx = &h.x;
    int* zy = &h.y;
    int[3] arr = { 333, 444, 999 };
    printf("zx = %d (345) zy = %d (555)\n", *zx, *zy);
    arr[0]--;
    arr[1]--;
    arr[2]--;
    int* d = &arr[2];
    int[]* e = &&arr[1..2];
    printf("d = %d (998) e = %d (443)\n", *d, (*e)[0]);
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  call void @test_test()
  call void @test_test2()
  call void @test_test3()
  ret void
}

; Function Attrs: nounwind
define void @test_test() #0 {
entry:
  %f = alloca i32, align 4
  %x = alloca ptr, align 8
  %h = alloca ptr, align 8
  %taddr = alloca i32, align 4
  store i32 3, ptr %f, align 4
  store ptr %f, ptr %x, align 8
  %0 = load i32, ptr %f, align 4
  %add = add i32 %0, 1
  store i32 %add, ptr %f, align 4
  store i32 %0, ptr %taddr, align 4
  store ptr %taddr, ptr %h, align 8
  %1 = load ptr, ptr %x, align 8
  %2 = load i32, ptr %1, align 8
  %3 = load ptr, ptr %h, align 8
  %4 = load i32, ptr %3, align 8
  call void (ptr, ...) @printf(ptr @.str, i32 %2, i32 %4)
  ret void
}

; Function Attrs: nounwind
define void @test_test2() #0 {
entry:
  %w = alloca ptr, align 8
  store ptr @test_XX, ptr %w, align 8
  %0 = load ptr, ptr %w, align 8
  %1 = load i32, ptr %0, align 8
  call void (ptr, ...) @printf(ptr @.str.1, i32 %1)
  ret void
}

; Function Attrs: nounwind
define void @test_test3() #0 {
entry:
  %h = alloca %Foo, align 4
  %zx = alloca ptr, align 8
  %zy = alloca ptr, align 8
  %arr = alloca [3 x i32], align 4
  %d = alloca ptr, align 8
  %e = alloca ptr, align 8
  %taddr = alloca %"int[]", align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %h, ptr align 4 @.__const, i32 8, i1 false)
  %0 = getelementptr inbounds %Foo, ptr %h, i32 0, i32 0
  store ptr %0, ptr %zx, align 8
  %1 = getelementptr inbounds %Foo, ptr %h, i32 0, i32 1
  store ptr %1, ptr %zy, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %arr, ptr align 4 @.__const.2, i32 12, i1 false)
  %2 = load ptr, ptr %zx, align 8
  %3 = load i32, ptr %2, align 8
  %4 = load ptr, ptr %zy, align 8
  %5 = load i32, ptr %4, align 8
  call void (ptr, ...) @printf(ptr @.str.3, i32 %3, i32 %5)
  %6 = getelementptr inbounds [3 x i32], ptr %arr, i64 0, i64 0
  %7 = load i32, ptr %6, align 4
  %sub = sub i32 %7, 1
  store i32 %sub, ptr %6, align 4
  %8 = getelementptr inbounds [3 x i32], ptr %arr, i64 0, i64 1
  %9 = load i32, ptr %8, align 4
  %sub1 = sub i32 %9, 1
  store i32 %sub1, ptr %8, align 4
  %10 = getelementptr inbounds [3 x i32], ptr %arr, i64 0, i64 2
  %11 = load i32, ptr %10, align 4
  %sub2 = sub i32 %11, 1
  store i32 %sub2, ptr %10, align 4
  %12 = getelementptr inbounds [3 x i32], ptr %arr, i64 0, i64 2
  store ptr %12, ptr %d, align 8
  %13 = getelementptr inbounds [3 x i32], ptr %arr, i64 0, i64 1
  %14 = insertvalue %"int[]" undef, ptr %13, 0
  %15 = insertvalue %"int[]" %14, i64 2, 1
  store %"int[]" %15, ptr %taddr, align 8
  store ptr %taddr, ptr %e, align 8
  %16 = load ptr, ptr %d, align 8
  %17 = load i32, ptr %16, align 8
  %18 = load ptr, ptr %e, align 8
  %19 = getelementptr inbounds %"int[]", ptr %18, i32 0, i32 0
  %20 = load ptr, ptr %19, align 8
  %ptroffset = getelementptr inbounds i32, ptr %20, i64 0
  %21 = load i32, ptr %ptroffset, align 4
  call void (ptr, ...) @printf(ptr @.str.4, i32 %17, i32 %21)
  ret void
}