// #target: macos-x64
module test;
import std::io;

fn void main()
{
	int[<*>] z = { 1, 2, 3, 4, 5, 6, 7 };
	int[<6>] y;
	y[1..3] = z[3..5];
	io::printfln("%s %s", y, z);
	y[4..] = z[5..6];
	io::printfln("%s %s", y, z);
	int[][] a = { int[] { 1 } };
	int[][] b = { int[] { 2 } };
	io::printfln("%s", a);
	a[0..0] = b[0..0];
	io::printfln("%s", a);
	a[0..0] = y[2..4];
	io::printfln("%s", a);
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %z = alloca <7 x i32>, align 32
  %y = alloca <6 x i32>, align 32
  %taddr = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr1 = alloca %"int[]", align 8
  %retparam2 = alloca i64, align 8
  %varargslots3 = alloca [2 x %variant], align 16
  %a = alloca %"int[][]", align 8
  %literal = alloca [1 x %"int[]"], align 16
  %literal7 = alloca [1 x i32], align 4
  %b = alloca %"int[][]", align 8
  %literal8 = alloca [1 x %"int[]"], align 16
  %literal9 = alloca [1 x i32], align 4
  %retparam10 = alloca i64, align 8
  %varargslots11 = alloca [1 x %variant], align 16
  %taddr16 = alloca %"int[][]", align 8
  %retparam17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %variant], align 16
  %retparam23 = alloca i64, align 8
  %varargslots24 = alloca [1 x %variant], align 16
  store <7 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, ptr %z, align 32
  store <6 x i32> zeroinitializer, ptr %y, align 32
  %0 = getelementptr inbounds <7 x i32>, ptr %z, i64 0, i64 3
  %1 = insertvalue %"int[]" undef, ptr %0, 0
  %2 = insertvalue %"int[]" %1, i64 3, 1
  %3 = getelementptr inbounds <6 x i32>, ptr %y, i64 0, i64 1
  %4 = insertvalue %"int[]" undef, ptr %3, 0
  %5 = insertvalue %"int[]" %4, i64 3, 1
  %6 = extractvalue %"int[]" %5, 0
  %7 = extractvalue %"int[]" %2, 0
  store %"int[]" %2, ptr %taddr, align 8
  %8 = getelementptr inbounds %"int[]", ptr %taddr, i32 0, i32 1
  %9 = load i64, ptr %8, align 8
  %10 = mul i64 %9, 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %7, i64 %10, i1 false)
  %11 = insertvalue %variant undef, ptr %y, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$v6$int" to i64), 1
  %13 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = insertvalue %variant undef, ptr %z, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (ptr @"ct$v7$int" to i64), 1
  %16 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 1
  store %variant %15, ptr %16, align 16
  %17 = call i64 @std_io_printfln(ptr %retparam, ptr @.str, i64 5, ptr %varargslots, i64 2)
  %not_err = icmp eq i64 %17, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %18 = getelementptr inbounds <7 x i32>, ptr %z, i64 0, i64 5
  %19 = insertvalue %"int[]" undef, ptr %18, 0
  %20 = insertvalue %"int[]" %19, i64 2, 1
  %21 = getelementptr inbounds <6 x i32>, ptr %y, i64 0, i64 4
  %22 = insertvalue %"int[]" undef, ptr %21, 0
  %23 = insertvalue %"int[]" %22, i64 2, 1
  %24 = extractvalue %"int[]" %23, 0
  %25 = extractvalue %"int[]" %20, 0
  store %"int[]" %20, ptr %taddr1, align 8
  %26 = getelementptr inbounds %"int[]", ptr %taddr1, i32 0, i32 1
  %27 = load i64, ptr %26, align 8
  %28 = mul i64 %27, 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %24, ptr align 4 %25, i64 %28, i1 false)
  %29 = insertvalue %variant undef, ptr %y, 0
  %30 = insertvalue %variant %29, i64 ptrtoint (ptr @"ct$v6$int" to i64), 1
  %31 = getelementptr inbounds [2 x %variant], ptr %varargslots3, i64 0, i64 0
  store %variant %30, ptr %31, align 16
  %32 = insertvalue %variant undef, ptr %z, 0
  %33 = insertvalue %variant %32, i64 ptrtoint (ptr @"ct$v7$int" to i64), 1
  %34 = getelementptr inbounds [2 x %variant], ptr %varargslots3, i64 0, i64 1
  store %variant %33, ptr %34, align 16
  %35 = call i64 @std_io_printfln(ptr %retparam2, ptr @.str.1, i64 5, ptr %varargslots3, i64 2)
  %not_err4 = icmp eq i64 %35, 0
  br i1 %not_err4, label %after_check5, label %voiderr6

after_check5:                                     ; preds = %voiderr
  br label %voiderr6

voiderr6:                                         ; preds = %after_check5, %voiderr
  %36 = getelementptr inbounds [1 x %"int[]"], ptr %literal, i64 0, i64 0
  %37 = getelementptr inbounds [1 x i32], ptr %literal7, i64 0, i64 0
  store i32 1, ptr %37, align 4
  %38 = insertvalue %"int[]" undef, ptr %literal7, 0
  %39 = insertvalue %"int[]" %38, i64 1, 1
  store %"int[]" %39, ptr %36, align 8
  %40 = insertvalue %"int[][]" undef, ptr %literal, 0
  %41 = insertvalue %"int[][]" %40, i64 1, 1
  store %"int[][]" %41, ptr %a, align 8
  %42 = getelementptr inbounds [1 x %"int[]"], ptr %literal8, i64 0, i64 0
  %43 = getelementptr inbounds [1 x i32], ptr %literal9, i64 0, i64 0
  store i32 2, ptr %43, align 4
  %44 = insertvalue %"int[]" undef, ptr %literal9, 0
  %45 = insertvalue %"int[]" %44, i64 1, 1
  store %"int[]" %45, ptr %42, align 8
  %46 = insertvalue %"int[][]" undef, ptr %literal8, 0
  %47 = insertvalue %"int[][]" %46, i64 1, 1
  store %"int[][]" %47, ptr %b, align 8
  %48 = insertvalue %variant undef, ptr %a, 0
  %49 = insertvalue %variant %48, i64 ptrtoint (ptr @"ct$sa$sa$int" to i64), 1
  %50 = getelementptr inbounds [1 x %variant], ptr %varargslots11, i64 0, i64 0
  store %variant %49, ptr %50, align 16
  %51 = call i64 @std_io_printfln(ptr %retparam10, ptr @.str.2, i64 2, ptr %varargslots11, i64 1)
  %not_err12 = icmp eq i64 %51, 0
  br i1 %not_err12, label %after_check13, label %voiderr14

after_check13:                                    ; preds = %voiderr6
  br label %voiderr14

voiderr14:                                        ; preds = %after_check13, %voiderr6
  %52 = load %"int[][]", ptr %b, align 8
  %53 = extractvalue %"int[][]" %52, 0
  %ptroffset = getelementptr inbounds %"int[]", ptr %53, i64 0
  %54 = insertvalue %"int[][]" undef, ptr %ptroffset, 0
  %55 = insertvalue %"int[][]" %54, i64 1, 1
  %56 = load %"int[][]", ptr %a, align 8
  %57 = extractvalue %"int[][]" %56, 0
  %ptroffset15 = getelementptr inbounds %"int[]", ptr %57, i64 0
  %58 = insertvalue %"int[][]" undef, ptr %ptroffset15, 0
  %59 = insertvalue %"int[][]" %58, i64 1, 1
  %60 = extractvalue %"int[][]" %59, 0
  %61 = extractvalue %"int[][]" %55, 0
  store %"int[][]" %55, ptr %taddr16, align 8
  %62 = getelementptr inbounds %"int[][]", ptr %taddr16, i32 0, i32 1
  %63 = load i64, ptr %62, align 8
  %64 = mul i64 %63, 16
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %60, ptr align 8 %61, i64 %64, i1 false)
  %65 = insertvalue %variant undef, ptr %a, 0
  %66 = insertvalue %variant %65, i64 ptrtoint (ptr @"ct$sa$sa$int" to i64), 1
  %67 = getelementptr inbounds [1 x %variant], ptr %varargslots18, i64 0, i64 0
  store %variant %66, ptr %67, align 16
  %68 = call i64 @std_io_printfln(ptr %retparam17, ptr @.str.3, i64 2, ptr %varargslots18, i64 1)
  %not_err19 = icmp eq i64 %68, 0
  br i1 %not_err19, label %after_check20, label %voiderr21

after_check20:                                    ; preds = %voiderr14
  br label %voiderr21

voiderr21:                                        ; preds = %after_check20, %voiderr14
  %69 = getelementptr inbounds <6 x i32>, ptr %y, i64 0, i64 2
  %70 = insertvalue %"int[]" undef, ptr %69, 0
  %71 = insertvalue %"int[]" %70, i64 3, 1
  %72 = load %"int[][]", ptr %a, align 8
  %73 = extractvalue %"int[][]" %72, 0
  %ptroffset22 = getelementptr inbounds %"int[]", ptr %73, i64 0
  store %"int[]" %71, ptr %ptroffset22, align 8
  %74 = insertvalue %variant undef, ptr %a, 0
  %75 = insertvalue %variant %74, i64 ptrtoint (ptr @"ct$sa$sa$int" to i64), 1
  %76 = getelementptr inbounds [1 x %variant], ptr %varargslots24, i64 0, i64 0
  store %variant %75, ptr %76, align 16
  %77 = call i64 @std_io_printfln(ptr %retparam23, ptr @.str.4, i64 2, ptr %varargslots24, i64 1)
  %not_err25 = icmp eq i64 %77, 0
  br i1 %not_err25, label %after_check26, label %voiderr27

after_check26:                                    ; preds = %voiderr21
  br label %voiderr27

voiderr27:                                        ; preds = %after_check26, %voiderr21
  ret void
}
