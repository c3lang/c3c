// #target: macos-x64
module test;
import std::io;
define Func = fn int(int y);
define FuncOther = fn bool(char*);
define FuncSame = fn int(int z = 444);

fn int test(int a) { return a; }
fn int test2(int b = 3) { return b; }

fn int! test3(int b = 3) { return b; }
fn int! test4(int b = 3) { return b; }

fn void main()
{
	Func a = &test;
	Func b = &test2;
	io::printfln("%d", a(.y = 123));
	io::printfln("%d", (&test2)());
	FuncSame z = &test2;
	io::printfln("%d", z());
	io::printfln("%s", $typeof(b ? &test2 : &test).qnameof);
	io::printfln("%s", $typeof(b ? &test2 : &test).nameof);
	io::printfln("%s", $typeof(&test2).qnameof);
	io::printfln("%s", $typeof(&test2).nameof);
	io::printfln("%s", $typeof(b ? &test4 : &test3).nameof);

	$typeof(b ? &test2 : &test) y = &test2;
	typeid zfoke = $typeof(y).typeid;
}

/* #expect: test.ll

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$a12$char" = linkonce constant %.introspect { i8 15, i64 12, i64 ptrtoint (ptr @"ct$char" to i64), i64 12, [0 x i64] zeroinitializer }, align 8
@"ct$p$a12$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$a12$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"test::test2*\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"test2*\00", align 1
@"ct$a6$char" = linkonce constant %.introspect { i8 15, i64 6, i64 ptrtoint (ptr @"ct$char" to i64), i64 6, [0 x i64] zeroinitializer }, align 8
@"ct$p$a6$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$a6$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"fn int!(int)*\00", align 1
@"ct$a13$char" = linkonce constant %.introspect { i8 15, i64 13, i64 ptrtoint (ptr @"ct$char" to i64), i64 13, [0 x i64] zeroinitializer }, align 8
@"ct$p$a13$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$a13$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$fn$int$int$" = linkonce constant %.introspect { i8 13, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$p$fn$int$int$" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$fn$int$int$" to i64), i64 0, [0 x i64] zeroinitializer }, align 8

define void @test_main() #0 {
entry:
  %a = alloca ptr, align 8
  %b = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr1 = alloca i32, align 4
  %retparam4 = alloca i64, align 8
  %taddr5 = alloca %"char[]", align 8
  %vararg8 = alloca %"variant[]", align 8
  %varargslots9 = alloca [1 x %variant], align 16
  %taddr10 = alloca i32, align 4
  %z = alloca ptr, align 8
  %retparam16 = alloca i64, align 8
  %taddr17 = alloca %"char[]", align 8
  %vararg20 = alloca %"variant[]", align 8
  %varargslots21 = alloca [1 x %variant], align 16
  %taddr22 = alloca i32, align 4
  %retparam28 = alloca i64, align 8
  %taddr29 = alloca %"char[]", align 8
  %vararg32 = alloca %"variant[]", align 8
  %varargslots33 = alloca [1 x %variant], align 16
  %taddr34 = alloca ptr, align 8
  %retparam40 = alloca i64, align 8
  %taddr41 = alloca %"char[]", align 8
  %vararg44 = alloca %"variant[]", align 8
  %varargslots45 = alloca [1 x %variant], align 16
  %taddr46 = alloca ptr, align 8
  %retparam52 = alloca i64, align 8
  %taddr53 = alloca %"char[]", align 8
  %vararg56 = alloca %"variant[]", align 8
  %varargslots57 = alloca [1 x %variant], align 16
  %taddr58 = alloca ptr, align 8
  %retparam64 = alloca i64, align 8
  %taddr65 = alloca %"char[]", align 8
  %vararg68 = alloca %"variant[]", align 8
  %varargslots69 = alloca [1 x %variant], align 16
  %taddr70 = alloca ptr, align 8
  %retparam76 = alloca i64, align 8
  %taddr77 = alloca %"char[]", align 8
  %vararg80 = alloca %"variant[]", align 8
  %varargslots81 = alloca [1 x %variant], align 16
  %taddr82 = alloca ptr, align 8
  %y = alloca ptr, align 8
  %zfoke = alloca i64, align 8
  store ptr @test_test, ptr %a, align 8
  store ptr @test_test2, ptr %b, align 8
  store %"char[]" { ptr @.str, i64 2 }, ptr %taddr, align 8
  %0 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %0, align 8
  %1 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %1, align 8
  %2 = load ptr, ptr %a, align 8
  %3 = call i32 %2(i32 123)
  store i32 %3, ptr %taddr1, align 4
  %4 = insertvalue %variant undef, ptr %taddr1, 0
  %5 = insertvalue %variant %4, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %6 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %5, ptr %6, align 16
  %7 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 1
  store i64 1, ptr %7, align 8
  %8 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 0
  store ptr %varargslots, ptr %8, align 8
  %9 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 0
  %lo2 = load ptr, ptr %9, align 8
  %10 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 1
  %hi3 = load i64, ptr %10, align 8
  %11 = call i64 @std_io_printfln(ptr %retparam, ptr %lo, i64 %hi, ptr %lo2, i64 %hi3)
  %not_err = icmp eq i64 %11, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  store %"char[]" { ptr @.str.1, i64 2 }, ptr %taddr5, align 8
  %12 = getelementptr inbounds { ptr, i64 }, ptr %taddr5, i32 0, i32 0
  %lo6 = load ptr, ptr %12, align 8
  %13 = getelementptr inbounds { ptr, i64 }, ptr %taddr5, i32 0, i32 1
  %hi7 = load i64, ptr %13, align 8
  %14 = call i32 @test_test2(i32 3)
  store i32 %14, ptr %taddr10, align 4
  %15 = insertvalue %variant undef, ptr %taddr10, 0
  %16 = insertvalue %variant %15, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %17 = getelementptr inbounds [1 x %variant], ptr %varargslots9, i64 0, i64 0
  store %variant %16, ptr %17, align 16
  %18 = getelementptr inbounds %"variant[]", ptr %vararg8, i32 0, i32 1
  store i64 1, ptr %18, align 8
  %19 = getelementptr inbounds %"variant[]", ptr %vararg8, i32 0, i32 0
  store ptr %varargslots9, ptr %19, align 8
  %20 = getelementptr inbounds { ptr, i64 }, ptr %vararg8, i32 0, i32 0
  %lo11 = load ptr, ptr %20, align 8
  %21 = getelementptr inbounds { ptr, i64 }, ptr %vararg8, i32 0, i32 1
  %hi12 = load i64, ptr %21, align 8
  %22 = call i64 @std_io_printfln(ptr %retparam4, ptr %lo6, i64 %hi7, ptr %lo11, i64 %hi12)
  %not_err13 = icmp eq i64 %22, 0
  br i1 %not_err13, label %after_check14, label %voiderr15

after_check14:                                    ; preds = %voiderr
  br label %voiderr15

voiderr15:                                        ; preds = %after_check14, %voiderr
  store ptr @test_test2, ptr %z, align 8
  store %"char[]" { ptr @.str.2, i64 2 }, ptr %taddr17, align 8
  %23 = getelementptr inbounds { ptr, i64 }, ptr %taddr17, i32 0, i32 0
  %lo18 = load ptr, ptr %23, align 8
  %24 = getelementptr inbounds { ptr, i64 }, ptr %taddr17, i32 0, i32 1
  %hi19 = load i64, ptr %24, align 8
  %25 = load ptr, ptr %z, align 8
  %26 = call i32 %25(i32 444)
  store i32 %26, ptr %taddr22, align 4
  %27 = insertvalue %variant undef, ptr %taddr22, 0
  %28 = insertvalue %variant %27, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %29 = getelementptr inbounds [1 x %variant], ptr %varargslots21, i64 0, i64 0
  store %variant %28, ptr %29, align 16
  %30 = getelementptr inbounds %"variant[]", ptr %vararg20, i32 0, i32 1
  store i64 1, ptr %30, align 8
  %31 = getelementptr inbounds %"variant[]", ptr %vararg20, i32 0, i32 0
  store ptr %varargslots21, ptr %31, align 8
  %32 = getelementptr inbounds { ptr, i64 }, ptr %vararg20, i32 0, i32 0
  %lo23 = load ptr, ptr %32, align 8
  %33 = getelementptr inbounds { ptr, i64 }, ptr %vararg20, i32 0, i32 1
  %hi24 = load i64, ptr %33, align 8
  %34 = call i64 @std_io_printfln(ptr %retparam16, ptr %lo18, i64 %hi19, ptr %lo23, i64 %hi24)
  %not_err25 = icmp eq i64 %34, 0
  br i1 %not_err25, label %after_check26, label %voiderr27

after_check26:                                    ; preds = %voiderr15
  br label %voiderr27

voiderr27:                                        ; preds = %after_check26, %voiderr15
  store %"char[]" { ptr @.str.3, i64 2 }, ptr %taddr29, align 8
  %35 = getelementptr inbounds { ptr, i64 }, ptr %taddr29, i32 0, i32 0
  %lo30 = load ptr, ptr %35, align 8
  %36 = getelementptr inbounds { ptr, i64 }, ptr %taddr29, i32 0, i32 1
  %hi31 = load i64, ptr %36, align 8
  store ptr @.str.4, ptr %taddr34, align 8
  %37 = insertvalue %variant undef, ptr %taddr34, 0
  %38 = insertvalue %variant %37, i64 ptrtoint (ptr @"ct$p$a12$char" to i64), 1
  %39 = getelementptr inbounds [1 x %variant], ptr %varargslots33, i64 0, i64 0
  store %variant %38, ptr %39, align 16
  %40 = getelementptr inbounds %"variant[]", ptr %vararg32, i32 0, i32 1
  store i64 1, ptr %40, align 8
  %41 = getelementptr inbounds %"variant[]", ptr %vararg32, i32 0, i32 0
  store ptr %varargslots33, ptr %41, align 8
  %42 = getelementptr inbounds { ptr, i64 }, ptr %vararg32, i32 0, i32 0
  %lo35 = load ptr, ptr %42, align 8
  %43 = getelementptr inbounds { ptr, i64 }, ptr %vararg32, i32 0, i32 1
  %hi36 = load i64, ptr %43, align 8
  %44 = call i64 @std_io_printfln(ptr %retparam28, ptr %lo30, i64 %hi31, ptr %lo35, i64 %hi36)
  %not_err37 = icmp eq i64 %44, 0
  br i1 %not_err37, label %after_check38, label %voiderr39

after_check38:                                    ; preds = %voiderr27
  br label %voiderr39

voiderr39:                                        ; preds = %after_check38, %voiderr27
  store %"char[]" { ptr @.str.5, i64 2 }, ptr %taddr41, align 8
  %45 = getelementptr inbounds { ptr, i64 }, ptr %taddr41, i32 0, i32 0
  %lo42 = load ptr, ptr %45, align 8
  %46 = getelementptr inbounds { ptr, i64 }, ptr %taddr41, i32 0, i32 1
  %hi43 = load i64, ptr %46, align 8
  store ptr @.str.6, ptr %taddr46, align 8
  %47 = insertvalue %variant undef, ptr %taddr46, 0
  %48 = insertvalue %variant %47, i64 ptrtoint (ptr @"ct$p$a12$char" to i64), 1
  %49 = getelementptr inbounds [1 x %variant], ptr %varargslots45, i64 0, i64 0
  store %variant %48, ptr %49, align 16
  %50 = getelementptr inbounds %"variant[]", ptr %vararg44, i32 0, i32 1
  store i64 1, ptr %50, align 8
  %51 = getelementptr inbounds %"variant[]", ptr %vararg44, i32 0, i32 0
  store ptr %varargslots45, ptr %51, align 8
  %52 = getelementptr inbounds { ptr, i64 }, ptr %vararg44, i32 0, i32 0
  %lo47 = load ptr, ptr %52, align 8
  %53 = getelementptr inbounds { ptr, i64 }, ptr %vararg44, i32 0, i32 1
  %hi48 = load i64, ptr %53, align 8
  %54 = call i64 @std_io_printfln(ptr %retparam40, ptr %lo42, i64 %hi43, ptr %lo47, i64 %hi48)
  %not_err49 = icmp eq i64 %54, 0
  br i1 %not_err49, label %after_check50, label %voiderr51

after_check50:                                    ; preds = %voiderr39
  br label %voiderr51

voiderr51:                                        ; preds = %after_check50, %voiderr39
  store %"char[]" { ptr @.str.7, i64 2 }, ptr %taddr53, align 8
  %55 = getelementptr inbounds { ptr, i64 }, ptr %taddr53, i32 0, i32 0
  %lo54 = load ptr, ptr %55, align 8
  %56 = getelementptr inbounds { ptr, i64 }, ptr %taddr53, i32 0, i32 1
  %hi55 = load i64, ptr %56, align 8
  store ptr @.str.8, ptr %taddr58, align 8
  %57 = insertvalue %variant undef, ptr %taddr58, 0
  %58 = insertvalue %variant %57, i64 ptrtoint (ptr @"ct$p$a12$char" to i64), 1
  %59 = getelementptr inbounds [1 x %variant], ptr %varargslots57, i64 0, i64 0
  store %variant %58, ptr %59, align 16
  %60 = getelementptr inbounds %"variant[]", ptr %vararg56, i32 0, i32 1
  store i64 1, ptr %60, align 8
  %61 = getelementptr inbounds %"variant[]", ptr %vararg56, i32 0, i32 0
  store ptr %varargslots57, ptr %61, align 8
  %62 = getelementptr inbounds { ptr, i64 }, ptr %vararg56, i32 0, i32 0
  %lo59 = load ptr, ptr %62, align 8
  %63 = getelementptr inbounds { ptr, i64 }, ptr %vararg56, i32 0, i32 1
  %hi60 = load i64, ptr %63, align 8
  %64 = call i64 @std_io_printfln(ptr %retparam52, ptr %lo54, i64 %hi55, ptr %lo59, i64 %hi60)
  %not_err61 = icmp eq i64 %64, 0
  br i1 %not_err61, label %after_check62, label %voiderr63

after_check62:                                    ; preds = %voiderr51
  br label %voiderr63

voiderr63:                                        ; preds = %after_check62, %voiderr51
  store %"char[]" { ptr @.str.9, i64 2 }, ptr %taddr65, align 8
  %65 = getelementptr inbounds { ptr, i64 }, ptr %taddr65, i32 0, i32 0
  %lo66 = load ptr, ptr %65, align 8
  %66 = getelementptr inbounds { ptr, i64 }, ptr %taddr65, i32 0, i32 1
  %hi67 = load i64, ptr %66, align 8
  store ptr @.str.10, ptr %taddr70, align 8
  %67 = insertvalue %variant undef, ptr %taddr70, 0
  %68 = insertvalue %variant %67, i64 ptrtoint (ptr @"ct$p$a6$char" to i64), 1
  %69 = getelementptr inbounds [1 x %variant], ptr %varargslots69, i64 0, i64 0
  store %variant %68, ptr %69, align 16
  %70 = getelementptr inbounds %"variant[]", ptr %vararg68, i32 0, i32 1
  store i64 1, ptr %70, align 8
  %71 = getelementptr inbounds %"variant[]", ptr %vararg68, i32 0, i32 0
  store ptr %varargslots69, ptr %71, align 8
  %72 = getelementptr inbounds { ptr, i64 }, ptr %vararg68, i32 0, i32 0
  %lo71 = load ptr, ptr %72, align 8
  %73 = getelementptr inbounds { ptr, i64 }, ptr %vararg68, i32 0, i32 1
  %hi72 = load i64, ptr %73, align 8
  %74 = call i64 @std_io_printfln(ptr %retparam64, ptr %lo66, i64 %hi67, ptr %lo71, i64 %hi72)
  %not_err73 = icmp eq i64 %74, 0
  br i1 %not_err73, label %after_check74, label %voiderr75

after_check74:                                    ; preds = %voiderr63
  br label %voiderr75

voiderr75:                                        ; preds = %after_check74, %voiderr63
  store %"char[]" { ptr @.str.11, i64 2 }, ptr %taddr77, align 8
  %75 = getelementptr inbounds { ptr, i64 }, ptr %taddr77, i32 0, i32 0
  %lo78 = load ptr, ptr %75, align 8
  %76 = getelementptr inbounds { ptr, i64 }, ptr %taddr77, i32 0, i32 1
  %hi79 = load i64, ptr %76, align 8
  store ptr @.str.12, ptr %taddr82, align 8
  %77 = insertvalue %variant undef, ptr %taddr82, 0
  %78 = insertvalue %variant %77, i64 ptrtoint (ptr @"ct$p$a13$char" to i64), 1
  %79 = getelementptr inbounds [1 x %variant], ptr %varargslots81, i64 0, i64 0
  store %variant %78, ptr %79, align 16
  %80 = getelementptr inbounds %"variant[]", ptr %vararg80, i32 0, i32 1
  store i64 1, ptr %80, align 8
  %81 = getelementptr inbounds %"variant[]", ptr %vararg80, i32 0, i32 0
  store ptr %varargslots81, ptr %81, align 8
  %82 = getelementptr inbounds { ptr, i64 }, ptr %vararg80, i32 0, i32 0
  %lo83 = load ptr, ptr %82, align 8
  %83 = getelementptr inbounds { ptr, i64 }, ptr %vararg80, i32 0, i32 1
  %hi84 = load i64, ptr %83, align 8
  %84 = call i64 @std_io_printfln(ptr %retparam76, ptr %lo78, i64 %hi79, ptr %lo83, i64 %hi84)
  %not_err85 = icmp eq i64 %84, 0
  br i1 %not_err85, label %after_check86, label %voiderr87

after_check86:                                    ; preds = %voiderr75
  br label %voiderr87

voiderr87:                                        ; preds = %after_check86, %voiderr75
  store ptr @test_test2, ptr %y, align 8
  store i64 ptrtoint (ptr @"ct$p$fn$int$int$" to i64), ptr %zfoke, align 8
  ret void
}
