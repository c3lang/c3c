// #target: macos-x64
module test;
import std::io;
define Func = fn int(int y);
define FuncOther = fn bool(char*);
define FuncSame = fn int(int z = 444);

fn int test(int a) { return a; }
fn int test2(int b = 3) { return b; }

fn int! test3(int b = 3) { return b; }
fn int! test4(int b = 3) { return b; }

fn void main()
{
	Func a = &test;
	Func b = &test2;
	io::printfln("%d", a(.y = 123));
	io::printfln("%d", (&test2)());
	FuncSame z = &test2;
	io::printfln("%d", z());
	io::printfln("%s", $typeof(b ? &test2 : &test).qnameof);
	io::printfln("%s", $typeof(b ? &test2 : &test).nameof);
	io::printfln("%s", $typeof(&test2).qnameof);
	io::printfln("%s", $typeof(&test2).nameof);
	io::printfln("%s", $typeof(b ? &test4 : &test3).nameof);

	$typeof(b ? &test2 : &test) y = &test2;
	typeid zfoke = $typeof(y).typeid;
}

/* #expect: test.ll

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$a12$char" = linkonce constant %.introspect { i8 15, i64 12, i64 ptrtoint (ptr @"ct$char" to i64), i64 12, [0 x i64] zeroinitializer }, align 8
@"ct$p$a12$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$a12$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"test::test2*\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"test2*\00", align 1
@"ct$a6$char" = linkonce constant %.introspect { i8 15, i64 6, i64 ptrtoint (ptr @"ct$char" to i64), i64 6, [0 x i64] zeroinitializer }, align 8
@"ct$p$a6$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$a6$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"fn int!(int)*\00", align 1
@"ct$a13$char" = linkonce constant %.introspect { i8 15, i64 13, i64 ptrtoint (ptr @"ct$char" to i64), i64 13, [0 x i64] zeroinitializer }, align 8
@"ct$p$a13$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$a13$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$fn$int$int$" = linkonce constant %.introspect { i8 13, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$p$fn$int$int$" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (ptr @"ct$fn$int$int$" to i64), i64 0, [0 x i64] zeroinitializer }, align 8

define void @test_main() #0 {
entry:
  %a = alloca ptr, align 8
  %b = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %taddr3 = alloca i32, align 4
  %z = alloca ptr, align 8
  %retparam7 = alloca i64, align 8
  %varargslots8 = alloca [1 x %variant], align 16
  %taddr9 = alloca i32, align 4
  %retparam13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %variant], align 16
  %taddr15 = alloca ptr, align 8
  %retparam19 = alloca i64, align 8
  %varargslots20 = alloca [1 x %variant], align 16
  %taddr21 = alloca ptr, align 8
  %retparam25 = alloca i64, align 8
  %varargslots26 = alloca [1 x %variant], align 16
  %taddr27 = alloca ptr, align 8
  %retparam31 = alloca i64, align 8
  %varargslots32 = alloca [1 x %variant], align 16
  %taddr33 = alloca ptr, align 8
  %retparam37 = alloca i64, align 8
  %varargslots38 = alloca [1 x %variant], align 16
  %taddr39 = alloca ptr, align 8
  %y = alloca ptr, align 8
  %zfoke = alloca i64, align 8
  store ptr @test_test, ptr %a, align 8
  store ptr @test_test2, ptr %b, align 8
  %0 = load ptr, ptr %a, align 8
  %1 = call i32 %0(i32 123)
  store i32 %1, ptr %taddr, align 4
  %2 = insertvalue %variant undef, ptr %taddr, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = call i64 @std_io_printfln(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %5, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %6 = call i32 @test_test2(i32 3)
  store i32 %6, ptr %taddr3, align 4
  %7 = insertvalue %variant undef, ptr %taddr3, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %9 = getelementptr inbounds [1 x %variant], ptr %varargslots2, i64 0, i64 0
  store %variant %8, ptr %9, align 16
  %10 = call i64 @std_io_printfln(ptr %retparam1, ptr @.str.1, i64 2, ptr %varargslots2, i64 1)
  %not_err4 = icmp eq i64 %10, 0
  br i1 %not_err4, label %after_check5, label %voiderr6

after_check5:                                     ; preds = %voiderr
  br label %voiderr6

voiderr6:                                         ; preds = %after_check5, %voiderr
  store ptr @test_test2, ptr %z, align 8
  %11 = load ptr, ptr %z, align 8
  %12 = call i32 %11(i32 444)
  store i32 %12, ptr %taddr9, align 4
  %13 = insertvalue %variant undef, ptr %taddr9, 0
  %14 = insertvalue %variant %13, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %15 = getelementptr inbounds [1 x %variant], ptr %varargslots8, i64 0, i64 0
  store %variant %14, ptr %15, align 16
  %16 = call i64 @std_io_printfln(ptr %retparam7, ptr @.str.2, i64 2, ptr %varargslots8, i64 1)
  %not_err10 = icmp eq i64 %16, 0
  br i1 %not_err10, label %after_check11, label %voiderr12

after_check11:                                    ; preds = %voiderr6
  br label %voiderr12

voiderr12:                                        ; preds = %after_check11, %voiderr6
  store ptr @.str.4, ptr %taddr15, align 8
  %17 = insertvalue %variant undef, ptr %taddr15, 0
  %18 = insertvalue %variant %17, i64 ptrtoint (ptr @"ct$p$a12$char" to i64), 1
  %19 = getelementptr inbounds [1 x %variant], ptr %varargslots14, i64 0, i64 0
  store %variant %18, ptr %19, align 16
  %20 = call i64 @std_io_printfln(ptr %retparam13, ptr @.str.3, i64 2, ptr %varargslots14, i64 1)
  %not_err16 = icmp eq i64 %20, 0
  br i1 %not_err16, label %after_check17, label %voiderr18

after_check17:                                    ; preds = %voiderr12
  br label %voiderr18

voiderr18:                                        ; preds = %after_check17, %voiderr12
  store ptr @.str.6, ptr %taddr21, align 8
  %21 = insertvalue %variant undef, ptr %taddr21, 0
  %22 = insertvalue %variant %21, i64 ptrtoint (ptr @"ct$p$a12$char" to i64), 1
  %23 = getelementptr inbounds [1 x %variant], ptr %varargslots20, i64 0, i64 0
  store %variant %22, ptr %23, align 16
  %24 = call i64 @std_io_printfln(ptr %retparam19, ptr @.str.5, i64 2, ptr %varargslots20, i64 1)
  %not_err22 = icmp eq i64 %24, 0
  br i1 %not_err22, label %after_check23, label %voiderr24

after_check23:                                    ; preds = %voiderr18
  br label %voiderr24

voiderr24:                                        ; preds = %after_check23, %voiderr18
  store ptr @.str.8, ptr %taddr27, align 8
  %25 = insertvalue %variant undef, ptr %taddr27, 0
  %26 = insertvalue %variant %25, i64 ptrtoint (ptr @"ct$p$a12$char" to i64), 1
  %27 = getelementptr inbounds [1 x %variant], ptr %varargslots26, i64 0, i64 0
  store %variant %26, ptr %27, align 16
  %28 = call i64 @std_io_printfln(ptr %retparam25, ptr @.str.7, i64 2, ptr %varargslots26, i64 1)
  %not_err28 = icmp eq i64 %28, 0
  br i1 %not_err28, label %after_check29, label %voiderr30

after_check29:                                    ; preds = %voiderr24
  br label %voiderr30

voiderr30:                                        ; preds = %after_check29, %voiderr24
  store ptr @.str.10, ptr %taddr33, align 8
  %29 = insertvalue %variant undef, ptr %taddr33, 0
  %30 = insertvalue %variant %29, i64 ptrtoint (ptr @"ct$p$a6$char" to i64), 1
  %31 = getelementptr inbounds [1 x %variant], ptr %varargslots32, i64 0, i64 0
  store %variant %30, ptr %31, align 16
  %32 = call i64 @std_io_printfln(ptr %retparam31, ptr @.str.9, i64 2, ptr %varargslots32, i64 1)
  %not_err34 = icmp eq i64 %32, 0
  br i1 %not_err34, label %after_check35, label %voiderr36

after_check35:                                    ; preds = %voiderr30
  br label %voiderr36

voiderr36:                                        ; preds = %after_check35, %voiderr30
  store ptr @.str.12, ptr %taddr39, align 8
  %33 = insertvalue %variant undef, ptr %taddr39, 0
  %34 = insertvalue %variant %33, i64 ptrtoint (ptr @"ct$p$a13$char" to i64), 1
  %35 = getelementptr inbounds [1 x %variant], ptr %varargslots38, i64 0, i64 0
  store %variant %34, ptr %35, align 16
  %36 = call i64 @std_io_printfln(ptr %retparam37, ptr @.str.11, i64 2, ptr %varargslots38, i64 1)
  %not_err40 = icmp eq i64 %36, 0
  br i1 %not_err40, label %after_check41, label %voiderr42

after_check41:                                    ; preds = %voiderr36
  br label %voiderr42

voiderr42:                                        ; preds = %after_check41, %voiderr36
  store ptr @test_test2, ptr %y, align 8
  store i64 ptrtoint (ptr @"ct$p$fn$int$int$" to i64), ptr %zfoke, align 8
  ret void
}
