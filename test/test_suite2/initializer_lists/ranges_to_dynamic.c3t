// #target: mingw-x64
module test;

extern fn void printf(char*, ...);

fn void test(int x)
{
    int[10] y = { [0..3] = 4, [6..8] = x };
    foreach (int v : y)
    {
        printf("%d\n", v);
    }
}

fn void main()
{
    test(101);
}

/* #expect: test.ll

define void @test_test(i32 %0) #0 {
entry:
  %y = alloca [10 x i32], align 16
  %anon = alloca i64, align 8
  %v = alloca i32, align 4
  call void @llvm.memset.p0.i64(ptr align 16 %y, i8 0, i64 40, i1 false)
  %1 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 0
  store i32 4, ptr %1, align 4
  %2 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 1
  store i32 4, ptr %2, align 4
  %3 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 2
  store i32 4, ptr %3, align 4
  %4 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 3
  store i32 4, ptr %4, align 4
  %5 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 6
  store i32 %0, ptr %5, align 4
  %6 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 7
  store i32 %0, ptr %6, align 4
  %7 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 8
  store i32 %0, ptr %7, align 4
  store i64 0, ptr %anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %8 = load i64, ptr %anon, align 8
  %gt = icmp ugt i64 10, %8
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %9 = load i64, ptr %anon, align 8
  %10 = getelementptr inbounds [10 x i32], ptr %y, i64 0, i64 %9
  %11 = load i32, ptr %10, align 4
  store i32 %11, ptr %v, align 4
  %12 = load i32, ptr %v, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %12)
  %13 = load i64, ptr %anon, align 8
  %add = add i64 %13, 1
  store i64 %add, ptr %anon, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret void
}