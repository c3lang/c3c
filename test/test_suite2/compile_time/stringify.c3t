// #target: macos-x64
module test;
import std::io;

macro @timeit(#call)
{
    long t = $$sysclock();
    var $Type = $typeof(#call);
    var $is_void = $Type.typeid == void.typeid;
$if ($is_void):
    #call;
$else:
    $Type result = #call;
$endif;
    long diff = $$sysclock() - t;
    io::printfln("'%s' took %s cycles", $stringify(#call), diff);
$if (!$is_void):
    return result;
$endif;
}

fn void test()
{
    for (int i = 0; i < 1000; i++) io::printfln("%s", i);
}

fn void main()
{
    @timeit(test());
    int a = 100;
    int x = @timeit(1 + 3 + a);
    io::printfln("Result was %s", x);
}
