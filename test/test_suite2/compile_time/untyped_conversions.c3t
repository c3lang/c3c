// #target: macos-x64
module test;
import std::io;
struct Foo
{
	int a; int b;
}
fn void test(int[2] a, int[] b, int[<2>] c)
{
	io::printfln("%s %s %s", a, b, c);
}
fn void main()
{
	var $x = { { 1, 2 } };
	Foo[1] abc = (Foo[1])$x;
	Foo def = (Foo)$x[0];
	int[2][1] y = (int[2][1])$x;
	double[2][1] y2 = $x;
	io::printfln("%s %s {%s, %s}", y, y2, def.a, def.b);
	test({ 1, 2 }, { 3, 4}, { 5, 6 });
	var $a = { 2, 7 };
	test($a, $a, $a);
}

/* #expect: test.ll

source_filename = "test"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin"

%.introspect = type { i8, i64, i64, i64, [0 x i64] }
%Foo = type { i32, i32 }
%"int[]" = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"variant[]" = type { ptr, i64 }
%variant = type { ptr, i64 }

@"ct$test_Foo" = linkonce constant %.introspect { i8 10, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [9 x i8] c"%s %s %s\00", align 1
@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$a2$int" = linkonce constant %.introspect { i8 15, i64 8, i64 ptrtoint (ptr @"ct$int" to i64), i64 2, [0 x i64] zeroinitializer }, align 8
@"ct$sa$int" = linkonce constant %.introspect { i8 16, i64 16, i64 ptrtoint (ptr @"ct$int" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$v2$int" = linkonce constant %.introspect { i8 17, i64 8, i64 ptrtoint (ptr @"ct$int" to i64), i64 2, [0 x i64] zeroinitializer }, align 8
@.__const = private unnamed_addr constant [1 x %Foo] [%Foo { i32 1, i32 2 }], align 4
@.__const.1 = private unnamed_addr constant %Foo { i32 1, i32 2 }, align 4
@.__const.2 = private unnamed_addr constant [1 x [2 x i32]] [[2 x i32] [i32 1, i32 2]], align 4
@.__const.3 = private unnamed_addr constant [1 x [2 x double]] [[2 x double] [double 1.000000e+00, double 2.000000e+00]], align 16
@.str.4 = private unnamed_addr constant [15 x i8] c"%s %s {%s, %s}\00", align 1
@"ct$a1$a2$int" = linkonce constant %.introspect { i8 15, i64 8, i64 ptrtoint (ptr @"ct$a2$int" to i64), i64 1, [0 x i64] zeroinitializer }, align 8
@"ct$double" = linkonce constant %.introspect { i8 4, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$a2$double" = linkonce constant %.introspect { i8 15, i64 16, i64 ptrtoint (ptr @"ct$double" to i64), i64 2, [0 x i64] zeroinitializer }, align 8
@"ct$a1$a2$double" = linkonce constant %.introspect { i8 15, i64 16, i64 ptrtoint (ptr @"ct$a2$double" to i64), i64 1, [0 x i64] zeroinitializer }, align 8

; Function Attrs: nounwind
define void @test_test(i64 %0, ptr %1, i64 %2, double %3) #0 {
entry:
  %a = alloca [2 x i32], align 4
  %b = alloca %"int[]", align 8
  %c = alloca <2 x i32>, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [3 x %variant], align 16
  store i64 %0, ptr %a, align 4
  %4 = getelementptr inbounds { ptr, i64 }, ptr %b, i32 0, i32 0
  store ptr %1, ptr %4, align 8
  %5 = getelementptr inbounds { ptr, i64 }, ptr %b, i32 0, i32 1
  store i64 %2, ptr %5, align 8
  store double %3, ptr %c, align 8
  store %"char[]" { ptr @.str, i64 8 }, ptr %taddr, align 8
  %6 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %6, align 8
  %7 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %7, align 8
  %8 = insertvalue %variant undef, ptr %a, 0
  %9 = insertvalue %variant %8, i64 ptrtoint (ptr @"ct$a2$int" to i64), 1
  %10 = getelementptr inbounds [3 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %9, ptr %10, align 16
  %11 = insertvalue %variant undef, ptr %b, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$sa$int" to i64), 1
  %13 = getelementptr inbounds [3 x %variant], ptr %varargslots, i64 0, i64 1
  store %variant %12, ptr %13, align 16
  %14 = insertvalue %variant undef, ptr %c, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (ptr @"ct$v2$int" to i64), 1
  %16 = getelementptr inbounds [3 x %variant], ptr %varargslots, i64 0, i64 2
  store %variant %15, ptr %16, align 16
  %17 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 1
  store i64 3, ptr %17, align 8
  %18 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 0
  store ptr %varargslots, ptr %18, align 8
  %19 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 0
  %lo1 = load ptr, ptr %19, align 8
  %20 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 1
  %hi2 = load i64, ptr %20, align 8
  %21 = call i64 @std_io_printfln(ptr %retparam, ptr %lo, i64 %hi, ptr %lo1, i64 %hi2)
  %not_err = icmp eq i64 %21, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  ret void
}

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %abc = alloca [1 x %Foo], align 4
  %def = alloca %Foo, align 4
  %y = alloca [1 x [2 x i32]], align 4
  %y2 = alloca [1 x [2 x double]], align 16
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [4 x %variant], align 16
  %literal = alloca [2 x i32], align 4
  %literal3 = alloca [2 x i32], align 4
  %taddr4 = alloca %"int[]", align 8
  %taddr7 = alloca <2 x i32>, align 8
  %literal8 = alloca [2 x i32], align 4
  %literal9 = alloca [2 x i32], align 4
  %taddr10 = alloca %"int[]", align 8
  %taddr13 = alloca <2 x i32>, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %abc, ptr align 4 @.__const, i32 8, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %def, ptr align 4 @.__const.1, i32 8, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %y, ptr align 4 @.__const.2, i32 8, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %y2, ptr align 16 @.__const.3, i32 16, i1 false)
  store %"char[]" { ptr @.str.4, i64 14 }, ptr %taddr, align 8
  %0 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %0, align 8
  %1 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %1, align 8
  %2 = insertvalue %variant undef, ptr %y, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$a1$a2$int" to i64), 1
  %4 = getelementptr inbounds [4 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = insertvalue %variant undef, ptr %y2, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (ptr @"ct$a1$a2$double" to i64), 1
  %7 = getelementptr inbounds [4 x %variant], ptr %varargslots, i64 0, i64 1
  store %variant %6, ptr %7, align 16
  %8 = getelementptr inbounds %Foo, ptr %def, i32 0, i32 0
  %9 = insertvalue %variant undef, ptr %8, 0
  %10 = insertvalue %variant %9, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %11 = getelementptr inbounds [4 x %variant], ptr %varargslots, i64 0, i64 2
  store %variant %10, ptr %11, align 16
  %12 = getelementptr inbounds %Foo, ptr %def, i32 0, i32 1
  %13 = insertvalue %variant undef, ptr %12, 0
  %14 = insertvalue %variant %13, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %15 = getelementptr inbounds [4 x %variant], ptr %varargslots, i64 0, i64 3
  store %variant %14, ptr %15, align 16
  %16 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 1
  store i64 4, ptr %16, align 8
  %17 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 0
  store ptr %varargslots, ptr %17, align 8
  %18 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 0
  %lo1 = load ptr, ptr %18, align 8
  %19 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 1
  %hi2 = load i64, ptr %19, align 8
  %20 = call i64 @std_io_printfln(ptr %retparam, ptr %lo, i64 %hi, ptr %lo1, i64 %hi2)
  %not_err = icmp eq i64 %20, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %21 = getelementptr inbounds [2 x i32], ptr %literal, i64 0, i64 0
  store i32 1, ptr %21, align 4
  %22 = getelementptr inbounds [2 x i32], ptr %literal, i64 0, i64 1
  store i32 2, ptr %22, align 4
  %23 = load i64, ptr %literal, align 4
  %24 = getelementptr inbounds [2 x i32], ptr %literal3, i64 0, i64 0
  store i32 3, ptr %24, align 4
  %25 = getelementptr inbounds [2 x i32], ptr %literal3, i64 0, i64 1
  store i32 4, ptr %25, align 4
  %26 = insertvalue %"int[]" undef, ptr %literal3, 0
  %27 = insertvalue %"int[]" %26, i64 2, 1
  store %"int[]" %27, ptr %taddr4, align 8
  %28 = getelementptr inbounds { ptr, i64 }, ptr %taddr4, i32 0, i32 0
  %lo5 = load ptr, ptr %28, align 8
  %29 = getelementptr inbounds { ptr, i64 }, ptr %taddr4, i32 0, i32 1
  %hi6 = load i64, ptr %29, align 8
  store <2 x i32> <i32 5, i32 6>, ptr %taddr7, align 8
  %30 = load double, ptr %taddr7, align 8
  call void @test_test(i64 %23, ptr %lo5, i64 %hi6, double %30)
  %31 = getelementptr inbounds [2 x i32], ptr %literal8, i64 0, i64 0
  store i32 2, ptr %31, align 4
  %32 = getelementptr inbounds [2 x i32], ptr %literal8, i64 0, i64 1
  store i32 7, ptr %32, align 4
  %33 = load i64, ptr %literal8, align 4
  %34 = getelementptr inbounds [2 x i32], ptr %literal9, i64 0, i64 0
  store i32 2, ptr %34, align 4
  %35 = getelementptr inbounds [2 x i32], ptr %literal9, i64 0, i64 1
  store i32 7, ptr %35, align 4
  %36 = insertvalue %"int[]" undef, ptr %literal9, 0
  %37 = insertvalue %"int[]" %36, i64 2, 1
  store %"int[]" %37, ptr %taddr10, align 8
  %38 = getelementptr inbounds { ptr, i64 }, ptr %taddr10, i32 0, i32 0
  %lo11 = load ptr, ptr %38, align 8
  %39 = getelementptr inbounds { ptr, i64 }, ptr %taddr10, i32 0, i32 1
  %hi12 = load i64, ptr %39, align 8
  store <2 x i32> <i32 2, i32 7>, ptr %taddr13, align 8
  %40 = load double, ptr %taddr13, align 8
  call void @test_test(i64 %33, ptr %lo11, i64 %hi12, double %40)
  ret void
}

; Function Attrs: nounwind
define i32 @main(i32 %0, ptr %1) #0 {
entry:
  call void @test_main()
  ret i32 0
}

declare i64 @std_io_printfln(ptr, ptr, i64, ptr, i64)

; Function Attrs: argmemonly nocallback nofree nounwind willreturn
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #1
