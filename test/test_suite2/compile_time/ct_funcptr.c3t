// #target: macos-x64
module test;
import std::io;

fn void test(int x)
{
	$typeof($$FUNCPTR) ptr = $$FUNCPTR;
	io::printfln("%d", x);
	if (x > 0) ptr(x - 1);
}

fn void main()
{
	test(10);
}

/* #expect: test.ll

define void @test_test(i32 %0) #0 {
entry:
  %ptr = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr1 = alloca i32, align 4
  store ptr @test_test, ptr %ptr, align 8
  store %"char[]" { ptr @.str, i64 2 }, ptr %taddr, align 8
  %1 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %1, align 8
  %2 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %2, align 8
  store i32 %0, ptr %taddr1, align 4
  %3 = insertvalue %variant undef, ptr %taddr1, 0
  %4 = insertvalue %variant %3, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %5 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %4, ptr %5, align 16
  %6 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 1
  store i64 1, ptr %6, align 8
  %7 = getelementptr inbounds %"variant[]", ptr %vararg, i32 0, i32 0
  store ptr %varargslots, ptr %7, align 8
  %8 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 0
  %lo2 = load ptr, ptr %8, align 8
  %9 = getelementptr inbounds { ptr, i64 }, ptr %vararg, i32 0, i32 1
  %hi3 = load i64, ptr %9, align 8
  %10 = call i64 @std_io_printfln(ptr %retparam, ptr %lo, i64 %hi, ptr %lo2, i64 %hi3)
  %not_err = icmp eq i64 %10, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit

if.then:                                          ; preds = %voiderr
  %11 = load ptr, ptr %ptr, align 8
  %sub = sub i32 %0, 1
  call void %11(i32 %sub)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %voiderr
  ret void
}
