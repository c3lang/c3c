// #target: macos-x64

module test;
import std::map;

define IntMap = HashMap<char[], int>;

fn void main()
{
	IntMap map;
	map.set("Hello", 4);
	map["Bye"] = 5;
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %map = alloca %HashMap, align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %map, i8 0, i64 40, i1 false)
  store %"char[]" { ptr @.str, i64 5 }, ptr %taddr, align 8
  %0 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 0
  %lo = load ptr, ptr %0, align 8
  %1 = getelementptr inbounds { ptr, i64 }, ptr %taddr, i32 0, i32 1
  %hi = load i64, ptr %1, align 8
  %2 = call i8 @"std_map$$sa$char.int_HashMap_set"(ptr %map, ptr %lo, i64 %hi, i32 4)
  store %"char[]" { ptr @.str.1, i64 3 }, ptr %taddr1, align 8
  %3 = getelementptr inbounds { ptr, i64 }, ptr %taddr1, i32 0, i32 0
  %lo2 = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds { ptr, i64 }, ptr %taddr1, i32 0, i32 1
  %hi3 = load i64, ptr %4, align 8
  %5 = call i8 @"std_map$$sa$char.int_HashMap_set"(ptr %map, ptr %lo2, i64 %hi3, i32 5)
  ret void
}