// #target: macos-x64
module test;
import std::io;
import std::enumset;

define AbcEnumSet = EnumSet<Abc>;

enum Abc
{
	HELLO,
	WORLD
}
fn void main()
{
	AbcEnumSet set;
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
	set.add(Abc.HELLO);
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
	set.add(Abc.WORLD);
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
	AbcEnumSet set2;
	set2.add_all(set);
	io::printf("Has WORLD: %s\n", set2.has(Abc.WORLD));
	set.remove_all(set2);
	io::printf("Has WORLD: %s\n", set.has(Abc.WORLD));
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %set = alloca i32, align 4
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i8, align 1
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %taddr3 = alloca i8, align 1
  %retparam7 = alloca i64, align 8
  %varargslots8 = alloca [1 x %variant], align 16
  %taddr9 = alloca i8, align 1
  %set2 = alloca i32, align 4
  %retparam13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %variant], align 16
  %taddr15 = alloca i8, align 1
  %retparam19 = alloca i64, align 8
  %varargslots20 = alloca [1 x %variant], align 16
  %taddr21 = alloca i8, align 1
  store i32 0, ptr %set, align 4
  %0 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(ptr %set, i32 1)
  store i8 %0, ptr %taddr, align 1
  %1 = insertvalue %variant undef, ptr %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printf(ptr %retparam, ptr @.str, i64 14, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %4, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  call void @"std_enumset$$test_Abc_EnumSet_add"(ptr %set, i32 0)
  %5 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(ptr %set, i32 1)
  store i8 %5, ptr %taddr3, align 1
  %6 = insertvalue %variant undef, ptr %taddr3, 0
  %7 = insertvalue %variant %6, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %8 = getelementptr inbounds [1 x %variant], ptr %varargslots2, i64 0, i64 0
  store %variant %7, ptr %8, align 16
  %9 = call i64 @std_io_printf(ptr %retparam1, ptr @.str.1, i64 14, ptr %varargslots2, i64 1)
  %not_err4 = icmp eq i64 %9, 0
  br i1 %not_err4, label %after_check5, label %voiderr6

after_check5:                                     ; preds = %voiderr
  br label %voiderr6

voiderr6:                                         ; preds = %after_check5, %voiderr
  call void @"std_enumset$$test_Abc_EnumSet_add"(ptr %set, i32 1)
  %10 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(ptr %set, i32 1)
  store i8 %10, ptr %taddr9, align 1
  %11 = insertvalue %variant undef, ptr %taddr9, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], ptr %varargslots8, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = call i64 @std_io_printf(ptr %retparam7, ptr @.str.2, i64 14, ptr %varargslots8, i64 1)
  %not_err10 = icmp eq i64 %14, 0
  br i1 %not_err10, label %after_check11, label %voiderr12

after_check11:                                    ; preds = %voiderr6
  br label %voiderr12

voiderr12:                                        ; preds = %after_check11, %voiderr6
  store i32 0, ptr %set2, align 4
  %15 = load i32, ptr %set, align 4
  call void @"std_enumset$$test_Abc_EnumSet_add_all"(ptr %set2, i32 %15)
  %16 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(ptr %set2, i32 1)
  store i8 %16, ptr %taddr15, align 1
  %17 = insertvalue %variant undef, ptr %taddr15, 0
  %18 = insertvalue %variant %17, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %19 = getelementptr inbounds [1 x %variant], ptr %varargslots14, i64 0, i64 0
  store %variant %18, ptr %19, align 16
  %20 = call i64 @std_io_printf(ptr %retparam13, ptr @.str.3, i64 14, ptr %varargslots14, i64 1)
  %not_err16 = icmp eq i64 %20, 0
  br i1 %not_err16, label %after_check17, label %voiderr18

after_check17:                                    ; preds = %voiderr12
  br label %voiderr18

voiderr18:                                        ; preds = %after_check17, %voiderr12
  %21 = load i32, ptr %set2, align 4
  call void @"std_enumset$$test_Abc_EnumSet_remove_all"(ptr %set, i32 %21)
  %22 = call i8 @"std_enumset$$test_Abc_EnumSet_has"(ptr %set, i32 1)
  store i8 %22, ptr %taddr21, align 1
  %23 = insertvalue %variant undef, ptr %taddr21, 0
  %24 = insertvalue %variant %23, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %25 = getelementptr inbounds [1 x %variant], ptr %varargslots20, i64 0, i64 0
  store %variant %24, ptr %25, align 16
  %26 = call i64 @std_io_printf(ptr %retparam19, ptr @.str.4, i64 14, ptr %varargslots20, i64 1)
  %not_err22 = icmp eq i64 %26, 0
  br i1 %not_err22, label %after_check23, label %voiderr24

after_check23:                                    ; preds = %voiderr18
  br label %voiderr24

voiderr24:                                        ; preds = %after_check23, %voiderr18
  ret void
}
