// #target: macos-x64
module test;
import std;

def Abc = HashMap(<int, int>);
Abc m;
fn void! main()
{
	m[3] = 100;
	int! x = m[3]--;
	assert(m[3]! == 99);
	assert(x! == 100);
	x = ++m[3];
	assert(m[3]! == 100);
	assert(x! == 100);
}

/* #expect: test.ll

define i64 @test.main() #0 {
entry:
  %x = alloca i32, align 4
  %x.f = alloca i64, align 8
  %.anon = alloca ptr, align 8
  %.anon1 = alloca i32, align 4
  %.anon2 = alloca i32, align 4
  %anon.f = alloca i64, align 8
  %retparam = alloca i32, align 4
  %.anon3 = alloca i32, align 4
  %anon.f4 = alloca i64, align 8
  %.anon20 = alloca ptr, align 8
  %.anon21 = alloca i32, align 4
  %.anon22 = alloca i32, align 4
  %anon.f23 = alloca i64, align 8
  %retparam24 = alloca i32, align 4
  %.anon31 = alloca i32, align 4
  %anon.f32 = alloca i64, align 8
  %0 = call i8 @"std_collections_map$int$int$.HashMap.set"(ptr @test.m, i32 3, i32 100)
  store ptr @test.m, ptr %.anon, align 8
  store i32 3, ptr %.anon1, align 4
  %1 = load ptr, ptr %.anon, align 8
  %2 = load i32, ptr %.anon1, align 4
  %3 = call i64 @"std_collections_map$int$int$.HashMap.get"(ptr %retparam, ptr %1, i32 %2)
  %not_err = icmp eq i64 %3, 0
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %4, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %anon.f, align 8
  br label %optional_assign_jump

after_check:                                      ; preds = %entry
  %5 = load i32, ptr %retparam, align 4
  store i32 %5, ptr %.anon2, align 4
  store i64 0, ptr %anon.f, align 8
  br label %after_assign

optional_assign_jump:                             ; preds = %assign_optional
  %reload_err = load i64, ptr %anon.f, align 8
  store i64 %reload_err, ptr %x.f, align 8
  br label %after_assign19

after_assign:                                     ; preds = %after_check
  %optval = load i64, ptr %anon.f, align 8
  %not_err5 = icmp eq i64 %optval, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %6, label %after_check7, label %assign_optional6

assign_optional6:                                 ; preds = %after_assign
  store i64 %optval, ptr %anon.f4, align 8
  br label %optional_assign_jump8

after_check7:                                     ; preds = %after_assign
  %7 = load i32, ptr %.anon2, align 4
  %sub = sub i32 %7, 1
  store i32 %sub, ptr %.anon2, align 4
  store i32 %7, ptr %.anon3, align 4
  store i64 0, ptr %anon.f4, align 8
  br label %after_assign10

optional_assign_jump8:                            ; preds = %assign_optional6
  %reload_err9 = load i64, ptr %anon.f4, align 8
  store i64 %reload_err9, ptr %x.f, align 8
  br label %after_assign19

after_assign10:                                   ; preds = %after_check7
  %optval11 = load i64, ptr %anon.f, align 8
  %not_err12 = icmp eq i64 %optval11, 0
  %8 = call i1 @llvm.expect.i1(i1 %not_err12, i1 true)
  br i1 %8, label %after_check14, label %assign_optional13

assign_optional13:                                ; preds = %after_assign10
  store i64 %optval11, ptr %x.f, align 8
  br label %after_assign19

after_check14:                                    ; preds = %after_assign10
  %9 = load ptr, ptr %.anon, align 8
  %10 = load i32, ptr %.anon1, align 4
  %11 = load i32, ptr %.anon2, align 4
  %12 = call i8 @"std_collections_map$int$int$.HashMap.set"(ptr %9, i32 %10, i32 %11)
  %optval15 = load i64, ptr %anon.f4, align 8
  %not_err16 = icmp eq i64 %optval15, 0
  %13 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true)
  br i1 %13, label %after_check18, label %assign_optional17

assign_optional17:                                ; preds = %after_check14
  store i64 %optval15, ptr %x.f, align 8
  br label %after_assign19

after_check18:                                    ; preds = %after_check14
  %14 = load i32, ptr %.anon3, align 4
  store i32 %14, ptr %x, align 4
  store i64 0, ptr %x.f, align 8
  br label %after_assign19

after_assign19:                                   ; preds = %after_check18, %assign_optional17, %assign_optional13, %optional_assign_jump8, %optional_assign_jump
  store ptr @test.m, ptr %.anon20, align 8
  store i32 3, ptr %.anon21, align 4
  %15 = load ptr, ptr %.anon20, align 8
  %16 = load i32, ptr %.anon21, align 4
  %17 = call i64 @"std_collections_map$int$int$.HashMap.get"(ptr %retparam24, ptr %15, i32 %16)
  %not_err25 = icmp eq i64 %17, 0
  %18 = call i1 @llvm.expect.i1(i1 %not_err25, i1 true)
  br i1 %18, label %after_check27, label %assign_optional26

assign_optional26:                                ; preds = %after_assign19
  store i64 %17, ptr %anon.f23, align 8
  br label %optional_assign_jump28

after_check27:                                    ; preds = %after_assign19
  %19 = load i32, ptr %retparam24, align 4
  store i32 %19, ptr %.anon22, align 4
  store i64 0, ptr %anon.f23, align 8
  br label %after_assign30

optional_assign_jump28:                           ; preds = %assign_optional26
  %reload_err29 = load i64, ptr %anon.f23, align 8
  store i64 %reload_err29, ptr %x.f, align 8
  br label %after_assign48

after_assign30:                                   ; preds = %after_check27
  %optval33 = load i64, ptr %anon.f23, align 8
  %not_err34 = icmp eq i64 %optval33, 0
  %20 = call i1 @llvm.expect.i1(i1 %not_err34, i1 true)
  br i1 %20, label %after_check36, label %assign_optional35

assign_optional35:                                ; preds = %after_assign30
  store i64 %optval33, ptr %anon.f32, align 8
  br label %optional_assign_jump37

after_check36:                                    ; preds = %after_assign30
  %21 = load i32, ptr %.anon22, align 4
  %add = add i32 %21, 1
  store i32 %add, ptr %.anon22, align 4
  store i32 %add, ptr %.anon31, align 4
  store i64 0, ptr %anon.f32, align 8
  br label %after_assign39

optional_assign_jump37:                           ; preds = %assign_optional35
  %reload_err38 = load i64, ptr %anon.f32, align 8
  store i64 %reload_err38, ptr %x.f, align 8
  br label %after_assign48

after_assign39:                                   ; preds = %after_check36
  %optval40 = load i64, ptr %anon.f23, align 8
  %not_err41 = icmp eq i64 %optval40, 0
  %22 = call i1 @llvm.expect.i1(i1 %not_err41, i1 true)
  br i1 %22, label %after_check43, label %assign_optional42

assign_optional42:                                ; preds = %after_assign39
  store i64 %optval40, ptr %x.f, align 8
  br label %after_assign48

after_check43:                                    ; preds = %after_assign39
  %23 = load ptr, ptr %.anon20, align 8
  %24 = load i32, ptr %.anon21, align 4
  %25 = load i32, ptr %.anon22, align 4
  %26 = call i8 @"std_collections_map$int$int$.HashMap.set"(ptr %23, i32 %24, i32 %25)
  %optval44 = load i64, ptr %anon.f32, align 8
  %not_err45 = icmp eq i64 %optval44, 0
  %27 = call i1 @llvm.expect.i1(i1 %not_err45, i1 true)
  br i1 %27, label %after_check47, label %assign_optional46

assign_optional46:                                ; preds = %after_check43
  store i64 %optval44, ptr %x.f, align 8
  br label %after_assign48

after_check47:                                    ; preds = %after_check43
  %28 = load i32, ptr %.anon31, align 4
  store i32 %28, ptr %x, align 4
  store i64 0, ptr %x.f, align 8
  br label %after_assign48

after_assign48:                                   ; preds = %after_check47, %assign_optional46, %assign_optional42, %optional_assign_jump37, %optional_assign_jump28
  ret i64 0
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %0, ptr %1) #0 {
entry:
  %blockret = alloca i32, align 4
  %temp_err = alloca i64, align 8
  br label %testblock

testblock:                                        ; preds = %entry
  %2 = call i64 @test.main()
  %not_err = icmp eq i64 %2, 0
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %3, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %testblock
  store i64 %2, ptr %temp_err, align 8
  br label %end_block

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8
  br label %end_block

end_block:                                        ; preds = %after_check, %assign_optional
  %4 = load i64, ptr %temp_err, align 8
  %i2b = icmp ne i64 %4, 0
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  store i32 1, ptr %blockret, align 4
  br label %expr_block.exit

if.exit:                                          ; preds = %end_block
  store i32 0, ptr %blockret, align 4
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %5 = load i32, ptr %blockret, align 4
  ret i32 %5
}