// #target: macos-x64
module test;

fault Test { FOO, BAR }

fn void test()
{
	void* a;
	void* b;
	void* c;
	a = !a ? a : !a ? b : c;
	void*! x;
	void*! y = !a ? x : b;
	y = !a ? b : x;
	y = !a ? x : x;
	y = !a ? x : Test.FOO!;
	y = !a ? Test.FOO! : x;
	y = !a ? Test.FOO! : Test.BAR!;
}

/* #expect: test.ll

  %0 = load ptr, ptr %a, align 8
  %not = icmp eq ptr %0, null
  br i1 %not, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %1 = load ptr, ptr %a, align 8
  br label %cond.phi4

cond.rhs:                                         ; preds = %entry
  %2 = load ptr, ptr %a, align 8
  %not1 = icmp eq ptr %2, null
  br i1 %not1, label %cond.lhs2, label %cond.rhs3

cond.lhs2:                                        ; preds = %cond.rhs
  %3 = load ptr, ptr %b, align 8
  br label %cond.phi

cond.rhs3:                                        ; preds = %cond.rhs
  %4 = load ptr, ptr %c, align 8
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs3, %cond.lhs2
  %val = phi ptr [ %3, %cond.lhs2 ], [ %4, %cond.rhs3 ]
  br label %cond.phi4

cond.phi4:                                        ; preds = %cond.phi, %cond.lhs
  %val5 = phi ptr [ %1, %cond.lhs ], [ %val, %cond.phi ]
  store ptr %val5, ptr %a, align 8
  store i64 0, ptr %x.f, align 8
  store ptr null, ptr %x, align 8
  %5 = load ptr, ptr %a, align 8
  %not6 = icmp eq ptr %5, null
  br i1 %not6, label %cond.lhs7, label %cond.rhs8

cond.lhs7:                                        ; preds = %cond.phi4
  %optval = load i64, ptr %x.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %cond.lhs7
  store i64 %optval, ptr %y.f, align 8
  br label %after_assign

after_check:                                      ; preds = %cond.lhs7
  %6 = load ptr, ptr %x, align 8
  br label %cond.phi9

cond.rhs8:                                        ; preds = %cond.phi4
  %7 = load ptr, ptr %b, align 8
  br label %cond.phi9

cond.phi9:                                        ; preds = %cond.rhs8, %after_check
  %val10 = phi ptr [ %6, %after_check ], [ %7, %cond.rhs8 ]
  store ptr %val10, ptr %y, align 8
  store i64 0, ptr %y.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %cond.phi9, %assign_optional
  %8 = load ptr, ptr %a, align 8
  %not11 = icmp eq ptr %8, null
  br i1 %not11, label %cond.lhs12, label %cond.rhs13

cond.lhs12:                                       ; preds = %after_assign
  %9 = load ptr, ptr %b, align 8
  br label %cond.phi18

cond.rhs13:                                       ; preds = %after_assign
  %optval14 = load i64, ptr %x.f, align 8
  %not_err15 = icmp eq i64 %optval14, 0
  br i1 %not_err15, label %after_check17, label %assign_optional16

assign_optional16:                                ; preds = %cond.rhs13
  store i64 %optval14, ptr %y.f, align 8
  br label %after_assign20

after_check17:                                    ; preds = %cond.rhs13
  %10 = load ptr, ptr %x, align 8
  br label %cond.phi18

cond.phi18:                                       ; preds = %after_check17, %cond.lhs12
  %val19 = phi ptr [ %9, %cond.lhs12 ], [ %10, %after_check17 ]
  store ptr %val19, ptr %y, align 8
  store i64 0, ptr %y.f, align 8
  br label %after_assign20

after_assign20:                                   ; preds = %cond.phi18, %assign_optional16
  br label %voiderr

voiderr:                                          ; preds = %after_assign20
  %11 = load ptr, ptr %a, align 8
  %not21 = icmp eq ptr %11, null
  br i1 %not21, label %cond.lhs22, label %cond.rhs27

cond.lhs22:                                       ; preds = %voiderr
  %optval23 = load i64, ptr %x.f, align 8
  %not_err24 = icmp eq i64 %optval23, 0
  br i1 %not_err24, label %after_check26, label %assign_optional25

assign_optional25:                                ; preds = %cond.lhs22
  store i64 %optval23, ptr %y.f, align 8
  br label %after_assign34

after_check26:                                    ; preds = %cond.lhs22
  %12 = load ptr, ptr %x, align 8
  br label %cond.phi32

cond.rhs27:                                       ; preds = %voiderr
  %optval28 = load i64, ptr %x.f, align 8
  %not_err29 = icmp eq i64 %optval28, 0
  br i1 %not_err29, label %after_check31, label %assign_optional30

assign_optional30:                                ; preds = %cond.rhs27
  store i64 %optval28, ptr %y.f, align 8
  br label %after_assign34

after_check31:                                    ; preds = %cond.rhs27
  %13 = load ptr, ptr %x, align 8
  br label %cond.phi32

cond.phi32:                                       ; preds = %after_check31, %after_check26
  %val33 = phi ptr [ %12, %after_check26 ], [ %13, %after_check31 ]
  store ptr %val33, ptr %y, align 8
  store i64 0, ptr %y.f, align 8
  br label %after_assign34

after_assign34:                                   ; preds = %cond.phi32, %assign_optional30, %assign_optional25
  br label %voiderr35

voiderr35:                                        ; preds = %after_assign34
  %14 = load ptr, ptr %a, align 8
  %not36 = icmp eq ptr %14, null
  br i1 %not36, label %cond.lhs37, label %cond.rhs42

cond.lhs37:                                       ; preds = %voiderr35
  %optval38 = load i64, ptr %x.f, align 8
  %not_err39 = icmp eq i64 %optval38, 0
  br i1 %not_err39, label %after_check41, label %assign_optional40

assign_optional40:                                ; preds = %cond.lhs37
  store i64 %optval38, ptr %y.f, align 8
  br label %after_assign44

after_check41:                                    ; preds = %cond.lhs37
  %15 = load ptr, ptr %x, align 8
  br label %cond.phi43

cond.rhs42:                                       ; preds = %voiderr35
  store i64 ptrtoint (ptr @"test_Test$FOO" to i64), ptr %y.f, align 8
  br label %after_assign44

cond.phi43:                                       ; preds = %after_check41
  store ptr %15, ptr %y, align 8
  store i64 0, ptr %y.f, align 8
  br label %after_assign44

after_assign44:                                   ; preds = %cond.phi43, %cond.rhs42, %assign_optional40
  br label %voiderr45

voiderr45:                                        ; preds = %after_assign44
  %16 = load ptr, ptr %a, align 8
  %not46 = icmp eq ptr %16, null
  br i1 %not46, label %cond.lhs47, label %cond.rhs48

cond.lhs47:                                       ; preds = %voiderr45
  store i64 ptrtoint (ptr @"test_Test$FOO" to i64), ptr %y.f, align 8
  br label %after_assign54

cond.rhs48:                                       ; preds = %voiderr45
  %optval49 = load i64, ptr %x.f, align 8
  %not_err50 = icmp eq i64 %optval49, 0
  br i1 %not_err50, label %after_check52, label %assign_optional51

assign_optional51:                                ; preds = %cond.rhs48
  store i64 %optval49, ptr %y.f, align 8
  br label %after_assign54

after_check52:                                    ; preds = %cond.rhs48
  %17 = load ptr, ptr %x, align 8
  br label %cond.phi53

cond.phi53:                                       ; preds = %after_check52
  store ptr %17, ptr %y, align 8
  store i64 0, ptr %y.f, align 8
  br label %after_assign54

after_assign54:                                   ; preds = %cond.phi53, %assign_optional51, %cond.lhs47
  br label %voiderr55

voiderr55:                                        ; preds = %after_assign54
  %18 = load ptr, ptr %a, align 8
  %not56 = icmp eq ptr %18, null
  br i1 %not56, label %cond.lhs57, label %cond.rhs58

cond.lhs57:                                       ; preds = %voiderr55
  store i64 ptrtoint (ptr @"test_Test$FOO" to i64), ptr %y.f, align 8
  br label %after_assign60

cond.rhs58:                                       ; preds = %voiderr55
  store i64 ptrtoint (ptr @"test_Test$BAR" to i64), ptr %y.f, align 8
  br label %after_assign60

after_assign60:                                   ; preds = %cond.rhs58, %cond.lhs57
  br label %voiderr61

voiderr61:                                        ; preds = %after_assign60
  ret void
}