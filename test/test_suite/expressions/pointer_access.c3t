
extern fn void printf(char* c, ...);

struct ExtraSimple
{
    int a;
    int b;
    struct c
    {
        double e;
        double f0;
        double f1;
        double f;
        double j;
    }
    struct
    {
        int r;
        int s;
    }
    union
    {
        double o0;
        int o1;
    }
    int g;
}


fn void testSimple()
{
    ExtraSimple a = { .c.j = 3.3 };
    a.c.j = 3.4;
    printf("a = %d, c.e = %f, c.f = %f, c.j = %f, g = %d, o0 = %f, r = %d, s = %d\n", a.a, a.c.e, a.c.f, a.c.j, a.g, a.o0, a.r, a.s);
}

// TODO these may be wrong.
// #expect: pointer_access.ll

%ExtraSimple = type { i32, i32, %c, %anon, %anon.0, i32 }
%c = type { double, double, double, double, double }
%anon = type { i32, i32 }
%anon.0 = type { double }

@ExtraSimple = linkonce_odr constant i8 1

entry:
  %a = alloca %ExtraSimple, align 8
  %0 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 0
  store i32 0, i32* %0, align 8
  %1 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 1
  store i32 0, i32* %1, align 4
  %2 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 2
  %3 = getelementptr inbounds %c, %c* %2, i32 0, i32 0
  store double 0.000000e+00, double* %3, align 8
  %4 = getelementptr inbounds %c, %c* %2, i32 0, i32 1
  store double 0.000000e+00, double* %4, align 8
  %5 = getelementptr inbounds %c, %c* %2, i32 0, i32 2
  store double 0.000000e+00, double* %5, align 8
  %6 = getelementptr inbounds %c, %c* %2, i32 0, i32 3
  store double 0.000000e+00, double* %6, align 8
  %7 = getelementptr inbounds %c, %c* %2, i32 0, i32 4
  store double 3.300000e+00, double* %7, align 8
  %8 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 3
  %9 = bitcast %anon* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 8, i1 false)
  %10 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 4
  %11 = bitcast %anon.0* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 8, i1 false)
  %12 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 5
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 2
  %14 = getelementptr inbounds %c, %c* %13, i32 0, i32 4
  store double 3.400000e+00, double* %14, align 8
  %15 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 2
  %18 = getelementptr inbounds %c, %c* %17, i32 0, i32 0
  %19 = load double, double* %18, align 8
  %20 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 2
  %21 = getelementptr inbounds %c, %c* %20, i32 0, i32 3
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 2
  %24 = getelementptr inbounds %c, %c* %23, i32 0, i32 4
  %25 = load double, double* %24, align 8
  %26 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 5
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 4
  %29 = bitcast %anon.0* %28 to double*
  %30 = load double, double* %29, align 8
  %31 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 3
  %32 = getelementptr inbounds %anon, %anon* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %ExtraSimple, %ExtraSimple* %a, i32 0, i32 3
  %35 = getelementptr inbounds %anon, %anon* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i32 0, i32 0), i32 %16, double %19, double %22, double %25, i32 %27, double %30, i32 %33, i32 %36)
  ret void
