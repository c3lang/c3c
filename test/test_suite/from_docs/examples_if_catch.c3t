// #target: x64-darwin
module demo;
import std::io;

optenum MathError
{
    DIVISION_BY_ZERO
}

fn int foo() { return 123; }
fn int bar() { return 0; }

fn double! divide(int a, int b)
{
    if (b == 0) return MathError.DIVISION_BY_ZERO!;
    return (double)(a) / (double)(b);

}

// Rethrowing an error uses "?" suffix
fn void! testMayError()
{
    divide(foo(), bar())?;
}

fn void main()
{
    // ratio has a failable type.
    double! ratio = divide(foo(), bar());

    // Handle the error
    if (catch err = ratio)
    {
        case MathError.DIVISION_BY_ZERO:
            io::printf("Division by zero\n");
            return;
        default:
            io::printf("Unexpected error!");
            return;
    }
    // Flow typing makes "ratio"
    // have the type double here.
    io::printf("Ratio was %f\n", ratio);
}

/* #expect: demo.ll


define i64 @demo.divide(double* %0, i32 %1, i32 %2) #0 {
entry:
  %reterr = alloca i64, align 8
  %reterr1 = alloca i64, align 8
  %eq = icmp eq i32 %2, 0
  br i1 %eq, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  store i64 ptrtoint ([1 x i8*]* @"demo.MathError$elements" to i64), i64* %reterr, align 8
  br label %err_retblock

postfailed:                                       ; No predecessors!
  store double undef, double* %0, align 8
  ret i64 0

err_retblock:                                     ; preds = %if.then
  %3 = load i64, i64* %reterr, align 8
  ret i64 %3

if.exit:                                          ; preds = %entry
  %sifp = sitofp i32 %1 to double
  %sifp2 = sitofp i32 %2 to double
  %fdiv = fdiv double %sifp, %sifp2
  store double %fdiv, double* %0, align 8
  ret i64 0
}

define i64 @demo.testMayError() #0 {
entry:
  %error_var = alloca i64, align 8
  %retparam = alloca double, align 8
  %0 = call i32 @demo.foo()
  %1 = call i32 @demo.bar()
  %2 = call i64 @demo.divide(double* %retparam, i32 %0, i32 %1)
  %not_err = icmp eq i64 %2, 0
  br i1 %not_err, label %after.errcheck, label %error

error:                                            ; preds = %entry
  store i64 %2, i64* %error_var, align 8
  br label %guard_block

after.errcheck:                                   ; preds = %entry
  br label %noerr_block

guard_block:                                      ; preds = %error
  %3 = load i64, i64* %error_var, align 8
  ret i64 %3

noerr_block:                                      ; preds = %after.errcheck
  ret i64 0
}

define void @demo.main() #0 {
entry:
  %ratio = alloca double, align 8
  %ratio.f = alloca i64, align 8
  %retparam = alloca double, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %0 = call i32 @demo.foo()
  %1 = call i32 @demo.bar()
  %2 = call i64 @demo.divide(double* %retparam, i32 %0, i32 %1)
  %not_err = icmp eq i64 %2, 0
  br i1 %not_err, label %after.errcheck, label %error

error:                                            ; preds = %entry
  store i64 %2, i64* %ratio.f, align 8
  br label %after_assign

after.errcheck:                                   ; preds = %entry
  %3 = load double, double* %retparam, align 8
  store double %3, double* %ratio, align 8
  store i64 0, i64* %ratio.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after.errcheck, %error
  br label %testblock

testblock:                                        ; preds = %after_assign
  %4 = load i64, i64* %ratio.f, align 8
  %not_err1 = icmp eq i64 %4, 0
  br i1 %not_err1, label %after_check, label %error2

error2:                                           ; preds = %testblock
  store i64 %4, i64* %err, align 8
  br label %end_block

after_check:                                      ; preds = %testblock
  store i64 0, i64* %err, align 8
  br label %end_block

end_block:                                        ; preds = %after_check, %error2
  %5 = load i64, i64* %err, align 8
  %neq = icmp ne i64 %5, 0
  br i1 %neq, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  store i64 %5, i64* %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then
  %6 = load i64, i64* %switch, align 8
  %eq = icmp eq i64 ptrtoint ([1 x i8*]* @"demo.MathError$elements" to i64), %6
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  ret void

next_if:                                          ; preds = %switch.entry
  br label %switch.default

switch.default:                                   ; preds = %next_if
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  ret void

if.exit:                                          ; preds = %end_block
  %9 = load double, double* %ratio, align 8
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), double %9)
  ret void
}