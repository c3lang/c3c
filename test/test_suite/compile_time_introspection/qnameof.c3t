module qnametest;

extern fn int printf(char *, ...);
int x;

struct Blob { int z; int f; }

fn void main()
{
    int help;
    printf("printf: %s\n", $nameof(printf));
    printf("printfq: %s\n", $qnameof(printf));
    printf("Blobq: %s\n", $qnameof(Blob));
    printf("Blob: %s\n", $nameof(Blob));
    printf("xq: %s\n", $qnameof(x));
    printf("x: %s\n", $nameof(x));
    printf("helpq: %s\n", $qnameof(help));
    printf("mainq: %s\n", $qnameof(main));
    printf("Blob**[3]: %s\n", $nameof(Blob**[3]));
}

// #expect: qnametest.ll

@.str = private unnamed_addr constant [12 x i8] c"printf: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"printf\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"printfq: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"qnametest::printf\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"Blobq: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"qnametest::Blob\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"Blob: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Blob\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"xq: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"qnametest::x\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"x: %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"helpq: %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"mainq: %s\0A\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"qnametest::main\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"Blob**[3]: %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"Blob**[3]\00", align 1

define void @qnametest_main()
  %help = alloca i32, align 4
  store i32 0, i32* %help, align 4
  %0 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), [6 x i8]* bitcast ([7 x i8]* @.str.1 to [6 x i8]*))
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), [17 x i8]* bitcast ([18 x i8]* @.str.3 to [17 x i8]*))
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), [15 x i8]* bitcast ([16 x i8]* @.str.5 to [15 x i8]*))
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), [4 x i8]* bitcast ([5 x i8]* @.str.7 to [4 x i8]*))
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), [12 x i8]* bitcast ([13 x i8]* @.str.9 to [12 x i8]*))
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), [1 x i8]* bitcast ([2 x i8]* @.str.11 to [1 x i8]*))
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i32 0, i32 0), [4 x i8]* bitcast ([5 x i8]* @.str.13 to [4 x i8]*))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), [15 x i8]* bitcast ([16 x i8]* @.str.15 to [15 x i8]*))
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), [9 x i8]* bitcast ([10 x i8]* @.str.17 to [9 x i8]*))
  ret void
