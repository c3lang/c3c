module foo;
struct Foo
{
    int[] x;
}

struct FooIterator
{
    usize index;
    Foo *f;
}
macro FooIterator Foo.iterator(Foo *f)
{
    return FooIterator { 0, f };
}

macro bool FooIterator.next(FooIterator *it, int *value)
{
    if (it.index == it.f.x.len) return false;
    *value = it.f.x[it.index++];
    return true;
}

func void main()
{
    int[*] i = { 1, 3, 10 };
    Foo x = { &i };
    foreach FOO: (int f : x) {
        printf("%d\n", f);
        while (1)
        {
            break FOO;
        }
    }
}

extern func int printf(char *fmt, ...);

// #expect: foo.ll

define void @main() #0 {
entry:
  %i = alloca [3 x i32], align 4
  %x = alloca %Foo, align 8
  %f = alloca i32, align 4
  %.iterator = alloca %FooIterator, align 8
  %f1 = alloca %Foo*, align 8
  %blockret = alloca %FooIterator, align 8
  %literal = alloca %FooIterator, align 8
  %it = alloca %FooIterator*, align 8
  %value = alloca i32*, align 8
  %blockret2 = alloca i8, align 1
  %0 = bitcast [3 x i32]* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @.__const to i8*), i32 12, i1 false)
  %1 = getelementptr inbounds %Foo, %Foo* %x, i32 0, i32 0
  %2 = bitcast [3 x i32]* %i to i32*
  %3 = insertvalue %"int[]" undef, i32* %2, 0
  %4 = insertvalue %"int[]" %3, i64 3, 1
  store %"int[]" %4, %"int[]"* %1, align 8
  store i32 0, i32* %f, align 4
  store %Foo* %x, %Foo** %f1, align 8
  %5 = getelementptr inbounds %FooIterator, %FooIterator* %literal, i32 0, i32 0
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %FooIterator, %FooIterator* %literal, i32 0, i32 1
  %7 = load %Foo*, %Foo** %f1, align 8
  store %Foo* %7, %Foo** %6, align 8
  %8 = bitcast %FooIterator* %blockret to i8*
  %9 = bitcast %FooIterator* %literal to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %8, i8* align 8 %9, i32 16, i1 false)
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %entry
  %10 = bitcast %FooIterator* %.iterator to i8*
  %11 = bitcast %FooIterator* %blockret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %10, i8* align 8 %11, i32 16, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %expr_block.exit
  store %FooIterator* %.iterator, %FooIterator** %it, align 8
  store i32* %f, i32** %value, align 8
  %12 = load %FooIterator*, %FooIterator** %it, align 8
  %13 = getelementptr inbounds %FooIterator, %FooIterator* %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = load %FooIterator*, %FooIterator** %it, align 8
  %16 = getelementptr inbounds %FooIterator, %FooIterator* %15, i32 0, i32 1
  %17 = load %Foo*, %Foo** %16, align 8
  %18 = getelementptr inbounds %Foo, %Foo* %17, i32 0, i32 0
  %19 = getelementptr inbounds %"int[]", %"int[]"* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %eq = icmp eq i64 %14, %20
  br i1 %eq, label %if.then, label %if.exit

if.then:                                          ; preds = %for.cond
  store i8 0, i8* %blockret2, align 1
  br label %expr_block.exit3

if.exit:                                          ; preds = %for.cond
  %21 = load i32*, i32** %value, align 8
  %22 = load %FooIterator*, %FooIterator** %it, align 8
  %23 = getelementptr inbounds %FooIterator, %FooIterator* %22, i32 0, i32 1
  %24 = load %Foo*, %Foo** %23, align 8
  %25 = getelementptr inbounds %Foo, %Foo* %24, i32 0, i32 0
  %26 = getelementptr inbounds %"int[]", %"int[]"* %25, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = load %FooIterator*, %FooIterator** %it, align 8
  %29 = getelementptr inbounds %FooIterator, %FooIterator* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %add = add i64 %30, 1
  store i64 %add, i64* %29, align 8
  %ptroffset = getelementptr inbounds i32, i32* %27, i64 %30
  %31 = load i32, i32* %ptroffset, align 4
  store i32 %31, i32* %21, align 8
  store i8 1, i8* %blockret2, align 1
  br label %expr_block.exit3

expr_block.exit3:                                 ; preds = %if.exit, %if.then
  %32 = load i8, i8* %blockret2, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %for.body, label %for.exit

for.body:                                         ; preds = %expr_block.exit3
  %34 = load i32, i32* %f, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %34)
  br label %while.begin

while.begin:                                      ; preds = %for.body
  br label %for.exit

for.exit:                                         ; preds = %while.begin, %expr_block.exit3
  ret void
}