// #target: x64-darwin
module test;

extern fn void printf(char*, ...);

fn void main()
{
    float[3] foo = { 2, 4.5, 8 };
    float[<3>] foo2 = { 2, 4.5, 8 };
    foreach (a : foo)
    {
        printf("Value: %f\n", a);
    }
    foreach (float* &a : foo)
    {
        *a *= 2;
        printf("Value: %f\n", *a);
    }
    foreach (void* &a : foo)
    {
        printf("Value: %f\n", *((float*)(a)));
    }
    foreach (i, a : foo)
    {
        printf("Value[%d]: %f\n", i, a);
    }
    foreach (char i, double a : foo)
    {
        printf("Value2[%d]: %f\n", i, a);
    }
    foreach (double a : foo)
    {
        printf("Value3: %f\n", a);
    }

    foreach (a : foo2)
    {
        printf("Value: %f\n", a);
    }
    foreach (i, a : foo2)
    {
        printf("Value[%d]: %f\n", i, a);
    }
    foreach (char i, double a : foo2)
    {
        printf("Value2[%d]: %f\n", i, a);
    }
    foreach (double a : foo2)
    {
        printf("Value3: %f\n", a);
    }
}

/* #expect: test.ll

entry:
  %foo = alloca [3 x float], align 4
  %anon = alloca i64, align 8
  %a = alloca float, align 4
  %anon1 = alloca i64, align 8
  %a5 = alloca float*, align 8
  %anon9 = alloca i64, align 8
  %a13 = alloca i8*, align 8
  %anon18 = alloca i64, align 8
  %i = alloca i64, align 8
  %a22 = alloca float, align 4
  %anon26 = alloca i64, align 8
  %i30 = alloca i8, align 1
  %a31 = alloca double, align 8
  %anon35 = alloca i64, align 8
  %a39 = alloca double, align 8
  %0 = bitcast [3 x float]* %foo to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x float]* @.__const to i8*), i32 12, i1 false)
  store i64 0, i64* %anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %1 = load i64, i64* %anon, align 8
  %gt = icmp ugt i64 3, %1
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %2 = load i64, i64* %anon, align 8
  %3 = getelementptr inbounds [3 x float], [3 x float]* %foo, i64 0, i64 %2
  %4 = load float, float* %3, align 4
  store float %4, float* %a, align 4
  %5 = load float, float* %a, align 4
  %fpfpext = fpext float %5 to double
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), double %fpfpext)
  %6 = load i64, i64* %anon, align 8
  %add = add i64 %6, 1
  store i64 %add, i64* %anon, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i64 0, i64* %anon1, align 8
  br label %loop.cond2

loop.cond2:                                       ; preds = %loop.body4, %loop.exit
  %7 = load i64, i64* %anon1, align 8
  %gt3 = icmp ugt i64 3, %7
  br i1 %gt3, label %loop.body4, label %loop.exit8

loop.body4:                                       ; preds = %loop.cond2
  %8 = load i64, i64* %anon1, align 8
  %9 = getelementptr inbounds [3 x float], [3 x float]* %foo, i64 0, i64 %8
  store float* %9, float** %a5, align 8
  %10 = load float*, float** %a5, align 8
  %11 = load float, float* %10, align 8
  %fmul = fmul float %11, 2.000000e+00
  store float %fmul, float* %10, align 8
  %12 = load float*, float** %a5, align 8
  %13 = load float, float* %12, align 8
  %fpfpext6 = fpext float %13 to double
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), double %fpfpext6)
  %14 = load i64, i64* %anon1, align 8
  %add7 = add i64 %14, 1
  store i64 %add7, i64* %anon1, align 8
  br label %loop.cond2

loop.exit8:                                       ; preds = %loop.cond2
  store i64 0, i64* %anon9, align 8
  br label %loop.cond10

loop.cond10:                                      ; preds = %loop.body12, %loop.exit8
  %15 = load i64, i64* %anon9, align 8
  %gt11 = icmp ugt i64 3, %15
  br i1 %gt11, label %loop.body12, label %loop.exit17

loop.body12:                                      ; preds = %loop.cond10
  %16 = load i64, i64* %anon9, align 8
  %17 = getelementptr inbounds [3 x float], [3 x float]* %foo, i64 0, i64 %16
  %ptrptr = bitcast float* %17 to i8*
  store i8* %ptrptr, i8** %a13, align 8
  %18 = load i8*, i8** %a13, align 8
  %ptrptr14 = bitcast i8* %18 to float*
  %19 = load float, float* %ptrptr14, align 8
  %fpfpext15 = fpext float %19 to double
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), double %fpfpext15)
  %20 = load i64, i64* %anon9, align 8
  %add16 = add i64 %20, 1
  store i64 %add16, i64* %anon9, align 8
  br label %loop.cond10

loop.exit17:                                      ; preds = %loop.cond10
  store i64 0, i64* %anon18, align 8
  br label %loop.cond19

loop.cond19:                                      ; preds = %loop.body21, %loop.exit17
  %21 = load i64, i64* %anon18, align 8
  %gt20 = icmp ugt i64 3, %21
  br i1 %gt20, label %loop.body21, label %loop.exit25

loop.body21:                                      ; preds = %loop.cond19
  %22 = load i64, i64* %anon18, align 8
  store i64 %22, i64* %i, align 8
  %23 = load i64, i64* %anon18, align 8
  %24 = getelementptr inbounds [3 x float], [3 x float]* %foo, i64 0, i64 %23
  %25 = load float, float* %24, align 4
  store float %25, float* %a22, align 4
  %26 = load i64, i64* %i, align 8
  %27 = load float, float* %a22, align 4
  %fpfpext23 = fpext float %27 to double
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i64 %26, double %fpfpext23)
  %28 = load i64, i64* %anon18, align 8
  %add24 = add i64 %28, 1
  store i64 %add24, i64* %anon18, align 8
  br label %loop.cond19

loop.exit25:                                      ; preds = %loop.cond19
  store i64 0, i64* %anon26, align 8
  br label %loop.cond27

loop.cond27:                                      ; preds = %loop.body29, %loop.exit25
  %29 = load i64, i64* %anon26, align 8
  %gt28 = icmp ugt i64 3, %29
  br i1 %gt28, label %loop.body29, label %loop.exit34

loop.body29:                                      ; preds = %loop.cond27
  %30 = load i64, i64* %anon26, align 8
  %uiuitrunc = trunc i64 %30 to i8
  store i8 %uiuitrunc, i8* %i30, align 1
  %31 = load i64, i64* %anon26, align 8
  %32 = getelementptr inbounds [3 x float], [3 x float]* %foo, i64 0, i64 %31
  %33 = load float, float* %32, align 4
  %fpfpext32 = fpext float %33 to double
  store double %fpfpext32, double* %a31, align 8
  %34 = load i8, i8* %i30, align 1
  %uisiext = zext i8 %34 to i32
  %35 = load double, double* %a31, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i32 0, i32 0), i32 %uisiext, double %35)
  %36 = load i64, i64* %anon26, align 8
  %add33 = add i64 %36, 1
  store i64 %add33, i64* %anon26, align 8
  br label %loop.cond27

loop.exit34:                                      ; preds = %loop.cond27
  store i64 0, i64* %anon35, align 8
  br label %loop.cond36

loop.cond36:                                      ; preds = %loop.body38, %loop.exit34
  %37 = load i64, i64* %anon35, align 8
  %gt37 = icmp ugt i64 3, %37
  br i1 %gt37, label %loop.body38, label %loop.exit42

loop.body38:                                      ; preds = %loop.cond36
  %38 = load i64, i64* %anon35, align 8
  %39 = getelementptr inbounds [3 x float], [3 x float]* %foo, i64 0, i64 %38
  %40 = load float, float* %39, align 4
  %fpfpext40 = fpext float %40 to double
  store double %fpfpext40, double* %a39, align 8
  %41 = load double, double* %a39, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), double %41)
  %42 = load i64, i64* %anon35, align 8
  %add41 = add i64 %42, 1
  store i64 %add41, i64* %anon35, align 8
  br label %loop.cond36

loop.exit42:                                      ; preds = %loop.cond36
  ret void
}