// #target: macos-x64
module test;

extern fn void printf(char*, ...);

fn void main()
{
    float[3] foo = { 2, 4.5, 8 };
    float[<3>] foo2 = { 2, 4.5, 8 };
    foreach (a : foo)
    {
        printf("Value: %f\n", a);
    }
    foreach (float* &a : foo)
    {
        *a *= 2;
        printf("Value: %f\n", *a);
    }
    foreach (void* &a : foo)
    {
        printf("Value: %f\n", *((float*)(a)));
    }
    foreach (i, a : foo)
    {
        printf("Value[%d]: %f\n", i, a);
    }
    foreach (char i, double a : foo)
    {
        printf("Value2[%d]: %f\n", i, a);
    }
    foreach (double a : foo)
    {
        printf("Value3: %f\n", a);
    }

    foreach (a : foo2)
    {
        printf("Value: %f\n", a);
    }
    foreach (float* &a : foo2)
    {
        *a *= 2;
        printf("Value: %f\n", *a);
    }
    foreach (i, a : foo2)
    {
        printf("Value[%d]: %f\n", i, a);
    }
    foreach (char i, double a : foo2)
    {
        printf("Value2[%d]: %f\n", i, a);
    }
    foreach (double a : foo2)
    {
        printf("Value3: %f\n", a);
    }
}

/* #expect: test.ll

entry:
  %foo = alloca [3 x float], align 4
  %foo2 = alloca <3 x float>, align 16
  %.anon = alloca i64, align 8
  %a = alloca float, align 4
  %.anon1 = alloca i64, align 8
  %a5 = alloca ptr, align 8
  %.anon9 = alloca i64, align 8
  %a13 = alloca ptr, align 8
  %.anon17 = alloca i64, align 8
  %i = alloca i64, align 8
  %a21 = alloca float, align 4
  %.anon25 = alloca i64, align 8
  %i29 = alloca i8, align 1
  %a30 = alloca double, align 8
  %.anon34 = alloca i64, align 8
  %a38 = alloca double, align 8
  %.anon42 = alloca i64, align 8
  %.anon43 = alloca i64, align 8
  %a46 = alloca float, align 4
  %.anon50 = alloca i64, align 8
  %.anon51 = alloca i64, align 8
  %a55 = alloca ptr, align 8
  %.anon60 = alloca i64, align 8
  %.anon61 = alloca i64, align 8
  %i65 = alloca i64, align 8
  %a66 = alloca float, align 4
  %.anon70 = alloca i64, align 8
  %.anon71 = alloca i64, align 8
  %i75 = alloca i8, align 1
  %a77 = alloca double, align 8
  %.anon82 = alloca i64, align 8
  %.anon83 = alloca i64, align 8
  %a87 = alloca double, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %foo, ptr align 4 @.__const, i32 12, i1 false)
  store <3 x float> <float 2.000000e+00, float 4.500000e+00, float 8.000000e+00>, ptr %foo2, align 16
  store i64 0, ptr %.anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %0 = load i64, ptr %.anon, align 8
  %gt = icmp ugt i64 3, %0
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %1 = load i64, ptr %.anon, align 8
  %2 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %1
  %3 = load float, ptr %2, align 4
  store float %3, ptr %a, align 4
  %4 = load float, ptr %a, align 4
  %fpfpext = fpext float %4 to double
  call void (ptr, ...) @printf(ptr @.str, double %fpfpext)
  %5 = load i64, ptr %.anon, align 8
  %add = add i64 %5, 1
  store i64 %add, ptr %.anon, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond2

loop.cond2:                                       ; preds = %loop.body4, %loop.exit
  %6 = load i64, ptr %.anon1, align 8
  %gt3 = icmp ugt i64 3, %6
  br i1 %gt3, label %loop.body4, label %loop.exit8

loop.body4:                                       ; preds = %loop.cond2
  %7 = load i64, ptr %.anon1, align 8
  %8 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %7
  store ptr %8, ptr %a5, align 8
  %9 = load ptr, ptr %a5, align 8
  %10 = load float, ptr %9, align 4
  %fmul = fmul float %10, 2.000000e+00
  store float %fmul, ptr %9, align 4
  %11 = load ptr, ptr %a5, align 8
  %12 = load float, ptr %11, align 4
  %fpfpext6 = fpext float %12 to double
  call void (ptr, ...) @printf(ptr @.str.1, double %fpfpext6)
  %13 = load i64, ptr %.anon1, align 8
  %add7 = add i64 %13, 1
  store i64 %add7, ptr %.anon1, align 8
  br label %loop.cond2

loop.exit8:                                       ; preds = %loop.cond2
  store i64 0, ptr %.anon9, align 8
  br label %loop.cond10

loop.cond10:                                      ; preds = %loop.body12, %loop.exit8
  %14 = load i64, ptr %.anon9, align 8
  %gt11 = icmp ugt i64 3, %14
  br i1 %gt11, label %loop.body12, label %loop.exit16

loop.body12:                                      ; preds = %loop.cond10
  %15 = load i64, ptr %.anon9, align 8
  %16 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %15
  store ptr %16, ptr %a13, align 8
  %17 = load ptr, ptr %a13, align 8
  %18 = load float, ptr %17, align 4
  %fpfpext14 = fpext float %18 to double
  call void (ptr, ...) @printf(ptr @.str.2, double %fpfpext14)
  %19 = load i64, ptr %.anon9, align 8
  %add15 = add i64 %19, 1
  store i64 %add15, ptr %.anon9, align 8
  br label %loop.cond10

loop.exit16:                                      ; preds = %loop.cond10
  store i64 0, ptr %.anon17, align 8
  br label %loop.cond18

loop.cond18:                                      ; preds = %loop.body20, %loop.exit16
  %20 = load i64, ptr %.anon17, align 8
  %gt19 = icmp ugt i64 3, %20
  br i1 %gt19, label %loop.body20, label %loop.exit24

loop.body20:                                      ; preds = %loop.cond18
  %21 = load i64, ptr %.anon17, align 8
  store i64 %21, ptr %i, align 8
  %22 = load i64, ptr %.anon17, align 8
  %23 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %22
  %24 = load float, ptr %23, align 4
  store float %24, ptr %a21, align 4
  %25 = load float, ptr %a21, align 4
  %fpfpext22 = fpext float %25 to double
  %26 = load i64, ptr %i, align 8
  call void (ptr, ...) @printf(ptr @.str.3, i64 %26, double %fpfpext22)
  %27 = load i64, ptr %.anon17, align 8
  %add23 = add i64 %27, 1
  store i64 %add23, ptr %.anon17, align 8
  br label %loop.cond18

loop.exit24:                                      ; preds = %loop.cond18
  store i64 0, ptr %.anon25, align 8
  br label %loop.cond26

loop.cond26:                                      ; preds = %loop.body28, %loop.exit24
  %28 = load i64, ptr %.anon25, align 8
  %gt27 = icmp ugt i64 3, %28
  br i1 %gt27, label %loop.body28, label %loop.exit33

loop.body28:                                      ; preds = %loop.cond26
  %29 = load i64, ptr %.anon25, align 8
  %trunc = trunc i64 %29 to i8
  store i8 %trunc, ptr %i29, align 1
  %30 = load i64, ptr %.anon25, align 8
  %31 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %30
  %32 = load float, ptr %31, align 4
  %fpfpext31 = fpext float %32 to double
  store double %fpfpext31, ptr %a30, align 8
  %33 = load i8, ptr %i29, align 1
  %zext = zext i8 %33 to i32
  %34 = load double, ptr %a30, align 8
  call void (ptr, ...) @printf(ptr @.str.4, i32 %zext, double %34)
  %35 = load i64, ptr %.anon25, align 8
  %add32 = add i64 %35, 1
  store i64 %add32, ptr %.anon25, align 8
  br label %loop.cond26

loop.exit33:                                      ; preds = %loop.cond26
  store i64 0, ptr %.anon34, align 8
  br label %loop.cond35

loop.cond35:                                      ; preds = %loop.body37, %loop.exit33
  %36 = load i64, ptr %.anon34, align 8
  %gt36 = icmp ugt i64 3, %36
  br i1 %gt36, label %loop.body37, label %loop.exit41

loop.body37:                                      ; preds = %loop.cond35
  %37 = load i64, ptr %.anon34, align 8
  %38 = getelementptr inbounds [3 x float], ptr %foo, i64 0, i64 %37
  %39 = load float, ptr %38, align 4
  %fpfpext39 = fpext float %39 to double
  store double %fpfpext39, ptr %a38, align 8
  %40 = load double, ptr %a38, align 8
  call void (ptr, ...) @printf(ptr @.str.5, double %40)
  %41 = load i64, ptr %.anon34, align 8
  %add40 = add i64 %41, 1
  store i64 %add40, ptr %.anon34, align 8
  br label %loop.cond35

loop.exit41:                                      ; preds = %loop.cond35
  store i64 3, ptr %.anon42, align 8
  store i64 0, ptr %.anon43, align 8
  br label %loop.cond44

loop.cond44:                                      ; preds = %loop.body45, %loop.exit41
  %42 = load i64, ptr %.anon43, align 8
  %43 = load i64, ptr %.anon42, align 8
  %lt = icmp ult i64 %42, %43
  br i1 %lt, label %loop.body45, label %loop.exit49

loop.body45:                                      ; preds = %loop.cond44
  %44 = load <3 x float>, ptr %foo2, align 16
  %45 = load i64, ptr %.anon43, align 8
  %46 = extractelement <3 x float> %44, i64 %45
  store float %46, ptr %a46, align 4
  %47 = load float, ptr %a46, align 4
  %fpfpext47 = fpext float %47 to double
  call void (ptr, ...) @printf(ptr @.str.6, double %fpfpext47)
  %48 = load i64, ptr %.anon43, align 8
  %add48 = add i64 %48, 1
  store i64 %add48, ptr %.anon43, align 8
  br label %loop.cond44

loop.exit49:                                      ; preds = %loop.cond44
  store i64 3, ptr %.anon50, align 8
  store i64 0, ptr %.anon51, align 8
  br label %loop.cond52

loop.cond52:                                      ; preds = %loop.body54, %loop.exit49
  %49 = load i64, ptr %.anon51, align 8
  %50 = load i64, ptr %.anon50, align 8
  %lt53 = icmp ult i64 %49, %50
  br i1 %lt53, label %loop.body54, label %loop.exit59

loop.body54:                                      ; preds = %loop.cond52
  %51 = load i64, ptr %.anon51, align 8
  %52 = getelementptr inbounds <3 x float>, ptr %foo2, i64 0, i64 %51
  store ptr %52, ptr %a55, align 8
  %53 = load ptr, ptr %a55, align 8
  %54 = load float, ptr %53, align 4
  %fmul56 = fmul float %54, 2.000000e+00
  store float %fmul56, ptr %53, align 4
  %55 = load ptr, ptr %a55, align 8
  %56 = load float, ptr %55, align 4
  %fpfpext57 = fpext float %56 to double
  call void (ptr, ...) @printf(ptr @.str.7, double %fpfpext57)
  %57 = load i64, ptr %.anon51, align 8
  %add58 = add i64 %57, 1
  store i64 %add58, ptr %.anon51, align 8
  br label %loop.cond52

loop.exit59:                                      ; preds = %loop.cond52
  store i64 3, ptr %.anon60, align 8
  store i64 0, ptr %.anon61, align 8
  br label %loop.cond62

loop.cond62:                                      ; preds = %loop.body64, %loop.exit59
  %58 = load i64, ptr %.anon61, align 8
  %59 = load i64, ptr %.anon60, align 8
  %lt63 = icmp ult i64 %58, %59
  br i1 %lt63, label %loop.body64, label %loop.exit69

loop.body64:                                      ; preds = %loop.cond62
  %60 = load i64, ptr %.anon61, align 8
  store i64 %60, ptr %i65, align 8
  %61 = load <3 x float>, ptr %foo2, align 16
  %62 = load i64, ptr %.anon61, align 8
  %63 = extractelement <3 x float> %61, i64 %62
  store float %63, ptr %a66, align 4
  %64 = load float, ptr %a66, align 4
  %fpfpext67 = fpext float %64 to double
  %65 = load i64, ptr %i65, align 8
  call void (ptr, ...) @printf(ptr @.str.8, i64 %65, double %fpfpext67)
  %66 = load i64, ptr %.anon61, align 8
  %add68 = add i64 %66, 1
  store i64 %add68, ptr %.anon61, align 8
  br label %loop.cond62

loop.exit69:                                      ; preds = %loop.cond62
  store i64 3, ptr %.anon70, align 8
  store i64 0, ptr %.anon71, align 8
  br label %loop.cond72

loop.cond72:                                      ; preds = %loop.body74, %loop.exit69
  %67 = load i64, ptr %.anon71, align 8
  %68 = load i64, ptr %.anon70, align 8
  %lt73 = icmp ult i64 %67, %68
  br i1 %lt73, label %loop.body74, label %loop.exit81

loop.body74:                                      ; preds = %loop.cond72
  %69 = load i64, ptr %.anon71, align 8
  %trunc76 = trunc i64 %69 to i8
  store i8 %trunc76, ptr %i75, align 1
  %70 = load <3 x float>, ptr %foo2, align 16
  %71 = load i64, ptr %.anon71, align 8
  %72 = extractelement <3 x float> %70, i64 %71
  %fpfpext78 = fpext float %72 to double
  store double %fpfpext78, ptr %a77, align 8
  %73 = load i8, ptr %i75, align 1
  %zext79 = zext i8 %73 to i32
  %74 = load double, ptr %a77, align 8
  call void (ptr, ...) @printf(ptr @.str.9, i32 %zext79, double %74)
  %75 = load i64, ptr %.anon71, align 8
  %add80 = add i64 %75, 1
  store i64 %add80, ptr %.anon71, align 8
  br label %loop.cond72

loop.exit81:                                      ; preds = %loop.cond72
  store i64 3, ptr %.anon82, align 8
  store i64 0, ptr %.anon83, align 8
  br label %loop.cond84

loop.cond84:                                      ; preds = %loop.body86, %loop.exit81
  %76 = load i64, ptr %.anon83, align 8
  %77 = load i64, ptr %.anon82, align 8
  %lt85 = icmp ult i64 %76, %77
  br i1 %lt85, label %loop.body86, label %loop.exit90

loop.body86:                                      ; preds = %loop.cond84
  %78 = load <3 x float>, ptr %foo2, align 16
  %79 = load i64, ptr %.anon83, align 8
  %80 = extractelement <3 x float> %78, i64 %79
  %fpfpext88 = fpext float %80 to double
  store double %fpfpext88, ptr %a87, align 8
  %81 = load double, ptr %a87, align 8
  call void (ptr, ...) @printf(ptr @.str.10, double %81)
  %82 = load i64, ptr %.anon83, align 8
  %add89 = add i64 %82, 1
  store i64 %add89, ptr %.anon83, align 8
  br label %loop.cond84

loop.exit90:                                      ; preds = %loop.cond84
  ret void
}
