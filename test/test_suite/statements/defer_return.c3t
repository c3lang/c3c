// #target: x64-darwin
module test;
fn void test1() {}
fn void test2() {}
fn void test3() {}
fn void test4() {}
fn void test5() {}
fn void test6() {}
fn void test7() {}
fn void test8() {}
fn void test9() {}

fn int main(int argc, char **argv)
{
    defer test1();
    int a = 0;
    while (a)
    {
	    defer test2();
        if (argc == 1) return a + argc;
        defer test3();
        test4();
    }
    defer test5();
    while (a)
    {
        defer test6();
        if (argc == 1) return a + 2;
        defer test7();
		test8();
		return 2 + 2;
        defer test9();
    }
    return 0 + argc;
}

/* #expect: test.ll

define i32 @main(i32 %0, i8** %1) #0 {
entry:
  %argc = alloca i32, align 4
  %argv = alloca i8**, align 8
  %a = alloca i32, align 4
  store i32 %0, i32* %argc, align 4
  store i8** %1, i8*** %argv, align 8
  store i32 0, i32* %a, align 4
  br label %loop.cond

loop.cond:                                        ; preds = %exit3, %entry
  %2 = load i32, i32* %a, align 4
  %intbool = icmp ne i32 %2, 0
  br i1 %intbool, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %3 = load i32, i32* %argc, align 4
  %eq = icmp eq i32 %3, 1
  br i1 %eq, label %if.then, label %if.exit

if.then:                                          ; preds = %loop.body
  %4 = load i32, i32* %a, align 4
  %5 = load i32, i32* %argc, align 4
  %add = add i32 %4, %5
  call void @test.test2()
  br label %exit

exit:                                             ; preds = %if.then
  call void @test.test1()
  br label %exit1

exit1:                                            ; preds = %exit
  ret i32 %add

if.exit:                                          ; preds = %loop.body
  call void @test.test4()
  call void @test.test3()
  br label %exit2

exit2:                                            ; preds = %if.exit
  call void @test.test2()
  br label %exit3

exit3:                                            ; preds = %exit2
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond4

loop.cond4:                                       ; preds = %loop.exit
  %6 = load i32, i32* %a, align 4
  %intbool5 = icmp ne i32 %6, 0
  br i1 %intbool5, label %loop.body6, label %loop.exit21

loop.body6:                                       ; preds = %loop.cond4
  %7 = load i32, i32* %argc, align 4
  %eq7 = icmp eq i32 %7, 1
  br i1 %eq7, label %if.then8, label %if.exit13

if.then8:                                         ; preds = %loop.body6
  %8 = load i32, i32* %a, align 4
  %add9 = add i32 %8, 2
  call void @test.test6()
  br label %exit10

exit10:                                           ; preds = %if.then8
  call void @test.test5()
  br label %exit11

exit11:                                           ; preds = %exit10
  call void @test.test1()
  br label %exit12

exit12:                                           ; preds = %exit11
  ret i32 %add9

if.exit13:                                        ; preds = %loop.body6
  call void @test.test8()
  call void @test.test7()
  br label %exit14

exit14:                                           ; preds = %if.exit13
  call void @test.test6()
  br label %exit15

exit15:                                           ; preds = %exit14
  call void @test.test5()
  br label %exit16

exit16:                                           ; preds = %exit15
  call void @test.test1()
  br label %exit17

exit17:                                           ; preds = %exit16
  ret i32 4

loop.exit21:                                      ; preds = %loop.cond4
  %9 = load i32, i32* %argc, align 4
  %add22 = add i32 0, %9
  call void @test.test5()
  br label %exit23

exit23:                                           ; preds = %loop.exit21
  call void @test.test1()
  br label %exit24

exit24:                                           ; preds = %exit23
  ret i32 %add22
}
