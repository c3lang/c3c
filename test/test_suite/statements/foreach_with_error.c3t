module test;

func void test()
{
    int[3]! x;
    int g;
    foreach (z : x)
    {
        g += z;
        x[0] = 1;
    }
}

// #expect: foreach_with_error.ll

entry:
  %x = alloca [3 x i32], align 4
  %x1 = alloca { i64, i64 }, align 8
  %g = alloca i32, align 4
  %idx = alloca i64, align 8
  %z = alloca i32, align 4
  store { i64, i64 } zeroinitializer, { i64, i64 }* %x1, align 8
  %0 = bitcast [3 x i32]* %x to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 12, i1 false)
  store i32 0, i32* %g, align 4
  %1 = load { i64, i64 }, { i64, i64 }* %x1, align 8
  %2 = extractvalue { i64, i64 } %1, 0
  %noerr = icmp eq i64 %2, 0
  br i1 %noerr, label %after_check, label %foreach.exit

after_check:
  store i64 0, i64* %idx, align 8
  br label %foreach.cond

foreach.cond:
  %3 = load i64, i64* %idx, align 8
  %lt = icmp ult i64 %3, 3
  br i1 %lt, label %foreach.body, label %foreach.exit

foreach.body:
  %4 = getelementptr inbounds i32, [3 x i32]* %x, i64 %3
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %z, align 4
  %6 = load i32, i32* %g, align 4
  %7 = load i32, i32* %z, align 4
  %add = add nsw i32 %6, %7
  store i32 %add, i32* %g, align 4
  %8 = load { i64, i64 }, { i64, i64 }* %x1, align 8
  %9 = extractvalue { i64, i64 } %8, 0
  %noerr2 = icmp eq i64 %9, 0
  br i1 %noerr2, label %after_check3, label %voiderr

after_check3:
  %arridx = getelementptr inbounds [3 x i32], [3 x i32]* %x, i32 0, i32 0
  store i32 1, i32* %arridx, align 4
  br label %voiderr

voiderr:
  br label %foreach.inc

foreach.inc:
  %10 = load i64, i64* %idx, align 8
  %11 = add i64 %10, 1
  store i64 %11, i64* %idx, align 8
  br label %foreach.cond

foreach.exit:
  ret void
