// #target: macos-x64
module test;

import std::io;
struct Vector
{
    usz size;
    int* elements;
}

macro int Vector.get(Vector* vector, usz element) @operator([])
{
    return vector.elements[element];
}

macro int* Vector.get_ref(Vector* vector, usz element) @operator(&[])
{
    return &vector.elements[element];
}

macro usz Vector.size(Vector vector) @operator(len) {
    return vector.size;
}

fn void main()
{
	int[2] x = { 1, 2 };
    Vector v = { 2, &x };

    foreach (int* &ref : v)
    {
        std::io::printf("%d\n", *ref);
        *ref += 2;
    }
    foreach (int i : v)
    {
        std::io::printf("%d\n", i);
    }
}

/* #expect: test.ll

define void @test.main() #0 {
entry:
  %x = alloca [2 x i32], align 4
  %v = alloca %Vector, align 8
  %.anon = alloca i64, align 8
  %vector = alloca %Vector, align 8
  %.anon1 = alloca i64, align 8
  %ref = alloca ptr, align 8
  %element = alloca i64, align 8
  %varargslots = alloca [1 x %"any*"], align 16
  %retparam = alloca i64, align 8
  %.anon4 = alloca i64, align 8
  %vector5 = alloca %Vector, align 8
  %.anon6 = alloca i64, align 8
  %i = alloca i32, align 4
  %element10 = alloca i64, align 8
  %varargslots13 = alloca [1 x %"any*"], align 16
  %retparam14 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const, i32 8, i1 false)
  store i64 2, ptr %v, align 8
  %ptradd = getelementptr inbounds i8, ptr %v, i64 8
  store ptr %x, ptr %ptradd, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %vector, ptr align 8 %v, i32 16, i1 false)
  %0 = load i64, ptr %vector, align 8
  store i64 %0, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %1 = load i64, ptr %.anon1, align 8
  %2 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %1, %2
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %3 = load i64, ptr %.anon1, align 8
  store i64 %3, ptr %element, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %v, i64 8
  %4 = load ptr, ptr %ptradd2, align 8
  %5 = load i64, ptr %element, align 8
  %ptroffset = getelementptr inbounds [4 x i8], ptr %4, i64 %5
  store ptr %ptroffset, ptr %ref, align 8
  %6 = load ptr, ptr %ref, align 8
  %7 = insertvalue %"any*" undef, ptr %6, 0
  %8 = insertvalue %"any*" %7, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %8, ptr %varargslots, align 16
  %9 = call i64 @std.io.printf(ptr %retparam, ptr @.str, i64 3, ptr %varargslots, i64 1)
  %10 = load ptr, ptr %ref, align 8
  %11 = load i32, ptr %10, align 4
  %add = add i32 %11, 2
  store i32 %add, ptr %10, align 4
  %12 = load i64, ptr %.anon1, align 8
  %add3 = add i64 %12, 1
  store i64 %add3, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %vector5, ptr align 8 %v, i32 16, i1 false)
  %13 = load i64, ptr %vector5, align 8
  store i64 %13, ptr %.anon4, align 8
  store i64 0, ptr %.anon6, align 8
  br label %loop.cond7

loop.cond7:                                       ; preds = %loop.body9, %loop.exit
  %14 = load i64, ptr %.anon6, align 8
  %15 = load i64, ptr %.anon4, align 8
  %lt8 = icmp ult i64 %14, %15
  br i1 %lt8, label %loop.body9, label %loop.exit16

loop.body9:                                       ; preds = %loop.cond7
  %16 = load i64, ptr %.anon6, align 8
  store i64 %16, ptr %element10, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %v, i64 8
  %17 = load ptr, ptr %ptradd11, align 8
  %18 = load i64, ptr %element10, align 8
  %ptroffset12 = getelementptr inbounds [4 x i8], ptr %17, i64 %18
  %19 = load i32, ptr %ptroffset12, align 4
  store i32 %19, ptr %i, align 4
  %20 = insertvalue %"any*" undef, ptr %i, 0
  %21 = insertvalue %"any*" %20, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %21, ptr %varargslots13, align 16
  %22 = call i64 @std.io.printf(ptr %retparam14, ptr @.str.1, i64 3, ptr %varargslots13, i64 1)
  %23 = load i64, ptr %.anon6, align 8
  %add15 = add i64 %23, 1
  store i64 %add15, ptr %.anon6, align 8
  br label %loop.cond7

loop.exit16:                                      ; preds = %loop.cond7
  ret void
}