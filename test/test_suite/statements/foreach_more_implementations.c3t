// #target: macos-x64
module test;

import std::io;
struct Vector
{
    usz size;
    int* elements;
}

macro int Vector.get(Vector* vector, usz element) @operator([])
{
    return vector.elements[element];
}

macro int* Vector.get_ref(Vector* vector, usz element) @operator(&[])
{
    return &vector.elements[element];
}

macro usz Vector.size(Vector vector) @operator(len) {
    return vector.size;
}

fn void main()
{
	int[2] x = { 1, 2 };
    Vector v = { 2, &x };

    foreach (int* &ref : v)
    {
        std::io::printf("%d\n", *ref);
        *ref += 2;
    }
    foreach (int i : v)
    {
        std::io::printf("%d\n", i);
    }
}

/* #expect: test.ll

define void @test.main() #0 {
entry:
  %x = alloca [2 x i32], align 4
  %v = alloca %Vector, align 8
  %.anon = alloca i64, align 8
  %vector = alloca %Vector, align 8
  %.anon1 = alloca i64, align 8
  %ref = alloca ptr, align 8
  %element = alloca i64, align 8
  %varargslots = alloca [1 x %"any*"], align 16
  %retparam = alloca i64, align 8
  %.anon3 = alloca i64, align 8
  %vector4 = alloca %Vector, align 8
  %.anon5 = alloca i64, align 8
  %i = alloca i32, align 4
  %element9 = alloca i64, align 8
  %varargslots11 = alloca [1 x %"any*"], align 16
  %retparam12 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const, i32 8, i1 false)
  %0 = getelementptr inbounds %Vector, ptr %v, i32 0, i32 0
  store i64 2, ptr %0, align 8
  %1 = getelementptr inbounds %Vector, ptr %v, i32 0, i32 1
  store ptr %x, ptr %1, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %vector, ptr align 8 %v, i32 16, i1 false)
  %2 = getelementptr inbounds %Vector, ptr %vector, i32 0, i32 0
  %3 = load i64, ptr %2, align 8
  store i64 %3, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %4 = load i64, ptr %.anon1, align 8
  %5 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %4, %5
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %.anon1, align 8
  store i64 %6, ptr %element, align 8
  %7 = getelementptr inbounds %Vector, ptr %v, i32 0, i32 1
  %8 = load ptr, ptr %7, align 8
  %9 = load i64, ptr %element, align 8
  %ptroffset = getelementptr inbounds i32, ptr %8, i64 %9
  store ptr %ptroffset, ptr %ref, align 8
  %10 = load ptr, ptr %ref, align 8
  %11 = insertvalue %"any*" undef, ptr %10, 0
  %12 = insertvalue %"any*" %11, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %13 = getelementptr inbounds [1 x %"any*"], ptr %varargslots, i64 0, i64 0
  store %"any*" %12, ptr %13, align 16
  %14 = call i64 @std.io.printf(ptr %retparam, ptr @.str, i64 3, ptr %varargslots, i64 1)
  %15 = load ptr, ptr %ref, align 8
  %16 = load i32, ptr %15, align 4
  %add = add i32 %16, 2
  store i32 %add, ptr %15, align 4
  %17 = load i64, ptr %.anon1, align 8
  %add2 = add i64 %17, 1
  store i64 %add2, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %vector4, ptr align 8 %v, i32 16, i1 false)
  %18 = getelementptr inbounds %Vector, ptr %vector4, i32 0, i32 0
  %19 = load i64, ptr %18, align 8
  store i64 %19, ptr %.anon3, align 8
  store i64 0, ptr %.anon5, align 8
  br label %loop.cond6

loop.cond6:                                       ; preds = %loop.body8, %loop.exit
  %20 = load i64, ptr %.anon5, align 8
  %21 = load i64, ptr %.anon3, align 8
  %lt7 = icmp ult i64 %20, %21
  br i1 %lt7, label %loop.body8, label %loop.exit14

loop.body8:                                       ; preds = %loop.cond6
  %22 = load i64, ptr %.anon5, align 8
  store i64 %22, ptr %element9, align 8
  %23 = getelementptr inbounds %Vector, ptr %v, i32 0, i32 1
  %24 = load ptr, ptr %23, align 8
  %25 = load i64, ptr %element9, align 8
  %ptroffset10 = getelementptr inbounds i32, ptr %24, i64 %25
  %26 = load i32, ptr %ptroffset10, align 4
  store i32 %26, ptr %i, align 4
  %27 = insertvalue %"any*" undef, ptr %i, 0
  %28 = insertvalue %"any*" %27, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %29 = getelementptr inbounds [1 x %"any*"], ptr %varargslots11, i64 0, i64 0
  store %"any*" %28, ptr %29, align 16
  %30 = call i64 @std.io.printf(ptr %retparam12, ptr @.str.1, i64 3, ptr %varargslots11, i64 1)
  %31 = load i64, ptr %.anon5, align 8
  %add13 = add i64 %31, 1
  store i64 %add13, ptr %.anon5, align 8
  br label %loop.cond6

loop.exit14:                                      ; preds = %loop.cond6
  ret void
}