// #target: macos-x64
module foo;

struct Foo
{
    int[3] a;
}

extern fn void printf(char*, ...);

macro int* Foo.@operator_element_at_ref(Foo* &f, int a) @operator(&[])
{
    return &f.a[a];
}

macro int Foo.@operator_len(Foo* &f) @operator(len)
{
    return 3;
}

macro int Foo.@operator_element_at(Foo* &f, int a) @operator([])
{
    return f.a[a];
}

fn int[5] getFields()
{
    printf("getFields\n");
    return int[5] { 3, 5, 2, 10, 111};
}
fn Foo *call(Foo* f)
{
    printf("Call made\n");
    return f;
}
fn void main()
{
    Foo x = { { 1, 5, 7} };
    printf("%d %d %d\n", x[0], x[1], x[2]);
    foreach (i, int y : *call(&x))
    {
        printf("Hello %d: %d\n", i, y);
    }
    foreach (i, int* &y : x)
    {
        *y += 1;
        printf("Hello %d: %d\n", i, *y);
    }
    foreach (i, int y : x)
    {
        printf("After one %d: %d\n", i, y);
    }

    foreach (i, int y : &x)
    {
        printf("By pointer %d: %d\n", i, y);
    }

    foreach (i, int y : x)
    {
        printf("Adding %d: %d\n", i, y);
        i++;
    }

    foreach(i, y : int[5] { 1, 2, 10, 111, 123 } )
    {
        printf("Adding %d: %d\n", i, y);
        i++;
    }
    foreach(i, y : getFields() )
    {
        printf("Pull value %d: %d\n", i, y);
    }
    foreach(i, y : &&getFields())
    {
        printf("Pull value tempptr %d: %d\n", i, y);
    }
    printf("%d %d\n", x[0], x[1]);
    int* y = &x[1];
    *y += 1;
    printf("%d %d\n", x[0], x[1]);
}

/* #expect: foo.ll

%Foo = type { [3 x i32] }

@"$ct.foo.Foo" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 12, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [11 x i8] c"getFields\0A\00", align 1
@.__const = private unnamed_addr constant [5 x i32] [i32 3, i32 5, i32 2, i32 10, i32 111], align 16
@.str.1 = private unnamed_addr constant [11 x i8] c"Call made\0A\00", align 1
@.__const.2 = private unnamed_addr constant %Foo { [3 x i32] [i32 1, i32 5, i32 7] }, align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"%d %d %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Hello %d: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Hello %d: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"After one %d: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"By pointer %d: %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Adding %d: %d\0A\00", align 1
@.__const.9 = private unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 10, i32 111, i32 123], align 16
@.str.10 = private unnamed_addr constant [15 x i8] c"Adding %d: %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"Pull value %d: %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [27 x i8] c"Pull value tempptr %d: %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1

; Function Attrs:
declare void @printf(ptr, ...) #0

; Function Attrs:
define void @foo.getFields(ptr noalias sret([5 x i32]) align 4 %0) #0 {
entry:
  %literal = alloca [5 x i32], align 16
  call void (ptr, ...) @printf(ptr @.str)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal, ptr align 16 @.__const, i32 20, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %0, ptr align 4 %literal, i32 20, i1 false)
  ret void
}

; Function Attrs:
define ptr @foo.call(ptr %0) #0 {
entry:
  call void (ptr, ...) @printf(ptr @.str.1)
  ret ptr %0
}

; Function Attrs:
define void @foo.main() #0 {
entry:
  %x = alloca %Foo, align 4
  %.anon = alloca i32, align 4
  %i = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i32, align 4
  %.anon2 = alloca i32, align 4
  %i6 = alloca i32, align 4
  %y7 = alloca ptr, align 8
  %a8 = alloca i32, align 4
  %.anon13 = alloca i32, align 4
  %i17 = alloca i32, align 4
  %y18 = alloca i32, align 4
  %a19 = alloca i32, align 4
  %.anon24 = alloca i32, align 4
  %i28 = alloca i32, align 4
  %y29 = alloca i32, align 4
  %a30 = alloca i32, align 4
  %.anon35 = alloca i32, align 4
  %i39 = alloca i32, align 4
  %y40 = alloca i32, align 4
  %a41 = alloca i32, align 4
  %.anon47 = alloca [5 x i32], align 16
  %.anon48 = alloca i64, align 8
  %i51 = alloca i64, align 8
  %y52 = alloca i32, align 4
  %.anon56 = alloca [5 x i32], align 16
  %.anon57 = alloca i64, align 8
  %i61 = alloca i64, align 8
  %y62 = alloca i32, align 4
  %sretparam = alloca [5 x i32], align 4
  %.anon66 = alloca i64, align 8
  %i70 = alloca i64, align 8
  %y71 = alloca i32, align 4
  %y76 = alloca ptr, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const.2, i32 12, i1 false)
  %ptradd = getelementptr inbounds i8, ptr %x, i64 4
  %ptradd1 = getelementptr inbounds i8, ptr %x, i64 8
  %0 = load i32, ptr %x, align 4
  %1 = load i32, ptr %ptradd, align 4
  %2 = load i32, ptr %ptradd1, align 4
  call void (ptr, ...) @printf(ptr @.str.3, i32 %0, i32 %1, i32 %2)
  %3 = call ptr @foo.call(ptr %x)
  store i32 0, ptr %.anon, align 4
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %4 = load i32, ptr %.anon, align 4
  %lt = icmp slt i32 %4, 3
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %5 = load i32, ptr %.anon, align 4
  store i32 %5, ptr %i, align 4
  %6 = load i32, ptr %.anon, align 4
  store i32 %6, ptr %a, align 4
  %7 = load i32, ptr %a, align 4
  %sext = sext i32 %7 to i64
  %ptroffset = getelementptr inbounds [4 x i8], ptr %3, i64 %sext
  %8 = load i32, ptr %ptroffset, align 4
  store i32 %8, ptr %y, align 4
  %9 = load i32, ptr %i, align 4
  %10 = load i32, ptr %y, align 4
  call void (ptr, ...) @printf(ptr @.str.4, i32 %9, i32 %10)
  %11 = load i32, ptr %.anon, align 4
  %addnsw = add nsw i32 %11, 1
  store i32 %addnsw, ptr %.anon, align 4
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %.anon2, align 4
  br label %loop.cond3

loop.cond3:                                       ; preds = %loop.body5, %loop.exit
  %12 = load i32, ptr %.anon2, align 4
  %lt4 = icmp slt i32 %12, 3
  br i1 %lt4, label %loop.body5, label %loop.exit12

loop.body5:                                       ; preds = %loop.cond3
  %13 = load i32, ptr %.anon2, align 4
  store i32 %13, ptr %i6, align 4
  %14 = load i32, ptr %.anon2, align 4
  store i32 %14, ptr %a8, align 4
  %15 = load i32, ptr %a8, align 4
  %sext9 = sext i32 %15 to i64
  %ptroffset10 = getelementptr inbounds [4 x i8], ptr %x, i64 %sext9
  store ptr %ptroffset10, ptr %y7, align 8
  %16 = load ptr, ptr %y7, align 8
  %17 = load i32, ptr %16, align 4
  %add = add i32 %17, 1
  store i32 %add, ptr %16, align 4
  %18 = load ptr, ptr %y7, align 8
  %19 = load i32, ptr %i6, align 4
  %20 = load i32, ptr %18, align 4
  call void (ptr, ...) @printf(ptr @.str.5, i32 %19, i32 %20)
  %21 = load i32, ptr %.anon2, align 4
  %addnsw11 = add nsw i32 %21, 1
  store i32 %addnsw11, ptr %.anon2, align 4
  br label %loop.cond3

loop.exit12:                                      ; preds = %loop.cond3
  store i32 0, ptr %.anon13, align 4
  br label %loop.cond14

loop.cond14:                                      ; preds = %loop.body16, %loop.exit12
  %22 = load i32, ptr %.anon13, align 4
  %lt15 = icmp slt i32 %22, 3
  br i1 %lt15, label %loop.body16, label %loop.exit23

loop.body16:                                      ; preds = %loop.cond14
  %23 = load i32, ptr %.anon13, align 4
  store i32 %23, ptr %i17, align 4
  %24 = load i32, ptr %.anon13, align 4
  store i32 %24, ptr %a19, align 4
  %25 = load i32, ptr %a19, align 4
  %sext20 = sext i32 %25 to i64
  %ptroffset21 = getelementptr inbounds [4 x i8], ptr %x, i64 %sext20
  %26 = load i32, ptr %ptroffset21, align 4
  store i32 %26, ptr %y18, align 4
  %27 = load i32, ptr %i17, align 4
  %28 = load i32, ptr %y18, align 4
  call void (ptr, ...) @printf(ptr @.str.6, i32 %27, i32 %28)
  %29 = load i32, ptr %.anon13, align 4
  %addnsw22 = add nsw i32 %29, 1
  store i32 %addnsw22, ptr %.anon13, align 4
  br label %loop.cond14

loop.exit23:                                      ; preds = %loop.cond14
  store i32 0, ptr %.anon24, align 4
  br label %loop.cond25

loop.cond25:                                      ; preds = %loop.body27, %loop.exit23
  %30 = load i32, ptr %.anon24, align 4
  %lt26 = icmp slt i32 %30, 3
  br i1 %lt26, label %loop.body27, label %loop.exit34

loop.body27:                                      ; preds = %loop.cond25
  %31 = load i32, ptr %.anon24, align 4
  store i32 %31, ptr %i28, align 4
  %32 = load i32, ptr %.anon24, align 4
  store i32 %32, ptr %a30, align 4
  %33 = load i32, ptr %a30, align 4
  %sext31 = sext i32 %33 to i64
  %ptroffset32 = getelementptr inbounds [4 x i8], ptr %x, i64 %sext31
  %34 = load i32, ptr %ptroffset32, align 4
  store i32 %34, ptr %y29, align 4
  %35 = load i32, ptr %i28, align 4
  %36 = load i32, ptr %y29, align 4
  call void (ptr, ...) @printf(ptr @.str.7, i32 %35, i32 %36)
  %37 = load i32, ptr %.anon24, align 4
  %addnsw33 = add nsw i32 %37, 1
  store i32 %addnsw33, ptr %.anon24, align 4
  br label %loop.cond25

loop.exit34:                                      ; preds = %loop.cond25
  store i32 0, ptr %.anon35, align 4
  br label %loop.cond36

loop.cond36:                                      ; preds = %loop.body38, %loop.exit34
  %38 = load i32, ptr %.anon35, align 4
  %lt37 = icmp slt i32 %38, 3
  br i1 %lt37, label %loop.body38, label %loop.exit46

loop.body38:                                      ; preds = %loop.cond36
  %39 = load i32, ptr %.anon35, align 4
  store i32 %39, ptr %i39, align 4
  %40 = load i32, ptr %.anon35, align 4
  store i32 %40, ptr %a41, align 4
  %41 = load i32, ptr %a41, align 4
  %sext42 = sext i32 %41 to i64
  %ptroffset43 = getelementptr inbounds [4 x i8], ptr %x, i64 %sext42
  %42 = load i32, ptr %ptroffset43, align 4
  store i32 %42, ptr %y40, align 4
  %43 = load i32, ptr %i39, align 4
  %44 = load i32, ptr %y40, align 4
  call void (ptr, ...) @printf(ptr @.str.8, i32 %43, i32 %44)
  %45 = load i32, ptr %i39, align 4
  %add44 = add i32 %45, 1
  store i32 %add44, ptr %i39, align 4
  %46 = load i32, ptr %.anon35, align 4
  %addnsw45 = add nsw i32 %46, 1
  store i32 %addnsw45, ptr %.anon35, align 4
  br label %loop.cond36

loop.exit46:                                      ; preds = %loop.cond36
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %.anon47, ptr align 16 @.__const.9, i32 20, i1 false)
  store i64 0, ptr %.anon48, align 8
  br label %loop.cond49

loop.cond49:                                      ; preds = %loop.body50, %loop.exit46
  %47 = load i64, ptr %.anon48, align 8
  %gt = icmp ugt i64 5, %47
  br i1 %gt, label %loop.body50, label %loop.exit55

loop.body50:                                      ; preds = %loop.cond49
  %48 = load i64, ptr %.anon48, align 8
  store i64 %48, ptr %i51, align 8
  %49 = load i64, ptr %.anon48, align 8
  %ptroffset53 = getelementptr inbounds [4 x i8], ptr %.anon47, i64 %49
  %50 = load i32, ptr %ptroffset53, align 4
  store i32 %50, ptr %y52, align 4
  %51 = load i64, ptr %i51, align 8
  %52 = load i32, ptr %y52, align 4
  call void (ptr, ...) @printf(ptr @.str.10, i64 %51, i32 %52)
  %53 = load i64, ptr %i51, align 8
  %add54 = add i64 %53, 1
  store i64 %add54, ptr %i51, align 8
  %54 = load i64, ptr %.anon48, align 8
  %addnuw = add nuw i64 %54, 1
  store i64 %addnuw, ptr %.anon48, align 8
  br label %loop.cond49

loop.exit55:                                      ; preds = %loop.cond49
  call void @foo.getFields(ptr sret([5 x i32]) align 4 %.anon56)
  store i64 0, ptr %.anon57, align 8
  br label %loop.cond58

loop.cond58:                                      ; preds = %loop.body60, %loop.exit55
  %55 = load i64, ptr %.anon57, align 8
  %gt59 = icmp ugt i64 5, %55
  br i1 %gt59, label %loop.body60, label %loop.exit65

loop.body60:                                      ; preds = %loop.cond58
  %56 = load i64, ptr %.anon57, align 8
  store i64 %56, ptr %i61, align 8
  %57 = load i64, ptr %.anon57, align 8
  %ptroffset63 = getelementptr inbounds [4 x i8], ptr %.anon56, i64 %57
  %58 = load i32, ptr %ptroffset63, align 4
  store i32 %58, ptr %y62, align 4
  %59 = load i64, ptr %i61, align 8
  %60 = load i32, ptr %y62, align 4
  call void (ptr, ...) @printf(ptr @.str.11, i64 %59, i32 %60)
  %61 = load i64, ptr %.anon57, align 8
  %addnuw64 = add nuw i64 %61, 1
  store i64 %addnuw64, ptr %.anon57, align 8
  br label %loop.cond58

loop.exit65:                                      ; preds = %loop.cond58
  call void @foo.getFields(ptr sret([5 x i32]) align 4 %sretparam)
  store i64 0, ptr %.anon66, align 8
  br label %loop.cond67

loop.cond67:                                      ; preds = %loop.body69, %loop.exit65
  %62 = load i64, ptr %.anon66, align 8
  %gt68 = icmp ugt i64 5, %62
  br i1 %gt68, label %loop.body69, label %loop.exit74

loop.body69:                                      ; preds = %loop.cond67
  %63 = load i64, ptr %.anon66, align 8
  store i64 %63, ptr %i70, align 8
  %64 = load i64, ptr %.anon66, align 8
  %ptroffset72 = getelementptr inbounds [4 x i8], ptr %sretparam, i64 %64
  %65 = load i32, ptr %ptroffset72, align 4
  store i32 %65, ptr %y71, align 4
  %66 = load i64, ptr %i70, align 8
  %67 = load i32, ptr %y71, align 4
  call void (ptr, ...) @printf(ptr @.str.12, i64 %66, i32 %67)
  %68 = load i64, ptr %.anon66, align 8
  %addnuw73 = add nuw i64 %68, 1
  store i64 %addnuw73, ptr %.anon66, align 8
  br label %loop.cond67

loop.exit74:                                      ; preds = %loop.cond67
  %ptradd75 = getelementptr inbounds i8, ptr %x, i64 4
  %69 = load i32, ptr %x, align 4
  %70 = load i32, ptr %ptradd75, align 4
  call void (ptr, ...) @printf(ptr @.str.13, i32 %69, i32 %70)
  %ptradd77 = getelementptr inbounds i8, ptr %x, i64 4
  store ptr %ptradd77, ptr %y76, align 8
  %71 = load ptr, ptr %y76, align 8
  %72 = load i32, ptr %71, align 4
  %add78 = add i32 %72, 1
  store i32 %add78, ptr %71, align 4
  %ptradd79 = getelementptr inbounds i8, ptr %x, i64 4
  %73 = load i32, ptr %x, align 4
  %74 = load i32, ptr %ptradd79, align 4
  call void (ptr, ...) @printf(ptr @.str.14, i32 %73, i32 %74)
  ret void
}
