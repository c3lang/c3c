// #target: macos-x64
module foo;

struct Foo
{
    int[3] a;
}

extern fn void printf(char*, ...);

macro int* Foo.@operator_element_at_ref(Foo* &f, int a) @operator(&[])
{
    return &f.a[a];
}

macro int Foo.@operator_len(Foo* &f) @operator(len)
{
    return 3;
}

macro int Foo.@operator_element_at(Foo* &f, int a) @operator([])
{
    return f.a[a];
}

fn int[5] getFields()
{
    printf("getFields\n");
    return int[5] { 3, 5, 2, 10, 111};
}
fn Foo *call(Foo* f)
{
    printf("Call made\n");
    return f;
}
fn void main()
{
    Foo x = { { 1, 5, 7} };
    printf("%d %d %d\n", x[0], x[1], x[2]);
    foreach (i, int y : *call(&x))
    {
        printf("Hello %d: %d\n", i, y);
    }
    foreach (i, int* &y : x)
    {
        *y += 1;
        printf("Hello %d: %d\n", i, *y);
    }
    foreach (i, int y : x)
    {
        printf("After one %d: %d\n", i, y);
    }

    foreach (i, int y : &x)
    {
        printf("By pointer %d: %d\n", i, y);
    }

    foreach (i, int y : x)
    {
        printf("Adding %d: %d\n", i, y);
        i++;
    }

    foreach(i, y : int[5] { 1, 2, 10, 111, 123 } )
    {
        printf("Adding %d: %d\n", i, y);
        i++;
    }
    foreach(i, y : getFields() )
    {
        printf("Pull value %d: %d\n", i, y);
    }
    foreach(i, y : &&getFields())
    {
        printf("Pull value tempptr %d: %d\n", i, y);
    }
    printf("%d %d\n", x[0], x[1]);
    int* y = &x[1];
    *y += 1;
    printf("%d %d\n", x[0], x[1]);
}

/* #expect: foo.ll

%Foo = type { [3 x i32] }

@"$ct.foo.Foo" = linkonce global %.introspect { i8 10, ptr null, i64 12, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [11 x i8] c"getFields\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"Call made\0A\00", align 1
@.__const = private unnamed_addr constant %Foo { [3 x i32] [i32 1, i32 5, i32 7] }, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"%d %d %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Hello %d: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Hello %d: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"After one %d: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"By pointer %d: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"Adding %d: %d\0A\00", align 1
@.__const.8 = private unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 10, i32 111, i32 123], align 16
@.str.9 = private unnamed_addr constant [15 x i8] c"Adding %d: %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"Pull value %d: %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"Pull value tempptr %d: %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1

; Function Attrs: nounwind
declare void @printf(ptr, ...) #0

; Function Attrs: nounwind
define void @foo.getFields(ptr noalias sret([5 x i32]) align 4 %0) #0 {
entry:
  %literal = alloca [5 x i32], align 16
  call void (ptr, ...) @printf(ptr @.str)
  %1 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 0
  store i32 3, ptr %1, align 4
  %2 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 1
  store i32 5, ptr %2, align 4
  %3 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 2
  store i32 2, ptr %3, align 4
  %4 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 3
  store i32 10, ptr %4, align 4
  %5 = getelementptr inbounds [5 x i32], ptr %literal, i64 0, i64 4
  store i32 111, ptr %5, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %0, ptr align 4 %literal, i32 20, i1 false)
  ret void
}

define ptr @foo.call(ptr %0) #0 {
entry:
  call void (ptr, ...) @printf(ptr @.str.1)
  ret ptr %0
}

define void @foo.main() #0 {
entry:
  %x = alloca %Foo, align 4
  %.anon = alloca ptr, align 8
  %.anon1 = alloca i32, align 4
  %.anon2 = alloca i32, align 4
  %i = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i32, align 4
  %.anon3 = alloca i32, align 4
  %.anon4 = alloca i32, align 4
  %i8 = alloca i32, align 4
  %y9 = alloca ptr, align 8
  %a10 = alloca i32, align 4
  %.anon15 = alloca i32, align 4
  %.anon16 = alloca i32, align 4
  %i20 = alloca i32, align 4
  %y21 = alloca i32, align 4
  %a22 = alloca i32, align 4
  %.anon26 = alloca i32, align 4
  %.anon27 = alloca i32, align 4
  %i31 = alloca i32, align 4
  %y32 = alloca i32, align 4
  %a33 = alloca i32, align 4
  %.anon37 = alloca i32, align 4
  %.anon38 = alloca i32, align 4
  %i42 = alloca i32, align 4
  %y43 = alloca i32, align 4
  %a44 = alloca i32, align 4
  %.anon49 = alloca [5 x i32], align 16
  %.anon50 = alloca i64, align 8
  %i53 = alloca i64, align 8
  %y54 = alloca i32, align 4
  %.anon58 = alloca [5 x i32], align 16
  %.anon59 = alloca i64, align 8
  %i63 = alloca i64, align 8
  %y64 = alloca i32, align 4
  %.anon67 = alloca ptr, align 8
  %sretparam = alloca [5 x i32], align 4
  %.anon68 = alloca i64, align 8
  %i72 = alloca i64, align 8
  %y73 = alloca i32, align 4
  %y76 = alloca ptr, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const, i32 12, i1 false)
  %0 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %1 = getelementptr inbounds [3 x i32], ptr %0, i64 0, i64 0
  %2 = load i32, ptr %1, align 4
  %3 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %4 = getelementptr inbounds [3 x i32], ptr %3, i64 0, i64 1
  %5 = load i32, ptr %4, align 4
  %6 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %7 = getelementptr inbounds [3 x i32], ptr %6, i64 0, i64 2
  %8 = load i32, ptr %7, align 4
  call void (ptr, ...) @printf(ptr @.str.2, i32 %2, i32 %5, i32 %8)
  %9 = call ptr @foo.call(ptr %x)
  store ptr %9, ptr %.anon, align 8
  store i32 3, ptr %.anon1, align 4
  store i32 0, ptr %.anon2, align 4
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %10 = load i32, ptr %.anon2, align 4
  %11 = load i32, ptr %.anon1, align 4
  %lt = icmp slt i32 %10, %11
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %12 = load i32, ptr %.anon2, align 4
  store i32 %12, ptr %i, align 4
  %13 = load ptr, ptr %.anon, align 8
  %14 = load i32, ptr %.anon2, align 4
  store i32 %14, ptr %a, align 4
  %15 = getelementptr inbounds %Foo, ptr %13, i32 0, i32 0
  %16 = load i32, ptr %a, align 4
  %sext = sext i32 %16 to i64
  %17 = getelementptr inbounds [3 x i32], ptr %15, i64 0, i64 %sext
  %18 = load i32, ptr %17, align 4
  store i32 %18, ptr %y, align 4
  %19 = load i32, ptr %i, align 4
  %20 = load i32, ptr %y, align 4
  call void (ptr, ...) @printf(ptr @.str.3, i32 %19, i32 %20)
  %21 = load i32, ptr %.anon2, align 4
  %add = add i32 %21, 1
  store i32 %add, ptr %.anon2, align 4
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i32 3, ptr %.anon3, align 4
  store i32 0, ptr %.anon4, align 4
  br label %loop.cond5

loop.cond5:                                       ; preds = %loop.body7, %loop.exit
  %22 = load i32, ptr %.anon4, align 4
  %23 = load i32, ptr %.anon3, align 4
  %lt6 = icmp slt i32 %22, %23
  br i1 %lt6, label %loop.body7, label %loop.exit14

loop.body7:                                       ; preds = %loop.cond5
  %24 = load i32, ptr %.anon4, align 4
  store i32 %24, ptr %i8, align 4
  %25 = load i32, ptr %.anon4, align 4
  store i32 %25, ptr %a10, align 4
  %26 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %27 = load i32, ptr %a10, align 4
  %sext11 = sext i32 %27 to i64
  %28 = getelementptr inbounds [3 x i32], ptr %26, i64 0, i64 %sext11
  store ptr %28, ptr %y9, align 8
  %29 = load ptr, ptr %y9, align 8
  %30 = load i32, ptr %29, align 4
  %add12 = add i32 %30, 1
  store i32 %add12, ptr %29, align 4
  %31 = load i32, ptr %i8, align 4
  %32 = load ptr, ptr %y9, align 8
  %33 = load i32, ptr %32, align 4
  call void (ptr, ...) @printf(ptr @.str.4, i32 %31, i32 %33)
  %34 = load i32, ptr %.anon4, align 4
  %add13 = add i32 %34, 1
  store i32 %add13, ptr %.anon4, align 4
  br label %loop.cond5

loop.exit14:                                      ; preds = %loop.cond5
  store i32 3, ptr %.anon15, align 4
  store i32 0, ptr %.anon16, align 4
  br label %loop.cond17

loop.cond17:                                      ; preds = %loop.body19, %loop.exit14
  %35 = load i32, ptr %.anon16, align 4
  %36 = load i32, ptr %.anon15, align 4
  %lt18 = icmp slt i32 %35, %36
  br i1 %lt18, label %loop.body19, label %loop.exit25

loop.body19:                                      ; preds = %loop.cond17
  %37 = load i32, ptr %.anon16, align 4
  store i32 %37, ptr %i20, align 4
  %38 = load i32, ptr %.anon16, align 4
  store i32 %38, ptr %a22, align 4
  %39 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %40 = load i32, ptr %a22, align 4
  %sext23 = sext i32 %40 to i64
  %41 = getelementptr inbounds [3 x i32], ptr %39, i64 0, i64 %sext23
  %42 = load i32, ptr %41, align 4
  store i32 %42, ptr %y21, align 4
  %43 = load i32, ptr %i20, align 4
  %44 = load i32, ptr %y21, align 4
  call void (ptr, ...) @printf(ptr @.str.5, i32 %43, i32 %44)
  %45 = load i32, ptr %.anon16, align 4
  %add24 = add i32 %45, 1
  store i32 %add24, ptr %.anon16, align 4
  br label %loop.cond17

loop.exit25:                                      ; preds = %loop.cond17
  store i32 3, ptr %.anon26, align 4
  store i32 0, ptr %.anon27, align 4
  br label %loop.cond28

loop.cond28:                                      ; preds = %loop.body30, %loop.exit25
  %46 = load i32, ptr %.anon27, align 4
  %47 = load i32, ptr %.anon26, align 4
  %lt29 = icmp slt i32 %46, %47
  br i1 %lt29, label %loop.body30, label %loop.exit36

loop.body30:                                      ; preds = %loop.cond28
  %48 = load i32, ptr %.anon27, align 4
  store i32 %48, ptr %i31, align 4
  %49 = load i32, ptr %.anon27, align 4
  store i32 %49, ptr %a33, align 4
  %50 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %51 = load i32, ptr %a33, align 4
  %sext34 = sext i32 %51 to i64
  %52 = getelementptr inbounds [3 x i32], ptr %50, i64 0, i64 %sext34
  %53 = load i32, ptr %52, align 4
  store i32 %53, ptr %y32, align 4
  %54 = load i32, ptr %i31, align 4
  %55 = load i32, ptr %y32, align 4
  call void (ptr, ...) @printf(ptr @.str.6, i32 %54, i32 %55)
  %56 = load i32, ptr %.anon27, align 4
  %add35 = add i32 %56, 1
  store i32 %add35, ptr %.anon27, align 4
  br label %loop.cond28

loop.exit36:                                      ; preds = %loop.cond28
  store i32 3, ptr %.anon37, align 4
  store i32 0, ptr %.anon38, align 4
  br label %loop.cond39

loop.cond39:                                      ; preds = %loop.body41, %loop.exit36
  %57 = load i32, ptr %.anon38, align 4
  %58 = load i32, ptr %.anon37, align 4
  %lt40 = icmp slt i32 %57, %58
  br i1 %lt40, label %loop.body41, label %loop.exit48

loop.body41:                                      ; preds = %loop.cond39
  %59 = load i32, ptr %.anon38, align 4
  store i32 %59, ptr %i42, align 4
  %60 = load i32, ptr %.anon38, align 4
  store i32 %60, ptr %a44, align 4
  %61 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %62 = load i32, ptr %a44, align 4
  %sext45 = sext i32 %62 to i64
  %63 = getelementptr inbounds [3 x i32], ptr %61, i64 0, i64 %sext45
  %64 = load i32, ptr %63, align 4
  store i32 %64, ptr %y43, align 4
  %65 = load i32, ptr %i42, align 4
  %66 = load i32, ptr %y43, align 4
  call void (ptr, ...) @printf(ptr @.str.7, i32 %65, i32 %66)
  %67 = load i32, ptr %i42, align 4
  %add46 = add i32 %67, 1
  store i32 %add46, ptr %i42, align 4
  %68 = load i32, ptr %.anon38, align 4
  %add47 = add i32 %68, 1
  store i32 %add47, ptr %.anon38, align 4
  br label %loop.cond39

loop.exit48:                                      ; preds = %loop.cond39
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %.anon49, ptr align 16 @.__const.8, i32 20, i1 false)
  store i64 0, ptr %.anon50, align 8
  br label %loop.cond51

loop.cond51:                                      ; preds = %loop.body52, %loop.exit48
  %69 = load i64, ptr %.anon50, align 8
  %gt = icmp ugt i64 5, %69
  br i1 %gt, label %loop.body52, label %loop.exit57

loop.body52:                                      ; preds = %loop.cond51
  %70 = load i64, ptr %.anon50, align 8
  store i64 %70, ptr %i53, align 8
  %71 = load i64, ptr %.anon50, align 8
  %72 = getelementptr inbounds [5 x i32], ptr %.anon49, i64 0, i64 %71
  %73 = load i32, ptr %72, align 4
  store i32 %73, ptr %y54, align 4
  %74 = load i64, ptr %i53, align 8
  %75 = load i32, ptr %y54, align 4
  call void (ptr, ...) @printf(ptr @.str.9, i64 %74, i32 %75)
  %76 = load i64, ptr %i53, align 8
  %add55 = add i64 %76, 1
  store i64 %add55, ptr %i53, align 8
  %77 = load i64, ptr %.anon50, align 8
  %add56 = add i64 %77, 1
  store i64 %add56, ptr %.anon50, align 8
  br label %loop.cond51

loop.exit57:                                      ; preds = %loop.cond51
  call void @foo.getFields(ptr sret([5 x i32]) align 4 %.anon58)
  store i64 0, ptr %.anon59, align 8
  br label %loop.cond60

loop.cond60:                                      ; preds = %loop.body62, %loop.exit57
  %78 = load i64, ptr %.anon59, align 8
  %gt61 = icmp ugt i64 5, %78
  br i1 %gt61, label %loop.body62, label %loop.exit66

loop.body62:                                      ; preds = %loop.cond60
  %79 = load i64, ptr %.anon59, align 8
  store i64 %79, ptr %i63, align 8
  %80 = load i64, ptr %.anon59, align 8
  %81 = getelementptr inbounds [5 x i32], ptr %.anon58, i64 0, i64 %80
  %82 = load i32, ptr %81, align 4
  store i32 %82, ptr %y64, align 4
  %83 = load i64, ptr %i63, align 8
  %84 = load i32, ptr %y64, align 4
  call void (ptr, ...) @printf(ptr @.str.10, i64 %83, i32 %84)
  %85 = load i64, ptr %.anon59, align 8
  %add65 = add i64 %85, 1
  store i64 %add65, ptr %.anon59, align 8
  br label %loop.cond60

loop.exit66:                                      ; preds = %loop.cond60
  call void @foo.getFields(ptr sret([5 x i32]) align 4 %sretparam)
  store ptr %sretparam, ptr %.anon67, align 8
  store i64 0, ptr %.anon68, align 8
  br label %loop.cond69

loop.cond69:                                      ; preds = %loop.body71, %loop.exit66
  %86 = load i64, ptr %.anon68, align 8
  %gt70 = icmp ugt i64 5, %86
  br i1 %gt70, label %loop.body71, label %loop.exit75

loop.body71:                                      ; preds = %loop.cond69
  %87 = load i64, ptr %.anon68, align 8
  store i64 %87, ptr %i72, align 8
  %88 = load ptr, ptr %.anon67, align 8
  %89 = load i64, ptr %.anon68, align 8
  %90 = getelementptr inbounds [5 x i32], ptr %88, i64 0, i64 %89
  %91 = load i32, ptr %90, align 4
  store i32 %91, ptr %y73, align 4
  %92 = load i64, ptr %i72, align 8
  %93 = load i32, ptr %y73, align 4
  call void (ptr, ...) @printf(ptr @.str.11, i64 %92, i32 %93)
  %94 = load i64, ptr %.anon68, align 8
  %add74 = add i64 %94, 1
  store i64 %add74, ptr %.anon68, align 8
  br label %loop.cond69

loop.exit75:                                      ; preds = %loop.cond69
  %95 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %96 = getelementptr inbounds [3 x i32], ptr %95, i64 0, i64 0
  %97 = load i32, ptr %96, align 4
  %98 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %99 = getelementptr inbounds [3 x i32], ptr %98, i64 0, i64 1
  %100 = load i32, ptr %99, align 4
  call void (ptr, ...) @printf(ptr @.str.12, i32 %97, i32 %100)
  %101 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %102 = getelementptr inbounds [3 x i32], ptr %101, i64 0, i64 1
  store ptr %102, ptr %y76, align 8
  %103 = load ptr, ptr %y76, align 8
  %104 = load i32, ptr %103, align 4
  %add77 = add i32 %104, 1
  store i32 %add77, ptr %103, align 4
  %105 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %106 = getelementptr inbounds [3 x i32], ptr %105, i64 0, i64 0
  %107 = load i32, ptr %106, align 4
  %108 = getelementptr inbounds %Foo, ptr %x, i32 0, i32 0
  %109 = getelementptr inbounds [3 x i32], ptr %108, i64 0, i64 1
  %110 = load i32, ptr %109, align 4
  call void (ptr, ...) @printf(ptr @.str.13, i32 %107, i32 %110)
  ret void
}
