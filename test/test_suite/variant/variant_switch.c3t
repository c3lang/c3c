// #target: macos-x64
module foo;

extern fn void printf(char*, ...);

fn void test(variant z)
{
    switch (z)
    {
        case int:
            printf("int: %d\n", *z);
            *z = 3;
        case double:
            printf("double %f\n", *z);
        default:
            printf("Unknown type.\n");
    }
    if (z.type == int.typeid)
    {
        printf("int: %d\n", *(int*)(z));
    }
}
fn int main()
{
    test(&&123.0);
    test(&&1);
    test(&&true);
    return 0;
}

/* #expect: foo.ll

@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$double" = linkonce constant %.introspect { i8 4, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$bool" = linkonce constant %.introspect { i8 1, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8

define void @foo_test(i64 %0, ptr %1) #0 {
entry:
  %z = alloca %variant, align 8
  %switch = alloca i64, align 8
  %z1 = alloca ptr, align 8
  %z4 = alloca ptr, align 8
  store i64 %0, ptr %z, align 8
  %ptroffset = getelementptr inbounds ptr, ptr %z, i64 1
  store ptr %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %variant, ptr %z, i32 0, i32 1
  %3 = load i64, ptr %2, align 8
  store i64 %3, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %4 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"ct$int" to i64), %4
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  %5 = getelementptr inbounds %variant, ptr %z, i32 0, i32 0
  %6 = load ptr, ptr %5, align 8
  store ptr %6, ptr %z1, align 8
  %7 = load ptr, ptr %z1, align 8
  %8 = load i32, ptr %7, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %8)
  %9 = load ptr, ptr %z1, align 8
  store i32 3, ptr %9, align 4
  br label %switch.exit

next_if:                                          ; preds = %switch.entry
  %eq2 = icmp eq i64 ptrtoint (ptr @"ct$double" to i64), %4
  br i1 %eq2, label %switch.case3, label %next_if5

switch.case3:                                     ; preds = %next_if
  %10 = getelementptr inbounds %variant, ptr %z, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  store ptr %11, ptr %z4, align 8
  %12 = load ptr, ptr %z4, align 8
  %13 = load double, ptr %12, align 8
  call void (ptr, ...) @printf(ptr @.str.1, double %13)
  br label %switch.exit

next_if5:                                         ; preds = %next_if
  br label %switch.default

switch.default:                                   ; preds = %next_if5
  call void (ptr, ...) @printf(ptr @.str.2)
  br label %switch.exit

switch.exit:                                      ; preds = %switch.default, %switch.case3, %switch.case
  %14 = getelementptr inbounds %variant, ptr %z, i32 0, i32 1
  %15 = load i64, ptr %14, align 8
  %eq6 = icmp eq i64 %15, ptrtoint (ptr @"ct$int" to i64)
  br i1 %eq6, label %if.then, label %if.exit

if.then:                                          ; preds = %switch.exit
  %16 = getelementptr inbounds %variant, ptr %z, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = load i32, ptr %17, align 4
  call void (ptr, ...) @printf(ptr @.str.3, i32 %18)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %switch.exit
  ret void
}

; Function Attrs: nounwind
define i32 @main() #0 {
entry:
  %taddr = alloca double, align 8
  %taddr1 = alloca %variant, align 8
  %taddr2 = alloca i32, align 4
  %taddr3 = alloca %variant, align 8
  %taddr6 = alloca i8, align 1
  %taddr7 = alloca %variant, align 8
  store double 1.230000e+02, ptr %taddr, align 8
  %0 = insertvalue %variant undef, ptr %taddr, 0
  %1 = insertvalue %variant %0, i64 ptrtoint (ptr @"ct$double" to i64), 1
  store %variant %1, ptr %taddr1, align 8
  %2 = getelementptr inbounds { i64, ptr }, ptr %taddr1, i32 0, i32 0
  %lo = load i64, ptr %2, align 8
  %3 = getelementptr inbounds { i64, ptr }, ptr %taddr1, i32 0, i32 1
  %hi = load ptr, ptr %3, align 8
  call void @foo_test(i64 %lo, ptr %hi)
  store i32 1, ptr %taddr2, align 4
  %4 = insertvalue %variant undef, ptr %taddr2, 0
  %5 = insertvalue %variant %4, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %5, ptr %taddr3, align 8
  %6 = getelementptr inbounds { i64, ptr }, ptr %taddr3, i32 0, i32 0
  %lo4 = load i64, ptr %6, align 8
  %7 = getelementptr inbounds { i64, ptr }, ptr %taddr3, i32 0, i32 1
  %hi5 = load ptr, ptr %7, align 8
  call void @foo_test(i64 %lo4, ptr %hi5)
  store i8 1, ptr %taddr6, align 1
  %8 = insertvalue %variant undef, ptr %taddr6, 0
  %9 = insertvalue %variant %8, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  store %variant %9, ptr %taddr7, align 8
  %10 = getelementptr inbounds { i64, ptr }, ptr %taddr7, i32 0, i32 0
  %lo8 = load i64, ptr %10, align 8
  %11 = getelementptr inbounds { i64, ptr }, ptr %taddr7, i32 0, i32 1
  %hi9 = load ptr, ptr %11, align 8
  call void @foo_test(i64 %lo8, ptr %hi9)
  ret i32 0
}
