// #target: macos-x64
module foo;

extern fn void printf(char*, ...);

fn void test(variant z)
{
    switch (z)
    {
        case int:
            printf("int: %d\n", *z);
            *z = 3;
        case double:
            printf("double %f\n", *z);
        default:
            printf("Unknown type.\n");
    }
    if (z.type == int.typeid)
    {
        printf("int: %d\n", *(int*)(z));
    }
}
fn int main()
{
    test(&&123.0);
    test(&&1);
    test(&&true);
    return 0;
}

/* #expect: foo.ll

@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$double" = linkonce constant %.introspect { i8 4, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$bool" = linkonce constant %.introspect { i8 1, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8

define void @foo_test(i64 %0, i8* %1) #0 {
entry:
  %z = alloca %variant, align 8
  %switch = alloca i64, align 8
  %z1 = alloca i32*, align 8
  %z4 = alloca double*, align 8
  %pair = bitcast %variant* %z to { i64, i8* }*
  %2 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %pair, i32 0, i32 0
  store i64 %0, i64* %2, align 8
  %3 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %pair, i32 0, i32 1
  store i8* %1, i8** %3, align 8
  %4 = getelementptr inbounds %variant, %variant* %z, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %6 = load i64, i64* %switch, align 8
  %eq = icmp eq i64 ptrtoint (%.introspect* @"ct$int" to i64), %6
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  %7 = getelementptr inbounds %variant, %variant* %z, i32 0, i32 0
  %8 = bitcast i8** %7 to i32**
  %9 = load i32*, i32** %8, align 8
  store i32* %9, i32** %z1, align 8
  %10 = load i32*, i32** %z1, align 8
  %11 = load i32, i32* %10, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %11)
  %12 = load i32*, i32** %z1, align 8
  store i32 3, i32* %12, align 8
  br label %switch.exit

next_if:                                          ; preds = %switch.entry
  %eq2 = icmp eq i64 ptrtoint (%.introspect* @"ct$double" to i64), %6
  br i1 %eq2, label %switch.case3, label %next_if5

switch.case3:                                     ; preds = %next_if
  %13 = getelementptr inbounds %variant, %variant* %z, i32 0, i32 0
  %14 = bitcast i8** %13 to double**
  %15 = load double*, double** %14, align 8
  store double* %15, double** %z4, align 8
  %16 = load double*, double** %z4, align 8
  %17 = load double, double* %16, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), double %17)
  br label %switch.exit

next_if5:                                         ; preds = %next_if
  br label %switch.default

switch.default:                                   ; preds = %next_if5
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0))
  br label %switch.exit

switch.exit:                                      ; preds = %switch.default, %switch.case3, %switch.case
  %18 = getelementptr inbounds %variant, %variant* %z, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %eq6 = icmp eq i64 %19, ptrtoint (%.introspect* @"ct$int" to i64)
  br i1 %eq6, label %if.then, label %if.exit

if.then:                                          ; preds = %switch.exit
  %20 = getelementptr inbounds %variant, %variant* %z, i32 0, i32 0
  %21 = bitcast i8** %20 to i32**
  %22 = load i32*, i32** %21, align 8
  %23 = load i32, i32* %22, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i32 %23)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %switch.exit
  ret void
}

; Function Attrs: nounwind
define i32 @main() #0 {
entry:
  %taddr = alloca double, align 8
  %taddr1 = alloca %variant, align 8
  %taddr2 = alloca i32, align 4
  %taddr3 = alloca %variant, align 8
  %taddr6 = alloca i8, align 1
  %taddr7 = alloca %variant, align 8
  store double 1.230000e+02, double* %taddr, align 8
  %0 = bitcast double* %taddr to i8*
  %1 = insertvalue %variant undef, i8* %0, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (%.introspect* @"ct$double" to i64), 1
  store %variant %2, %variant* %taddr1, align 8
  %3 = bitcast %variant* %taddr1 to { i64, i8* }*
  %4 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %3, i32 0, i32 0
  %lo = load i64, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %3, i32 0, i32 1
  %hi = load i8*, i8** %5, align 8
  call void @foo_test(i64 %lo, i8* %hi)
  store i32 1, i32* %taddr2, align 4
  %6 = bitcast i32* %taddr2 to i8*
  %7 = insertvalue %variant undef, i8* %6, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %8, %variant* %taddr3, align 8
  %9 = bitcast %variant* %taddr3 to { i64, i8* }*
  %10 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %9, i32 0, i32 0
  %lo4 = load i64, i64* %10, align 8
  %11 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %9, i32 0, i32 1
  %hi5 = load i8*, i8** %11, align 8
  call void @foo_test(i64 %lo4, i8* %hi5)
  store i8 1, i8* %taddr6, align 1
  %12 = insertvalue %variant undef, i8* %taddr6, 0
  %13 = insertvalue %variant %12, i64 ptrtoint (%.introspect* @"ct$bool" to i64), 1
  store %variant %13, %variant* %taddr7, align 8
  %14 = bitcast %variant* %taddr7 to { i64, i8* }*
  %15 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %14, i32 0, i32 0
  %lo8 = load i64, i64* %15, align 8
  %16 = getelementptr inbounds { i64, i8* }, { i64, i8* }* %14, i32 0, i32 1
  %hi9 = load i8*, i8** %16, align 8
  call void @foo_test(i64 %lo8, i8* %hi9)
  ret i32 0
}
