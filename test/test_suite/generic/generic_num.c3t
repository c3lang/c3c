// #target: macos-x64
module hello<Type, FOO>;

fn Type x(Type t)
{
	return t * t + FOO;
}

module test;
import hello;
define xint = hello::x<int, -123>;

import std::io;

fn void main()
{
	io::printfln("%d", xint(4));
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca %"variant[]", align 8
  %0 = call i32 @"hello$$int._123_x"(i32 4)
  store i32 %0, i32* %taddr, align 4
  %1 = bitcast i32* %taddr to i8*
  %2 = insertvalue %variant undef, i8* %1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %3, %variant* %4, align 16
  %5 = bitcast [1 x %variant]* %varargslots to %variant*
  %6 = insertvalue %"variant[]" undef, %variant* %5, 0
  %7 = insertvalue %"variant[]" %6, i64 1, 1
  store %"variant[]" %7, %"variant[]"* %taddr1, align 8
  %8 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %lo = load i8*, i8** %9, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %hi = load i64, i64* %10, align 8
  %11 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %11, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  ret void
}