module gen <Type>;

fn Type mult(Type x)
{
    return x * x;
}

fn Type addMult(Type x, Type a, Type b)
{
    return x * a + b;
}

module test;

define intMult = gen::mult<int>;
define doubleAddMult = gen::addMult<double>;

fn int getIt(int i)
{
    return intMult(i) + 1;
}

fn double getIt2(double i)
{
    return doubleAddMult(i, 2, 3);
}

// #expect: gen.int.ll

define i32 @gen.int.mult(i32 %0) #0 {
entry:
  %mul = mul i32 %0, %0
  ret i32 %mul
}

define i32 @gen.int.addMult(i32 %0, i32 %1, i32 %2) #0 {
entry:
  %mul = mul i32 %0, %1
  %add = add i32 %mul, %2
  ret i32 %add
}


// #expect: test.ll

declare i32 @gen.int.mult(i32)

declare double @gen.double.addMult(double, double, double)

define i32 @test.getIt(i32 %0) #0 {
entry:
  %1 = call i32 @gen.int.mult(i32 %0)
  %add = add i32 %1, 1
  ret i32 %add
}

define double @test.getIt2(double %0) #0 {
entry:
  %1 = call double @gen.double.addMult(double %0, double 2.000000e+00, double 3.000000e+00)
  ret double %1
}


// #expect: gen.double.ll

define double @gen.double.addMult(double %0, double %1, double %2)
  %fmul = fmul double %0, %1
  %fadd = fadd double %fmul, %2
  ret double %fadd
