// #target: macos-x64
module foo;

extern fn void printf(char* fmt, ...);
struct Foo
{
	int x;
}

macro void Foo.@hello(Foo* &this) { this.x = 3; printf("-%d\n", this.x); }
macro void Foo.hello(Foo* this) { this.x = 4; printf("-%d\n", this.x); }
macro void Foo.hello2(Foo this) { this.x = 5; printf("-%d\n", this.x); }

fn void main()
{
	Foo a;
	a.@hello();
	printf("%d\n", a.x);
	a.hello();
	printf("%d\n", a.x);
	a.hello2();
	printf("%d\n", a.x);
}

/* #expect: foo.ll

define void @foo.main() #0 {
entry:
  %a = alloca %Foo, align 4
  %this = alloca %Foo, align 4
  store i32 0, ptr %a, align 4
  %0 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  store i32 3, ptr %0, align 4
  %1 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  %2 = load i32, ptr %1, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %2)
  %3 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  %4 = load i32, ptr %3, align 4
  call void (ptr, ...) @printf(ptr @.str.1, i32 %4)
  %5 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  store i32 4, ptr %5, align 4
  %6 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  %7 = load i32, ptr %6, align 4
  call void (ptr, ...) @printf(ptr @.str.2, i32 %7)
  %8 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  %9 = load i32, ptr %8, align 4
  call void (ptr, ...) @printf(ptr @.str.3, i32 %9)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %this, ptr align 4 %a, i32 4, i1 false)
  %10 = getelementptr inbounds %Foo, ptr %this, i32 0, i32 0
  store i32 5, ptr %10, align 4
  %11 = getelementptr inbounds %Foo, ptr %this, i32 0, i32 0
  %12 = load i32, ptr %11, align 4
  call void (ptr, ...) @printf(ptr @.str.4, i32 %12)
  %13 = getelementptr inbounds %Foo, ptr %a, i32 0, i32 0
  %14 = load i32, ptr %13, align 4
  call void (ptr, ...) @printf(ptr @.str.5, i32 %14)
  ret void
}