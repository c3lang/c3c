// #target: macos-x64
fn int foo()
{
    return 1;
}

fn void test()
{
    int x = foo();
    if (x > 0) return;
    unreachable();
}


/* #expect: unreachable.ll

define void @unreachable.test() #0 {
entry:
  %x = alloca i32, align 4
  %string = alloca %"char[]", align 8
  %indirectarg = alloca %"any[]", align 8
  %0 = call i32 @unreachable.foo()
  store i32 %0, ptr %x, align 4
  %1 = load i32, ptr %x, align 4
  %gt = icmp sgt i32 %1, 0
  br i1 %gt, label %if.then, label %if.exit
if.then:                                          ; preds = %entry
  ret void
if.exit:                                          ; preds = %entry
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %2 = getelementptr inbounds %"char[]", ptr %string, i32 0, i32 0
  %lo = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %"char[]", ptr %string, i32 0, i32 1
  %hi = load i64, ptr %3, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr %lo, i64 %hi, ptr @.str.1, i64 14, ptr @.str.2, i64 4, i32 10, ptr byval(%"any[]") align 8 %indirectarg)
  unreachable
}