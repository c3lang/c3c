// #target: macos-x64

module test;
import std::io;

struct Matrix2x2
{
	union
	{
		struct
		{
			float m00, m01;
			float m10, m11;
		}
		struct
		{
			float[<2>] m0;
			float[<2>] m1;
		}
		float[<4>] m;
	}
}

fn float[<2>] apply1(Matrix2x2* mat, float[<2>] vec)
{
	return float[<2>] {
		mat.m00 * vec[0] + mat.m01 * vec[1],
		mat.m10 * vec[0] + mat.m11 * vec[1],
	};
}

fn float[<2>] apply2(Matrix2x2* mat, float[<2>] vec)
{
	return float[<2>] {
		mat.m0[0] * vec[0] + mat.m0[1] * vec[1],
		mat.m1[0] * vec[0] + mat.m1[1] * vec[1],
	};
}

fn float[<2>] apply3(Matrix2x2* mat, float[<2>] vec)
{
	float[<2>] a = $$shufflevector(mat.m0, mat.m1, { 0, 3 });
	float[<2>] b = $$shufflevector(mat.m0, mat.m1, { 1, 2 });
	float[<2>] flip = $$shufflevector(vec, { 1, 0 });
	return a * vec + b * flip;
}


fn void main()
{
	Matrix2x2 a = { 1, -3, 5, -7 };
	io::printfln("1: %s", apply1(&a, float[<2>] { 11, 13 }));
	io::printfln("2: %s", apply2(&a, float[<2>] { 11, 13 }));
	io::printfln("3: %s", apply3(&a, float[<2>] { 11, 13 }));
}

/* #expect: test.ll

define double @test_apply3(%Matrix2x2* %0, double %1) #0 {
entry:
  %vec = alloca <2 x float>, align 8
  %a = alloca <2 x float>, align 8
  %b = alloca <2 x float>, align 8
  %flip = alloca <2 x float>, align 8
  %taddr = alloca <2 x float>, align 8
  %2 = bitcast <2 x float>* %vec to double*
  store double %1, double* %2, align 8
  %3 = getelementptr inbounds %Matrix2x2, %Matrix2x2* %0, i32 0, i32 0
  %4 = bitcast %.anon* %3 to %.anon.1*
  %5 = getelementptr inbounds %.anon.1, %.anon.1* %4, i32 0, i32 0
  %6 = load <2 x float>, <2 x float>* %5, align 8
  %7 = getelementptr inbounds %Matrix2x2, %Matrix2x2* %0, i32 0, i32 0
  %8 = bitcast %.anon* %7 to %.anon.1*
  %9 = getelementptr inbounds %.anon.1, %.anon.1* %8, i32 0, i32 1
  %10 = load <2 x float>, <2 x float>* %9, align 8
  %shuffle = shufflevector <2 x float> %6, <2 x float> %10, <2 x i32> <i32 0, i32 3>
  store <2 x float> %shuffle, <2 x float>* %a, align 8
  %11 = getelementptr inbounds %Matrix2x2, %Matrix2x2* %0, i32 0, i32 0
  %12 = bitcast %.anon* %11 to %.anon.1*
  %13 = getelementptr inbounds %.anon.1, %.anon.1* %12, i32 0, i32 0
  %14 = load <2 x float>, <2 x float>* %13, align 8
  %15 = getelementptr inbounds %Matrix2x2, %Matrix2x2* %0, i32 0, i32 0
  %16 = bitcast %.anon* %15 to %.anon.1*
  %17 = getelementptr inbounds %.anon.1, %.anon.1* %16, i32 0, i32 1
  %18 = load <2 x float>, <2 x float>* %17, align 8
  %shuffle1 = shufflevector <2 x float> %14, <2 x float> %18, <2 x i32> <i32 1, i32 2>
  store <2 x float> %shuffle1, <2 x float>* %b, align 8
  %19 = load <2 x float>, <2 x float>* %vec, align 8
  %shuffle2 = shufflevector <2 x float> %19, <2 x float> poison, <2 x i32> <i32 1, i32 0>
  store <2 x float> %shuffle2, <2 x float>* %flip, align 8
  %20 = load <2 x float>, <2 x float>* %a, align 8
  %21 = load <2 x float>, <2 x float>* %vec, align 8
  %fmul = fmul <2 x float> %20, %21
  %22 = load <2 x float>, <2 x float>* %b, align 8
  %23 = load <2 x float>, <2 x float>* %flip, align 8
  %fmul3 = fmul <2 x float> %22, %23
  %fadd = fadd <2 x float> %fmul, %fmul3
  store <2 x float> %fadd, <2 x float>* %taddr, align 8
  %24 = bitcast <2 x float>* %taddr to double*
  %25 = load double, double* %24, align 8
  ret double %25