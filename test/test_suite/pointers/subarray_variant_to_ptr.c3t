// #target: macos-x64
module foo;

extern fn void printf(char*, ...);

fn void test1(any* z)
{
    int* w = z.ptr;
    printf("%d\n", *w);
}

fn void test2(int[] z)
{
    int* w = z.ptr;
    printf("%d\n", *w);
}

fn void main()
{
    int x = 123;
    int y = 293483;
    int[2] w = { 144, 772 };
    test1(&x);
    test2(w[..]);
}

/* #expect: foo.ll

%"any*" = type { ptr, i64 }
%"int[]" = type { ptr, i64 }

@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8

define void @foo.test1(i64 %0, ptr %1) #0 {
entry:
  %z = alloca %"any*", align 8
  %w = alloca ptr, align 8
  store i64 %0, ptr %z, align 8
  %ptroffset = getelementptr inbounds ptr, ptr %z, i64 1
  store ptr %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"any*", ptr %z, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  store ptr %3, ptr %w, align 8
  %4 = load ptr, ptr %w, align 8
  %5 = load i32, ptr %4, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %5)
  ret void
}

; Function Attrs: nounwind
define void @foo.test2(ptr %0, i64 %1) #0 {
entry:
  %z = alloca %"int[]", align 8
  %w = alloca ptr, align 8
  store ptr %0, ptr %z, align 8
  %ptroffset = getelementptr inbounds i64, ptr %z, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"int[]", ptr %z, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  store ptr %3, ptr %w, align 8
  %4 = load ptr, ptr %w, align 8
  %5 = load i32, ptr %4, align 4
  call void (ptr, ...) @printf(ptr @.str.1, i32 %5)
  ret void
}

define void @foo.main() #0 {
entry:
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %w = alloca [2 x i32], align 4
  %taddr = alloca %"any*", align 8
  store i32 123, ptr %x, align 4
  store i32 293483, ptr %y, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %w, ptr align 4 @.__const, i32 8, i1 false)
  %0 = insertvalue %"any*" undef, ptr %x, 0
  %1 = insertvalue %"any*" %0, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %1, ptr %taddr, align 8
  %2 = getelementptr inbounds { i64, ptr }, ptr %taddr, i32 0, i32 0
  %lo = load i64, ptr %2, align 8
  %3 = getelementptr inbounds { i64, ptr }, ptr %taddr, i32 0, i32 1
  %hi = load ptr, ptr %3, align 8
  call void @foo.test1(i64 %lo, ptr %hi)
  %4 = getelementptr inbounds [2 x i32], ptr %w, i64 0, i64 0
  %5 = insertvalue %"int[]" undef, ptr %4, 0
  %6 = insertvalue %"int[]" %5, i64 2, 1
  call void @foo.test2(ptr %4, i64 2)
  ret void
}