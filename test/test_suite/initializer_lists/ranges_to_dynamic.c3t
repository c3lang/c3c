// #target: x64-mingw
module test;

extern fn void printf(char*, ...);

fn void test(int x)
{
    int[10] y = { [0..3] = 4, [6..8] = x };
    foreach (int v : y)
    {
        printf("%d\n", v);
    }
}

fn void main()
{
    test(101);
}

/* #expect: test.ll

define void @test.test(i32 %0) #0 {
entry:
  %x = alloca i32, align 4
  %y = alloca [10 x i32], align 16
  %"__idx$" = alloca i64, align 8
  %v = alloca i32, align 4
  store i32 %0, i32* %x, align 4
  %1 = bitcast [10 x i32]* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 40, i1 false)
  %2 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 0
  store i32 4, i32* %2, align 4
  %3 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 1
  store i32 4, i32* %3, align 4
  %4 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 2
  store i32 4, i32* %4, align 4
  %5 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 3
  store i32 4, i32* %5, align 4
  %6 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 6
  %7 = load i32, i32* %x, align 4
  store i32 %7, i32* %6, align 4
  %8 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 7
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 8
  store i32 %7, i32* %9, align 4
  store i64 0, i64* %"__idx$", align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i64, i64* %"__idx$", align 8
  %gt = icmp ugt i64 10, %10
  br i1 %gt, label %for.body, label %for.exit

for.body:                                         ; preds = %for.cond
  %11 = load i64, i64* %"__idx$", align 8
  %12 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  store i32 %13, i32* %v, align 4
  %14 = load i32, i32* %v, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64, i64* %"__idx$", align 8
  %add = add i64 %15, 1
  store i64 %add, i64* %"__idx$", align 8
  br label %for.cond

for.exit:                                         ; preds = %for.cond
  ret void
}
