// #target: macos-x64

import std::io;
import std::core::mem;
import libc;
union Baz
{
    int x;
    double y;
}
struct Bar
{
    int x;
    int y;
}


Bar[] arrbar = { { 3, 4 }, { 8, 9 }};
int[] xd = { 1, 2 };
int* fofeo = &&(int[2]{ 3, 4 });

fn int main()
{
    Bar w = arrbar[1];
    libc::printf("%d\n", arrbar[1].x);
    int[] x = { 1, 2, 3 };
    int* y = &&(int[3]{ 123, 234, 567 });
    io::printn("Start:");
    libc::printf("X len: %d mid element %d\n", (int)(x.len), x[1]);
    libc::printf("Y mid element %d\n", y[1]);
    libc::printf("Fofeo second element %d\n", fofeo[1]);
    Baz ffe = { .x = 1 };
    int[1] azz = {};

    //var $foo = { 1, 2, 3 };
    bool xy = ! int[] { 1, 2, 3 };
    if (!xy) io::printn("Ok");
    Bar b = {};
    Baz z = {};
    int[] sub = {};
    Bar[] foo = {};
    Baz[3] baz = {};
    return 1;
}

/* #expect: subarrays.ll

%Bar = type { i32, i32 }
%"Bar[]" = type { ptr, i64 }
%"int[]" = type { ptr, i64 }
%Baz = type { double }
@"$ct.subarrays.Baz" = linkonce global %.introspect { i8 11, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"$ct.subarrays.Bar" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.taddr = private global [2 x %Bar] [%Bar { i32 3, i32 4 }, %Bar { i32 8, i32 9 }], align 8
@subarrays.arrbar = local_unnamed_addr global %"Bar[]" { ptr @.taddr, i64 2 }, align 8
@.taddr.3 = private global [2 x i32] [i32 1, i32 2], align 4
@subarrays.xd = local_unnamed_addr global %"int[]" { ptr @.taddr.3, i64 2 }, align 8
@.taddr.4 = private global [2 x i32] [i32 3, i32 4], align 4
@subarrays.fofeo = local_unnamed_addr global ptr @.taddr.4, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Start:\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"X len: %d mid element %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"Y mid element %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"Fofeo second element %d\0A\00", align 1
@.__const.10 = private unnamed_addr constant { i32, [4 x i8] } { i32 1, [4 x i8] undef }, align 8
@.str.12 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
; Function Attrs: nounwind
define i32 @main() #0 {
entry:
  %w = alloca %Bar, align 4
  %x = alloca %"int[]", align 8
  %literal = alloca [3 x i32], align 4
  %y = alloca ptr, align 8
  %literal2 = alloca [3 x i32], align 4
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var4 = alloca i64, align 8
  %error_var10 = alloca i64, align 8
  %ffe = alloca %Baz, align 8
  %azz = alloca [1 x i32], align 4
  %xy = alloca i8, align 1
  %literal19 = alloca [3 x i32], align 4
  %len21 = alloca i64, align 8
  %error_var22 = alloca i64, align 8
  %retparam24 = alloca i64, align 8
  %error_var30 = alloca i64, align 8
  %error_var36 = alloca i64, align 8
  %b = alloca %Bar, align 4
  %z = alloca %Baz, align 8
  %sub = alloca %"int[]", align 8
  %foo = alloca %"Bar[]", align 8
  %baz = alloca [3 x %Baz], align 16
  %0 = load ptr, ptr @subarrays.arrbar, align 8
  %ptroffset = getelementptr inbounds %Bar, ptr %0, i64 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %w, ptr align 4 %ptroffset, i32 8, i1 false)
  %1 = load ptr, ptr @subarrays.arrbar, align 8
  %ptroffset1 = getelementptr inbounds %Bar, ptr %1, i64 1
  %2 = getelementptr inbounds %Bar, ptr %ptroffset1, i32 0, i32 0
  %3 = load i32, ptr %2, align 4
  %4 = call i32 (ptr, ...) @printf(ptr @.str, i32 %3)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal, ptr align 4 @.__const, i32 12, i1 false)
  %5 = insertvalue %"int[]" undef, ptr %literal, 0
  %6 = insertvalue %"int[]" %5, i64 3, 1
  store %"int[]" %6, ptr %x, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal2, ptr align 4 @.__const.5, i32 12, i1 false)
  store ptr %literal2, ptr %y, align 8
  %7 = call ptr @std.io.stdout()
  %8 = call i64 @std.io.File.write(ptr %retparam, ptr %7, ptr @.str.6, i64 6)
  %not_err = icmp eq i64 %8, 0
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %9, label %after_check, label %assign_optional
assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %error_var, align 8
  br label %guard_block
after_check:                                      ; preds = %entry
  br label %noerr_block
guard_block:                                      ; preds = %assign_optional
  br label %voiderr
noerr_block:                                      ; preds = %after_check
  %10 = load i64, ptr %retparam, align 8
  store i64 %10, ptr %len, align 8
  %11 = call i64 @std.io.File.write_byte(ptr %7, i8 zeroext 10)
  %not_err5 = icmp eq i64 %11, 0
  %12 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %12, label %after_check7, label %assign_optional6
assign_optional6:                                 ; preds = %noerr_block
  store i64 %11, ptr %error_var4, align 8
  br label %guard_block8
after_check7:                                     ; preds = %noerr_block
  br label %noerr_block9
guard_block8:                                     ; preds = %assign_optional6
  br label %voiderr
noerr_block9:                                     ; preds = %after_check7
  %13 = call i64 @std.io.File.flush(ptr %7)
  %not_err11 = icmp eq i64 %13, 0
  %14 = call i1 @llvm.expect.i1(i1 %not_err11, i1 true)
  br i1 %14, label %after_check13, label %assign_optional12
assign_optional12:                                ; preds = %noerr_block9
  store i64 %13, ptr %error_var10, align 8
  br label %guard_block14
after_check13:                                    ; preds = %noerr_block9
  br label %noerr_block15
guard_block14:                                    ; preds = %assign_optional12
  br label %voiderr
noerr_block15:                                    ; preds = %after_check13
  %15 = load i64, ptr %len, align 8
  %add = add i64 %15, 1
  br label %voiderr
voiderr:                                          ; preds = %noerr_block15, %guard_block14, %guard_block8, %guard_block
  %16 = getelementptr inbounds %"int[]", ptr %x, i32 0, i32 1
  %17 = load i64, ptr %16, align 8
  %trunc = trunc i64 %17 to i32
  %18 = getelementptr inbounds %"int[]", ptr %x, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %ptroffset16 = getelementptr inbounds i32, ptr %19, i64 1
  %20 = load i32, ptr %ptroffset16, align 4
  %21 = call i32 (ptr, ...) @printf(ptr @.str.7, i32 %trunc, i32 %20)
  %22 = load ptr, ptr %y, align 8
  %ptroffset17 = getelementptr inbounds i32, ptr %22, i64 1
  %23 = load i32, ptr %ptroffset17, align 4
  %24 = call i32 (ptr, ...) @printf(ptr @.str.8, i32 %23)
  %25 = load ptr, ptr @subarrays.fofeo, align 8
  %ptroffset18 = getelementptr inbounds i32, ptr %25, i64 1
  %26 = load i32, ptr %ptroffset18, align 4
  %27 = call i32 (ptr, ...) @printf(ptr @.str.9, i32 %26)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ffe, ptr align 8 @.__const.10, i32 8, i1 false)
  %28 = getelementptr inbounds [1 x i32], ptr %azz, i64 0, i64 0
  store i32 0, ptr %28, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal19, ptr align 4 @.__const.11, i32 12, i1 false)
  %29 = insertvalue %"int[]" undef, ptr %literal19, 0
  %30 = insertvalue %"int[]" %29, i64 3, 1
  %31 = extractvalue %"int[]" %30, 1
  %not = icmp eq i64 %31, 0
  %32 = zext i1 %not to i8
  store i8 %32, ptr %xy, align 1
  %33 = load i8, ptr %xy, align 1
  %34 = trunc i8 %33 to i1
  %not20 = xor i1 %34, true
  br i1 %not20, label %if.then, label %if.exit
if.then:                                          ; preds = %voiderr
  %35 = call ptr @std.io.stdout()
  %36 = call i64 @std.io.File.write(ptr %retparam24, ptr %35, ptr @.str.12, i64 2)
  %not_err25 = icmp eq i64 %36, 0
  %37 = call i1 @llvm.expect.i1(i1 %not_err25, i1 true)
  br i1 %37, label %after_check27, label %assign_optional26
assign_optional26:                                ; preds = %if.then
  store i64 %36, ptr %error_var22, align 8
  br label %guard_block28
after_check27:                                    ; preds = %if.then
  br label %noerr_block29
guard_block28:                                    ; preds = %assign_optional26
  br label %voiderr43
noerr_block29:                                    ; preds = %after_check27
  %38 = load i64, ptr %retparam24, align 8
  store i64 %38, ptr %len21, align 8
  %39 = call i64 @std.io.File.write_byte(ptr %35, i8 zeroext 10)
  %not_err31 = icmp eq i64 %39, 0
  %40 = call i1 @llvm.expect.i1(i1 %not_err31, i1 true)
  br i1 %40, label %after_check33, label %assign_optional32
assign_optional32:                                ; preds = %noerr_block29
  store i64 %39, ptr %error_var30, align 8
  br label %guard_block34
after_check33:                                    ; preds = %noerr_block29
  br label %noerr_block35
guard_block34:                                    ; preds = %assign_optional32
  br label %voiderr43
noerr_block35:                                    ; preds = %after_check33
  %41 = call i64 @std.io.File.flush(ptr %35)
  %not_err37 = icmp eq i64 %41, 0
  %42 = call i1 @llvm.expect.i1(i1 %not_err37, i1 true)
  br i1 %42, label %after_check39, label %assign_optional38
assign_optional38:                                ; preds = %noerr_block35
  store i64 %41, ptr %error_var36, align 8
  br label %guard_block40
after_check39:                                    ; preds = %noerr_block35
  br label %noerr_block41
guard_block40:                                    ; preds = %assign_optional38
  br label %voiderr43
noerr_block41:                                    ; preds = %after_check39
  %43 = load i64, ptr %len21, align 8
  %add42 = add i64 %43, 1
  br label %voiderr43
voiderr43:                                        ; preds = %noerr_block41, %guard_block40, %guard_block34, %guard_block28
  br label %if.exit
if.exit:                                          ; preds = %voiderr43, %voiderr
  %44 = getelementptr inbounds %Bar, ptr %b, i32 0, i32 0
  store i32 0, ptr %44, align 4
  %45 = getelementptr inbounds %Bar, ptr %b, i32 0, i32 1
  store i32 0, ptr %45, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %z, i8 0, i64 8, i1 false)
  store %"int[]" zeroinitializer, ptr %sub, align 8
  store %"Bar[]" zeroinitializer, ptr %foo, align 8
  call void @llvm.memset.p0.i64(ptr align 16 %baz, i8 0, i64 24, i1 false)
  ret i32 1
}
