// #target: macos-x64

import std::io;
import std::core::mem;
import libc;
union Baz
{
    int x;
    double y;
}
struct Bar
{
    int x;
    int y;
}


Bar[] arrbar = { { 3, 4 }, { 8, 9 }};
int[] xd = { 1, 2 };
int* fofeo = &&(int[2]{ 3, 4 });

fn int main()
{
    Bar w = arrbar[1];
    libc::printf("%d\n", arrbar[1].x);
    int[] x = { 1, 2, 3 };
    int* y = &&(int[3]{ 123, 234, 567 });
    io::printn("Start:");
    libc::printf("X len: %d mid element %d\n", (int)(x.len), x[1]);
    libc::printf("Y mid element %d\n", y[1]);
    libc::printf("Fofeo second element %d\n", fofeo[1]);
    Baz ffe = { .x = 1 };
    int[1] azz = {};

    //var $foo = { 1, 2, 3 };
    bool xy = ! int[] { 1, 2, 3 };
    if (!xy) io::printn("Ok");
    Bar b = {};
    Baz z = {};
    int[] sub = {};
    Bar[] foo = {};
    Baz[3] baz = {};
    return 1;
}

/* #expect: subarrays.ll

%Bar = type { i32, i32 }
%"Bar[]" = type { ptr, i64 }
%"int[]" = type { ptr, i64 }
%Baz = type { double }

@"$ct.subarrays.Baz" = linkonce global %.introspect { i8 11, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"$ct.subarrays.Bar" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.taddr = private global [2 x %Bar] [%Bar { i32 3, i32 4 }, %Bar { i32 8, i32 9 }], align 8
@subarrays.arrbar = local_unnamed_addr global %"Bar[]" { ptr @.taddr, i64 2 }, align 8
@.taddr.3 = private global [2 x i32] [i32 1, i32 2], align 4
@subarrays.xd = local_unnamed_addr global %"int[]" { ptr @.taddr.3, i64 2 }, align 8
@.taddr.4 = private global [2 x i32] [i32 3, i32 4], align 4
@subarrays.fofeo = local_unnamed_addr global ptr @.taddr.4, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Start:\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"X len: %d mid element %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"Y mid element %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"Fofeo second element %d\0A\00", align 1
@.__const.10 = private unnamed_addr constant { i32, [4 x i8] } { i32 1, [4 x i8] undef }, align 8
@.str.12 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1

; Function Attrs:
define i32 @main() #0 {
entry:
  %w = alloca %Bar, align 4
  %x = alloca %"int[]", align 8
  %literal = alloca [3 x i32], align 4
  %y = alloca ptr, align 8
  %literal2 = alloca [3 x i32], align 4
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var4 = alloca i64, align 8
  %error_var10 = alloca i64, align 8
  %ffe = alloca %Baz, align 8
  %azz = alloca [1 x i32], align 4
  %xy = alloca i8, align 1
  %literal20 = alloca [3 x i32], align 4
  %len22 = alloca i64, align 8
  %error_var23 = alloca i64, align 8
  %retparam25 = alloca i64, align 8
  %error_var31 = alloca i64, align 8
  %error_var37 = alloca i64, align 8
  %b = alloca %Bar, align 4
  %z = alloca %Baz, align 8
  %sub = alloca %"int[]", align 8
  %foo = alloca %"Bar[]", align 8
  %baz = alloca [3 x %Baz], align 16
  %0 = load ptr, ptr @subarrays.arrbar, align 8
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %w, ptr align 4 %ptradd, i32 8, i1 false)
  %1 = load ptr, ptr @subarrays.arrbar, align 8
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8
  %2 = load i32, ptr %ptradd1, align 4
  %3 = call i32 (ptr, ...) @printf(ptr @.str, i32 %2)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal, ptr align 4 @.__const, i32 12, i1 false)
  %4 = insertvalue %"int[]" undef, ptr %literal, 0
  %5 = insertvalue %"int[]" %4, i64 3, 1
  store %"int[]" %5, ptr %x, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal2, ptr align 4 @.__const.5, i32 12, i1 false)
  store ptr %literal2, ptr %y, align 8
  %6 = call ptr @std.io.stdout()
  %7 = call i64 @std.io.File.write(ptr %retparam, ptr %6, ptr @.str.6, i64 6)
  %not_err = icmp eq i64 %7, 0
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %8, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %7, ptr %error_var, align 8
  br label %guard_block
after_check:                                      ; preds = %entry
  br label %noerr_block
guard_block:                                      ; preds = %assign_optional
  br label %voiderr
noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8
  store i64 %9, ptr %len, align 8
  %10 = call i64 @std.io.File.write_byte(ptr %6, i8 zeroext 10)
  %not_err5 = icmp eq i64 %10, 0
  %11 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %11, label %after_check7, label %assign_optional6

assign_optional6:                                 ; preds = %noerr_block
  store i64 %10, ptr %error_var4, align 8
  br label %guard_block8
after_check7:                                     ; preds = %noerr_block
  br label %noerr_block9
guard_block8:                                     ; preds = %assign_optional6
  br label %voiderr
noerr_block9:                                     ; preds = %after_check7
  %12 = call i64 @std.io.File.flush(ptr %6)
  %not_err11 = icmp eq i64 %12, 0
  %13 = call i1 @llvm.expect.i1(i1 %not_err11, i1 true)
  br i1 %13, label %after_check13, label %assign_optional12

assign_optional12:                                ; preds = %noerr_block9
  store i64 %12, ptr %error_var10, align 8
  br label %guard_block14
after_check13:                                    ; preds = %noerr_block9
  br label %noerr_block15
guard_block14:                                    ; preds = %assign_optional12
  br label %voiderr
noerr_block15:                                    ; preds = %after_check13
  %14 = load i64, ptr %len, align 8
  %add = add i64 %14, 1
  br label %voiderr

voiderr:                                          ; preds = %noerr_block15, %guard_block14, %guard_block8, %guard_block
  %ptradd16 = getelementptr inbounds i8, ptr %x, i64 8
  %15 = load i64, ptr %ptradd16, align 8
  %trunc = trunc i64 %15 to i32
  %16 = load ptr, ptr %x, align 8
  %ptradd17 = getelementptr inbounds i8, ptr %16, i64 4
  %17 = load i32, ptr %ptradd17, align 4
  %18 = call i32 (ptr, ...) @printf(ptr @.str.7, i32 %trunc, i32 %17)
  %19 = load ptr, ptr %y, align 8
  %ptradd18 = getelementptr inbounds i8, ptr %19, i64 4
  %20 = load i32, ptr %ptradd18, align 4
  %21 = call i32 (ptr, ...) @printf(ptr @.str.8, i32 %20)
  %22 = load ptr, ptr @subarrays.fofeo, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 4
  %23 = load i32, ptr %ptradd19, align 4
  %24 = call i32 (ptr, ...) @printf(ptr @.str.9, i32 %23)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ffe, ptr align 8 @.__const.10, i32 8, i1 false)
  store i32 0, ptr %azz, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal20, ptr align 4 @.__const.11, i32 12, i1 false)
  %25 = insertvalue %"int[]" undef, ptr %literal20, 0
  %26 = insertvalue %"int[]" %25, i64 3, 1
  %27 = extractvalue %"int[]" %26, 1
  %not = icmp eq i64 %27, 0
  %28 = zext i1 %not to i8
  store i8 %28, ptr %xy, align 1
  %29 = load i8, ptr %xy, align 1
  %30 = trunc i8 %29 to i1
  %not21 = xor i1 %30, true
  br i1 %not21, label %if.then, label %if.exit

if.then:                                          ; preds = %voiderr
  %31 = call ptr @std.io.stdout()
  %32 = call i64 @std.io.File.write(ptr %retparam25, ptr %31, ptr @.str.12, i64 2)
  %not_err26 = icmp eq i64 %32, 0
  %33 = call i1 @llvm.expect.i1(i1 %not_err26, i1 true)
  br i1 %33, label %after_check28, label %assign_optional27

assign_optional27:                                ; preds = %if.then
  store i64 %32, ptr %error_var23, align 8
  br label %guard_block29

after_check28:                                    ; preds = %if.then
  br label %noerr_block30

guard_block29:                                    ; preds = %assign_optional27
  br label %voiderr44

noerr_block30:                                    ; preds = %after_check28
  %34 = load i64, ptr %retparam25, align 8
  store i64 %34, ptr %len22, align 8
  %35 = call i64 @std.io.File.write_byte(ptr %31, i8 zeroext 10)
  %not_err32 = icmp eq i64 %35, 0
  %36 = call i1 @llvm.expect.i1(i1 %not_err32, i1 true)
  br i1 %36, label %after_check34, label %assign_optional33

assign_optional33:                                ; preds = %noerr_block30
  store i64 %35, ptr %error_var31, align 8
  br label %guard_block35

after_check34:                                    ; preds = %noerr_block30
  br label %noerr_block36

guard_block35:                                    ; preds = %assign_optional33
  br label %voiderr44

noerr_block36:                                    ; preds = %after_check34
  %37 = call i64 @std.io.File.flush(ptr %31)
  %not_err38 = icmp eq i64 %37, 0
  %38 = call i1 @llvm.expect.i1(i1 %not_err38, i1 true)
  br i1 %38, label %after_check40, label %assign_optional39

assign_optional39:                                ; preds = %noerr_block36
  store i64 %37, ptr %error_var37, align 8
  br label %guard_block41

after_check40:                                    ; preds = %noerr_block36
  br label %noerr_block42

guard_block41:                                    ; preds = %assign_optional39
  br label %voiderr44

noerr_block42:                                    ; preds = %after_check40
  %39 = load i64, ptr %len22, align 8
  %add43 = add i64 %39, 1
  br label %voiderr44

voiderr44:                                        ; preds = %noerr_block42, %guard_block41, %guard_block35, %guard_block29
  br label %if.exit

if.exit:                                          ; preds = %voiderr44, %voiderr
  store i32 0, ptr %b, align 4
  %ptradd45 = getelementptr inbounds i8, ptr %b, i64 4
  store i32 0, ptr %ptradd45, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %z, i8 0, i64 8, i1 false)
  store %"int[]" zeroinitializer, ptr %sub, align 8
  store %"Bar[]" zeroinitializer, ptr %foo, align 8
  call void @llvm.memset.p0.i64(ptr align 16 %baz, i8 0, i64 24, i1 false)
  ret i32 1
}
