// #target: macos-x64

module test;

extern fn void printf(char*, ...);

fn void retest(foo...)
{
    test(...foo);
}
fn void test(foo...)
{
    printf("Foo1 was: %d\n", *((int*)foo[0]));
}
fn int main()
{
    int i = 1;
    test(1);
    retest(1);
    return 1;
}

/* #expect: test.ll

@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8

define void @test_retest(ptr %0, i64 %1) #0 {
entry:
  %foo = alloca %"variant[]", align 8
  store ptr %0, ptr %foo, align 8
  %ptroffset = getelementptr inbounds i64, ptr %foo, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"variant[]", ptr %foo, i32 0, i32 0
  %lo = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %"variant[]", ptr %foo, i32 0, i32 1
  %hi = load i64, ptr %3, align 8
  call void @test_test(ptr %lo, i64 %hi)
  ret void
}

define void @test_test(ptr %0, i64 %1) #0 {
entry:
  %foo = alloca %"variant[]", align 8
  store ptr %0, ptr %foo, align 8
  %ptroffset = getelementptr inbounds i64, ptr %foo, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"variant[]", ptr %foo, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %ptroffset1 = getelementptr inbounds %variant, ptr %3, i64 0
  %4 = getelementptr inbounds %variant, ptr %ptroffset1, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = load i32, ptr %5, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %6)
  ret void
}

define i32 @main() #0 {
entry:
  %i = alloca i32, align 4
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %varargslots1 = alloca [1 x %variant], align 16
  %taddr2 = alloca i32, align 4
  store i32 1, ptr %i, align 4
  store i32 1, ptr %taddr, align 4
  %0 = insertvalue %variant undef, ptr %taddr, 0
  %1 = insertvalue %variant %0, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %2 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %1, ptr %2, align 16
  call void @test_test(ptr %varargslots, i64 1)
  store i32 1, ptr %taddr2, align 4
  %3 = insertvalue %variant undef, ptr %taddr2, 0
  %4 = insertvalue %variant %3, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %5 = getelementptr inbounds [1 x %variant], ptr %varargslots1, i64 0, i64 0
  store %variant %4, ptr %5, align 16
  call void @test_retest(ptr %varargslots1, i64 1)
  ret i32 1
}