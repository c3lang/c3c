// #target: macos-x64

module test;

extern fn void printf(char*, ...);

fn void retest(foo...)
{
    test(...foo);
}
fn void test(foo...)
{
    printf("Foo1 was: %d\n", *((int*)foo[0]));
}
fn int main()
{
    int i = 1;
    test(1);
    retest(1);
    return 1;
}

/* #expect: test.ll

define void @test_retest(i8* %0, i64 %1) #0 {
entry:
  %foo = alloca %"variant[]", align 8
  %pair = bitcast %"variant[]"* %foo to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %pair, i32 0, i32 0
  store i8* %0, i8** %2, align 8
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %pair, i32 0, i32 1
  store i64 %1, i64* %3, align 8
  %4 = bitcast %"variant[]"* %foo to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %lo = load i8*, i8** %5, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %hi = load i64, i64* %6, align 8
  call void @test_test(i8* %lo, i64 %hi)
  ret void
}

; Function Attrs: nounwind
define void @test_test(i8* %0, i64 %1) #0 {
entry:
  %foo = alloca %"variant[]", align 8
  %pair = bitcast %"variant[]"* %foo to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %pair, i32 0, i32 0
  store i8* %0, i8** %2, align 8
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %pair, i32 0, i32 1
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %"variant[]", %"variant[]"* %foo, i32 0, i32 0
  %5 = load %variant*, %variant** %4, align 8
  %ptroffset = getelementptr inbounds %variant, %variant* %5, i64 0
  %6 = getelementptr inbounds %variant, %variant* %ptroffset, i32 0, i32 0
  %7 = bitcast i8** %6 to i32**
  %8 = load i32*, i32** %7, align 8
  %9 = load i32, i32* %8, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32 %9)
  ret void
}

; Function Attrs: nounwind
define i32 @main() #0 {
entry:
  %i = alloca i32, align 4
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca %"variant[]", align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %taddr3 = alloca i32, align 4
  %taddr4 = alloca %"variant[]", align 8
  store i32 1, i32* %i, align 4
  store i32 1, i32* %taddr, align 4
  %0 = bitcast i32* %taddr to i8*
  %1 = insertvalue %variant undef, i8* %0, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %2, %variant* %3, align 16
  %4 = bitcast [1 x %variant]* %varargslots to %variant*
  %5 = insertvalue %"variant[]" undef, %variant* %4, 0
  %6 = insertvalue %"variant[]" %5, i64 1, 1
  store %"variant[]" %6, %"variant[]"* %taddr1, align 8
  %7 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %lo = load i8*, i8** %8, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %hi = load i64, i64* %9, align 8
  call void @test_test(i8* %lo, i64 %hi)
  store i32 1, i32* %taddr3, align 4
  %10 = bitcast i32* %taddr3 to i8*
  %11 = insertvalue %variant undef, i8* %10, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots2, i64 0, i64 0
  store %variant %12, %variant* %13, align 16
  %14 = bitcast [1 x %variant]* %varargslots2 to %variant*
  %15 = insertvalue %"variant[]" undef, %variant* %14, 0
  %16 = insertvalue %"variant[]" %15, i64 1, 1
  store %"variant[]" %16, %"variant[]"* %taddr4, align 8
  %17 = bitcast %"variant[]"* %taddr4 to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %lo5 = load i8*, i8** %18, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %hi6 = load i64, i64* %19, align 8
  call void @test_retest(i8* %lo5, i64 %hi6)
  ret i32 1
}
