// #target: x64-mingw
module splat;

extern fn int sum_us(int... x);

fn void test()
{
    sum_us(1, 2, 3);
    int[3] x = { 1, 2, 3 };
    int[] z = &x;
    sum_us(...x);
    sum_us(...z);
    sum_us();
}

// #expect: splat.ll

   %vararg = alloca %"int[]", align 8
   %varargslots = alloca [3 x i32], align 4
   %indirectarg = alloca %"int[]", align 8
   %x = alloca [3 x i32], align 4
   %z = alloca %"int[]", align 8
   %vararg1 = alloca %"int[]", align 8
   %indirectarg2 = alloca %"int[]", align 8
   %vararg3 = alloca %"int[]", align 8
   %indirectarg4 = alloca %"int[]", align 8
   %vararg5 = alloca %"int[]", align 8
   %indirectarg6 = alloca %"int[]", align 8
   %0 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 0
   store i32 1, i32* %0, align 4
   %1 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 1
   store i32 2, i32* %1, align 4
   %2 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 2
   store i32 3, i32* %2, align 4
   %3 = getelementptr inbounds %"int[]", %"int[]"* %vararg, i32 0, i32 1
   store i64 3, i64* %3, align 8
   %4 = getelementptr inbounds %"int[]", %"int[]"* %vararg, i32 0, i32 0
   %5 = bitcast [3 x i32]* %varargslots to i32*
   store i32* %5, i32** %4, align 8
   %6 = bitcast %"int[]"* %indirectarg to i8*
   %7 = bitcast %"int[]"* %vararg to i8*
   call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
   %8 = call i32 @sum_us(%"int[]"* %indirectarg)
   %9 = bitcast [3 x i32]* %x to i8*
   call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %9, i8* align 4 bitcast ([3 x i32]* @.__const to i8*), i32 12, i1 false)
   %10 = bitcast [3 x i32]* %x to i32*
   %11 = insertvalue %"int[]" undef, i32* %10, 0
   %12 = insertvalue %"int[]" %11, i64 3, 1
   store %"int[]" %12, %"int[]"* %z, align 8
   %13 = getelementptr inbounds %"int[]", %"int[]"* %vararg1, i32 0, i32 1
   %14 = getelementptr inbounds %"int[]", %"int[]"* %vararg1, i32 0, i32 0
   store i64 3, i64* %13, align 8
   %15 = bitcast [3 x i32]* %x to i32*
   store i32* %15, i32** %14, align 8
   %16 = bitcast %"int[]"* %indirectarg2 to i8*
   %17 = bitcast %"int[]"* %vararg1 to i8*
   call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %16, i8* align 8 %17, i32 16, i1 false)
   %18 = call i32 @sum_us(%"int[]"* %indirectarg2)
   %19 = getelementptr inbounds %"int[]", %"int[]"* %vararg3, i32 0, i32 1
   %20 = getelementptr inbounds %"int[]", %"int[]"* %vararg3, i32 0, i32 0
   %21 = bitcast %"int[]"* %indirectarg4 to i8*
   %22 = bitcast %"int[]"* %z to i8*
   call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %21, i8* align 8 %22, i32 16, i1 false)
   %23 = call i32 @sum_us(%"int[]"* %indirectarg4)
   %24 = getelementptr inbounds %"int[]", %"int[]"* %vararg5, i32 0, i32 1
   store i64 0, i64* %24, align 8
   %25 = bitcast %"int[]"* %indirectarg6 to i8*
   %26 = bitcast %"int[]"* %vararg5 to i8*
   call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %25, i8* align 8 %26, i32 16, i1 false)
   %27 = call i32 @sum_us(%"int[]"* %indirectarg6)
   ret void
