// #target: macos-x64
module test;
import std::io;
define Func = fn int(int y);
define FuncOther = fn bool(char*);
define FuncSame = fn int(int z = 444);

fn int test(int a) { return a; }
fn int test2(int b = 3) { return b; }

fn int! test3(int b = 3) { return b; }
fn int! test4(int b = 3) { return b; }

fn void main()
{
	Func a = &test;
	Func b = &test2;
	io::printfln("%d", a(.y = 123));
	io::printfln("%d", (&test2)());
	FuncSame z = &test2;
	io::printfln("%d", z());
	io::printfln("%s", $typeof(b ? &test2 : &test).qnameof);
	io::printfln("%s", $typeof(b ? &test2 : &test).nameof);
	io::printfln("%s", $typeof(&test2).qnameof);
	io::printfln("%s", $typeof(&test2).nameof);
	io::printfln("%s", $typeof(b ? &test4 : &test3).nameof);

	$typeof(b ? &test2 : &test) y = &test2;
	typeid zfoke = $typeof(y).typeid;
}


/* #expect: test.ll

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$a12$char" = linkonce constant %.introspect { i8 15, i64 12, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 12, [0 x i64] zeroinitializer }, align 8
@"ct$p$a12$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a12$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"test::test2*\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"test2*\00", align 1
@"ct$a6$char" = linkonce constant %.introspect { i8 15, i64 6, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 6, [0 x i64] zeroinitializer }, align 8
@"ct$p$a6$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a6$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"fn int!(int)*\00", align 1
@"ct$a13$char" = linkonce constant %.introspect { i8 15, i64 13, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 13, [0 x i64] zeroinitializer }, align 8
@"ct$p$a13$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a13$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$fn$int$int$" = linkonce constant %.introspect { i8 13, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$p$fn$int$int$" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$fn$int$int$" to i64), i64 0, [0 x i64] zeroinitializer }, align 8


define void @test_main() #0 {
entry:
  %a = alloca i32 (i32)*, align 8
  %b = alloca i32 (i32)*, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr1 = alloca i32, align 4
  %retparam4 = alloca i64, align 8
  %taddr5 = alloca %"char[]", align 8
  %vararg8 = alloca %"variant[]", align 8
  %varargslots9 = alloca [1 x %variant], align 16
  %taddr10 = alloca i32, align 4
  %z = alloca i32 (i32)*, align 8
  %retparam16 = alloca i64, align 8
  %taddr17 = alloca %"char[]", align 8
  %vararg20 = alloca %"variant[]", align 8
  %varargslots21 = alloca [1 x %variant], align 16
  %taddr22 = alloca i32, align 4
  %retparam28 = alloca i64, align 8
  %taddr29 = alloca %"char[]", align 8
  %vararg32 = alloca %"variant[]", align 8
  %varargslots33 = alloca [1 x %variant], align 16
  %taddr34 = alloca [12 x i8]*, align 8
  %retparam40 = alloca i64, align 8
  %taddr41 = alloca %"char[]", align 8
  %vararg44 = alloca %"variant[]", align 8
  %varargslots45 = alloca [1 x %variant], align 16
  %taddr46 = alloca [12 x i8]*, align 8
  %retparam52 = alloca i64, align 8
  %taddr53 = alloca %"char[]", align 8
  %vararg56 = alloca %"variant[]", align 8
  %varargslots57 = alloca [1 x %variant], align 16
  %taddr58 = alloca [12 x i8]*, align 8
  %retparam64 = alloca i64, align 8
  %taddr65 = alloca %"char[]", align 8
  %vararg68 = alloca %"variant[]", align 8
  %varargslots69 = alloca [1 x %variant], align 16
  %taddr70 = alloca [6 x i8]*, align 8
  %retparam76 = alloca i64, align 8
  %taddr77 = alloca %"char[]", align 8
  %vararg80 = alloca %"variant[]", align 8
  %varargslots81 = alloca [1 x %variant], align 16
  %taddr82 = alloca [13 x i8]*, align 8
  %y = alloca i32 (i32)*, align 8
  %zfoke = alloca i64, align 8
  store i32 (i32)* @test_test, i32 (i32)** %a, align 8
  store i32 (i32)* @test_test2, i32 (i32)** %b, align 8
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2 }, %"char[]"* %taddr, align 8
  %0 = bitcast %"char[]"* %taddr to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  %lo = load i8*, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  %hi = load i64, i64* %2, align 8
  %3 = load i32 (i32)*, i32 (i32)** %a, align 8
  %4 = call i32 %3(i32 123)
  store i32 %4, i32* %taddr1, align 4
  %5 = bitcast i32* %taddr1 to i8*
  %6 = insertvalue %variant undef, i8* %5, 0
  %7 = insertvalue %variant %6, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %8 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %7, %variant* %8, align 16
  %9 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 1, i64* %9, align 8
  %10 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %11 = bitcast [1 x %variant]* %varargslots to %variant*
  store %variant* %11, %variant** %10, align 8
  %12 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  %lo2 = load i8*, i8** %13, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  %hi3 = load i64, i64* %14, align 8
  %15 = call i64 @std_io_printfln(i64* %retparam, i8* %lo, i64 %hi, i8* %lo2, i64 %hi3)
  %not_err = icmp eq i64 %15, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i64 2 }, %"char[]"* %taddr5, align 8
  %16 = bitcast %"char[]"* %taddr5 to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %lo6 = load i8*, i8** %17, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %hi7 = load i64, i64* %18, align 8
  %19 = call i32 @test_test2(i32 3)
  store i32 %19, i32* %taddr10, align 4
  %20 = bitcast i32* %taddr10 to i8*
  %21 = insertvalue %variant undef, i8* %20, 0
  %22 = insertvalue %variant %21, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %23 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots9, i64 0, i64 0
  store %variant %22, %variant* %23, align 16
  %24 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg8, i32 0, i32 1
  store i64 1, i64* %24, align 8
  %25 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg8, i32 0, i32 0
  %26 = bitcast [1 x %variant]* %varargslots9 to %variant*
  store %variant* %26, %variant** %25, align 8
  %27 = bitcast %"variant[]"* %vararg8 to { i8*, i64 }*
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 0
  %lo11 = load i8*, i8** %28, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 1
  %hi12 = load i64, i64* %29, align 8
  %30 = call i64 @std_io_printfln(i64* %retparam4, i8* %lo6, i64 %hi7, i8* %lo11, i64 %hi12)
  %not_err13 = icmp eq i64 %30, 0
  br i1 %not_err13, label %after_check14, label %voiderr15

after_check14:                                    ; preds = %voiderr
  br label %voiderr15

voiderr15:                                        ; preds = %after_check14, %voiderr
  store i32 (i32)* @test_test2, i32 (i32)** %z, align 8
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2 }, %"char[]"* %taddr17, align 8
  %31 = bitcast %"char[]"* %taddr17 to { i8*, i64 }*
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 0
  %lo18 = load i8*, i8** %32, align 8
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 1
  %hi19 = load i64, i64* %33, align 8
  %34 = load i32 (i32)*, i32 (i32)** %z, align 8
  %35 = call i32 %34(i32 444)
  store i32 %35, i32* %taddr22, align 4
  %36 = bitcast i32* %taddr22 to i8*
  %37 = insertvalue %variant undef, i8* %36, 0
  %38 = insertvalue %variant %37, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %39 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots21, i64 0, i64 0
  store %variant %38, %variant* %39, align 16
  %40 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg20, i32 0, i32 1
  store i64 1, i64* %40, align 8
  %41 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg20, i32 0, i32 0
  %42 = bitcast [1 x %variant]* %varargslots21 to %variant*
  store %variant* %42, %variant** %41, align 8
  %43 = bitcast %"variant[]"* %vararg20 to { i8*, i64 }*
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 0
  %lo23 = load i8*, i8** %44, align 8
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 1
  %hi24 = load i64, i64* %45, align 8
  %46 = call i64 @std_io_printfln(i64* %retparam16, i8* %lo18, i64 %hi19, i8* %lo23, i64 %hi24)
  %not_err25 = icmp eq i64 %46, 0
  br i1 %not_err25, label %after_check26, label %voiderr27

after_check26:                                    ; preds = %voiderr15
  br label %voiderr27

voiderr27:                                        ; preds = %after_check26, %voiderr15
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2 }, %"char[]"* %taddr29, align 8
  %47 = bitcast %"char[]"* %taddr29 to { i8*, i64 }*
  %48 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %47, i32 0, i32 0
  %lo30 = load i8*, i8** %48, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %47, i32 0, i32 1
  %hi31 = load i64, i64* %49, align 8
  store [12 x i8]* bitcast ([13 x i8]* @.str.4 to [12 x i8]*), [12 x i8]** %taddr34, align 8
  %50 = bitcast [12 x i8]** %taddr34 to i8*
  %51 = insertvalue %variant undef, i8* %50, 0
  %52 = insertvalue %variant %51, i64 ptrtoint (%.introspect* @"ct$p$a12$char" to i64), 1
  %53 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots33, i64 0, i64 0
  store %variant %52, %variant* %53, align 16
  %54 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg32, i32 0, i32 1
  store i64 1, i64* %54, align 8
  %55 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg32, i32 0, i32 0
  %56 = bitcast [1 x %variant]* %varargslots33 to %variant*
  store %variant* %56, %variant** %55, align 8
  %57 = bitcast %"variant[]"* %vararg32 to { i8*, i64 }*
  %58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 0
  %lo35 = load i8*, i8** %58, align 8
  %59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 1
  %hi36 = load i64, i64* %59, align 8
  %60 = call i64 @std_io_printfln(i64* %retparam28, i8* %lo30, i64 %hi31, i8* %lo35, i64 %hi36)
  %not_err37 = icmp eq i64 %60, 0
  br i1 %not_err37, label %after_check38, label %voiderr39

after_check38:                                    ; preds = %voiderr27
  br label %voiderr39

voiderr39:                                        ; preds = %after_check38, %voiderr27
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i64 2 }, %"char[]"* %taddr41, align 8
  %61 = bitcast %"char[]"* %taddr41 to { i8*, i64 }*
  %62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %61, i32 0, i32 0
  %lo42 = load i8*, i8** %62, align 8
  %63 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %61, i32 0, i32 1
  %hi43 = load i64, i64* %63, align 8
  store [12 x i8]* bitcast ([13 x i8]* @.str.6 to [12 x i8]*), [12 x i8]** %taddr46, align 8
  %64 = bitcast [12 x i8]** %taddr46 to i8*
  %65 = insertvalue %variant undef, i8* %64, 0
  %66 = insertvalue %variant %65, i64 ptrtoint (%.introspect* @"ct$p$a12$char" to i64), 1
  %67 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots45, i64 0, i64 0
  store %variant %66, %variant* %67, align 16
  %68 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg44, i32 0, i32 1
  store i64 1, i64* %68, align 8
  %69 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg44, i32 0, i32 0
  %70 = bitcast [1 x %variant]* %varargslots45 to %variant*
  store %variant* %70, %variant** %69, align 8
  %71 = bitcast %"variant[]"* %vararg44 to { i8*, i64 }*
  %72 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %71, i32 0, i32 0
  %lo47 = load i8*, i8** %72, align 8
  %73 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %71, i32 0, i32 1
  %hi48 = load i64, i64* %73, align 8
  %74 = call i64 @std_io_printfln(i64* %retparam40, i8* %lo42, i64 %hi43, i8* %lo47, i64 %hi48)
  %not_err49 = icmp eq i64 %74, 0
  br i1 %not_err49, label %after_check50, label %voiderr51

after_check50:                                    ; preds = %voiderr39
  br label %voiderr51

voiderr51:                                        ; preds = %after_check50, %voiderr39
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i64 2 }, %"char[]"* %taddr53, align 8
  %75 = bitcast %"char[]"* %taddr53 to { i8*, i64 }*
  %76 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %75, i32 0, i32 0
  %lo54 = load i8*, i8** %76, align 8
  %77 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %75, i32 0, i32 1
  %hi55 = load i64, i64* %77, align 8
  store [12 x i8]* bitcast ([13 x i8]* @.str.8 to [12 x i8]*), [12 x i8]** %taddr58, align 8
  %78 = bitcast [12 x i8]** %taddr58 to i8*
  %79 = insertvalue %variant undef, i8* %78, 0
  %80 = insertvalue %variant %79, i64 ptrtoint (%.introspect* @"ct$p$a12$char" to i64), 1
  %81 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots57, i64 0, i64 0
  store %variant %80, %variant* %81, align 16
  %82 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg56, i32 0, i32 1
  store i64 1, i64* %82, align 8
  %83 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg56, i32 0, i32 0
  %84 = bitcast [1 x %variant]* %varargslots57 to %variant*
  store %variant* %84, %variant** %83, align 8
  %85 = bitcast %"variant[]"* %vararg56 to { i8*, i64 }*
  %86 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %85, i32 0, i32 0
  %lo59 = load i8*, i8** %86, align 8
  %87 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %85, i32 0, i32 1
  %hi60 = load i64, i64* %87, align 8
  %88 = call i64 @std_io_printfln(i64* %retparam52, i8* %lo54, i64 %hi55, i8* %lo59, i64 %hi60)
  %not_err61 = icmp eq i64 %88, 0
  br i1 %not_err61, label %after_check62, label %voiderr63

after_check62:                                    ; preds = %voiderr51
  br label %voiderr63

voiderr63:                                        ; preds = %after_check62, %voiderr51
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i64 2 }, %"char[]"* %taddr65, align 8
  %89 = bitcast %"char[]"* %taddr65 to { i8*, i64 }*
  %90 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %89, i32 0, i32 0
  %lo66 = load i8*, i8** %90, align 8
  %91 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %89, i32 0, i32 1
  %hi67 = load i64, i64* %91, align 8
  store [6 x i8]* bitcast ([7 x i8]* @.str.10 to [6 x i8]*), [6 x i8]** %taddr70, align 8
  %92 = bitcast [6 x i8]** %taddr70 to i8*
  %93 = insertvalue %variant undef, i8* %92, 0
  %94 = insertvalue %variant %93, i64 ptrtoint (%.introspect* @"ct$p$a6$char" to i64), 1
  %95 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots69, i64 0, i64 0
  store %variant %94, %variant* %95, align 16
  %96 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg68, i32 0, i32 1
  store i64 1, i64* %96, align 8
  %97 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg68, i32 0, i32 0
  %98 = bitcast [1 x %variant]* %varargslots69 to %variant*
  store %variant* %98, %variant** %97, align 8
  %99 = bitcast %"variant[]"* %vararg68 to { i8*, i64 }*
  %100 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %99, i32 0, i32 0
  %lo71 = load i8*, i8** %100, align 8
  %101 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %99, i32 0, i32 1
  %hi72 = load i64, i64* %101, align 8
  %102 = call i64 @std_io_printfln(i64* %retparam64, i8* %lo66, i64 %hi67, i8* %lo71, i64 %hi72)
  %not_err73 = icmp eq i64 %102, 0
  br i1 %not_err73, label %after_check74, label %voiderr75

after_check74:                                    ; preds = %voiderr63
  br label %voiderr75

voiderr75:                                        ; preds = %after_check74, %voiderr63
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i64 2 }, %"char[]"* %taddr77, align 8
  %103 = bitcast %"char[]"* %taddr77 to { i8*, i64 }*
  %104 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %103, i32 0, i32 0
  %lo78 = load i8*, i8** %104, align 8
  %105 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %103, i32 0, i32 1
  %hi79 = load i64, i64* %105, align 8
  store [13 x i8]* bitcast ([14 x i8]* @.str.12 to [13 x i8]*), [13 x i8]** %taddr82, align 8
  %106 = bitcast [13 x i8]** %taddr82 to i8*
  %107 = insertvalue %variant undef, i8* %106, 0
  %108 = insertvalue %variant %107, i64 ptrtoint (%.introspect* @"ct$p$a13$char" to i64), 1
  %109 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots81, i64 0, i64 0
  store %variant %108, %variant* %109, align 16
  %110 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg80, i32 0, i32 1
  store i64 1, i64* %110, align 8
  %111 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg80, i32 0, i32 0
  %112 = bitcast [1 x %variant]* %varargslots81 to %variant*
  store %variant* %112, %variant** %111, align 8
  %113 = bitcast %"variant[]"* %vararg80 to { i8*, i64 }*
  %114 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %113, i32 0, i32 0
  %lo83 = load i8*, i8** %114, align 8
  %115 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %113, i32 0, i32 1
  %hi84 = load i64, i64* %115, align 8
  %116 = call i64 @std_io_printfln(i64* %retparam76, i8* %lo78, i64 %hi79, i8* %lo83, i64 %hi84)
  %not_err85 = icmp eq i64 %116, 0
  br i1 %not_err85, label %after_check86, label %voiderr87

after_check86:                                    ; preds = %voiderr75
  br label %voiderr87

voiderr87:                                        ; preds = %after_check86, %voiderr75
  store i32 (i32)* @test_test2, i32 (i32)** %y, align 8
  store i64 ptrtoint (%.introspect* @"ct$p$fn$int$int$" to i64), i64* %zfoke, align 8
  ret void
}
