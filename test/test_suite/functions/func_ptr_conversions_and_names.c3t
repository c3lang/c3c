// #target: macos-x64
module test;
import std::io;
define Func = fn int(int y);
define FuncOther = fn bool(char*);
define FuncSame = fn int(int z = 444);

fn int test(int a) { return a; }
fn int test2(int b = 3) { return b; }

fn int! test3(int b = 3) { return b; }
fn int! test4(int b = 3) { return b; }

fn void main()
{
	Func a = &test;
	Func b = &test2;
	io::printfln("%d", a(.y = 123));
	io::printfln("%d", (&test2)());
	FuncSame z = &test2;
	io::printfln("%d", z());
	io::printfln("%s", $typeof(b ? &test2 : &test).qnameof);
	io::printfln("%s", $typeof(b ? &test2 : &test).nameof);
	io::printfln("%s", $typeof(&test2).qnameof);
	io::printfln("%s", $typeof(&test2).nameof);
	io::printfln("%s", $typeof(b ? &test4 : &test3).nameof);

	$typeof(b ? &test2 : &test) y = &test2;
	typeid zfoke = $typeof(y).typeid;
}


/* #expect: test.ll

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@"ct$int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$a12$char" = linkonce constant %.introspect { i8 15, i64 12, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 12, [0 x i64] zeroinitializer }, align 8
@"ct$p$a12$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a12$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.5 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"fn int(int)*\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"test::test2*\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"test2*\00", align 1
@"ct$a6$char" = linkonce constant %.introspect { i8 15, i64 6, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 6, [0 x i64] zeroinitializer }, align 8
@"ct$p$a6$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a6$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"fn int!(int)*\00", align 1
@"ct$a13$char" = linkonce constant %.introspect { i8 15, i64 13, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 13, [0 x i64] zeroinitializer }, align 8
@"ct$p$a13$char" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$a13$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$fn$int$int$" = linkonce constant %.introspect { i8 13, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$p$fn$int$int$" = linkonce constant %.introspect { i8 19, i64 8, i64 ptrtoint (%.introspect* @"ct$fn$int$int$" to i64), i64 0, [0 x i64] zeroinitializer }, align 8


define void @test_main() #0 {
entry:
  %a = alloca i32 (i32)*, align 8
  %b = alloca i32 (i32)*, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca %"variant[]", align 8
  %retparam2 = alloca i64, align 8
  %varargslots3 = alloca [1 x %variant], align 16
  %taddr4 = alloca i32, align 4
  %taddr5 = alloca %"variant[]", align 8
  %z = alloca i32 (i32)*, align 8
  %retparam11 = alloca i64, align 8
  %varargslots12 = alloca [1 x %variant], align 16
  %taddr13 = alloca i32, align 4
  %taddr14 = alloca %"variant[]", align 8
  %retparam20 = alloca i64, align 8
  %varargslots21 = alloca [1 x %variant], align 16
  %taddr22 = alloca [12 x i8]*, align 8
  %taddr23 = alloca %"variant[]", align 8
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %variant], align 16
  %taddr31 = alloca [12 x i8]*, align 8
  %taddr32 = alloca %"variant[]", align 8
  %retparam38 = alloca i64, align 8
  %varargslots39 = alloca [1 x %variant], align 16
  %taddr40 = alloca [12 x i8]*, align 8
  %taddr41 = alloca %"variant[]", align 8
  %retparam47 = alloca i64, align 8
  %varargslots48 = alloca [1 x %variant], align 16
  %taddr49 = alloca [6 x i8]*, align 8
  %taddr50 = alloca %"variant[]", align 8
  %retparam56 = alloca i64, align 8
  %varargslots57 = alloca [1 x %variant], align 16
  %taddr58 = alloca [13 x i8]*, align 8
  %taddr59 = alloca %"variant[]", align 8
  %y = alloca i32 (i32)*, align 8
  %zfoke = alloca i64, align 8
  store i32 (i32)* @test_test, i32 (i32)** %a, align 8
  store i32 (i32)* @test_test2, i32 (i32)** %b, align 8
  %0 = load i32 (i32)*, i32 (i32)** %a, align 8
  %1 = call i32 %0(i32 123)
  store i32 %1, i32* %taddr, align 4
  %2 = bitcast i32* %taddr to i8*
  %3 = insertvalue %variant undef, i8* %2, 0
  %4 = insertvalue %variant %3, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %5 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %4, %variant* %5, align 16
  %6 = bitcast [1 x %variant]* %varargslots to %variant*
  %7 = insertvalue %"variant[]" undef, %variant* %6, 0
  %8 = insertvalue %"variant[]" %7, i64 1, 1
  store %"variant[]" %8, %"variant[]"* %taddr1, align 8
  %9 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %lo = load i8*, i8** %10, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %hi = load i64, i64* %11, align 8
  %12 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %12, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %13 = call i32 @test_test2(i32 3)
  store i32 %13, i32* %taddr4, align 4
  %14 = bitcast i32* %taddr4 to i8*
  %15 = insertvalue %variant undef, i8* %14, 0
  %16 = insertvalue %variant %15, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %17 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots3, i64 0, i64 0
  store %variant %16, %variant* %17, align 16
  %18 = bitcast [1 x %variant]* %varargslots3 to %variant*
  %19 = insertvalue %"variant[]" undef, %variant* %18, 0
  %20 = insertvalue %"variant[]" %19, i64 1, 1
  store %"variant[]" %20, %"variant[]"* %taddr5, align 8
  %21 = bitcast %"variant[]"* %taddr5 to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %lo6 = load i8*, i8** %22, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %hi7 = load i64, i64* %23, align 8
  %24 = call i64 @std_io_printfln(i64* %retparam2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i64 2, i8* %lo6, i64 %hi7)
  %not_err8 = icmp eq i64 %24, 0
  br i1 %not_err8, label %after_check9, label %voiderr10

after_check9:                                     ; preds = %voiderr
  br label %voiderr10

voiderr10:                                        ; preds = %after_check9, %voiderr
  store i32 (i32)* @test_test2, i32 (i32)** %z, align 8
  %25 = load i32 (i32)*, i32 (i32)** %z, align 8
  %26 = call i32 %25(i32 444)
  store i32 %26, i32* %taddr13, align 4
  %27 = bitcast i32* %taddr13 to i8*
  %28 = insertvalue %variant undef, i8* %27, 0
  %29 = insertvalue %variant %28, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %30 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots12, i64 0, i64 0
  store %variant %29, %variant* %30, align 16
  %31 = bitcast [1 x %variant]* %varargslots12 to %variant*
  %32 = insertvalue %"variant[]" undef, %variant* %31, 0
  %33 = insertvalue %"variant[]" %32, i64 1, 1
  store %"variant[]" %33, %"variant[]"* %taddr14, align 8
  %34 = bitcast %"variant[]"* %taddr14 to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %lo15 = load i8*, i8** %35, align 8
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %hi16 = load i64, i64* %36, align 8
  %37 = call i64 @std_io_printfln(i64* %retparam11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2, i8* %lo15, i64 %hi16)
  %not_err17 = icmp eq i64 %37, 0
  br i1 %not_err17, label %after_check18, label %voiderr19

after_check18:                                    ; preds = %voiderr10
  br label %voiderr19

voiderr19:                                        ; preds = %after_check18, %voiderr10
  store [12 x i8]* bitcast ([13 x i8]* @.str.4 to [12 x i8]*), [12 x i8]** %taddr22, align 8
  %38 = bitcast [12 x i8]** %taddr22 to i8*
  %39 = insertvalue %variant undef, i8* %38, 0
  %40 = insertvalue %variant %39, i64 ptrtoint (%.introspect* @"ct$p$a12$char" to i64), 1
  %41 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots21, i64 0, i64 0
  store %variant %40, %variant* %41, align 16
  %42 = bitcast [1 x %variant]* %varargslots21 to %variant*
  %43 = insertvalue %"variant[]" undef, %variant* %42, 0
  %44 = insertvalue %"variant[]" %43, i64 1, 1
  store %"variant[]" %44, %"variant[]"* %taddr23, align 8
  %45 = bitcast %"variant[]"* %taddr23 to { i8*, i64 }*
  %46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %45, i32 0, i32 0
  %lo24 = load i8*, i8** %46, align 8
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %45, i32 0, i32 1
  %hi25 = load i64, i64* %47, align 8
  %48 = call i64 @std_io_printfln(i64* %retparam20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2, i8* %lo24, i64 %hi25)
  %not_err26 = icmp eq i64 %48, 0
  br i1 %not_err26, label %after_check27, label %voiderr28

after_check27:                                    ; preds = %voiderr19
  br label %voiderr28

voiderr28:                                        ; preds = %after_check27, %voiderr19
  store [12 x i8]* bitcast ([13 x i8]* @.str.6 to [12 x i8]*), [12 x i8]** %taddr31, align 8
  %49 = bitcast [12 x i8]** %taddr31 to i8*
  %50 = insertvalue %variant undef, i8* %49, 0
  %51 = insertvalue %variant %50, i64 ptrtoint (%.introspect* @"ct$p$a12$char" to i64), 1
  %52 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots30, i64 0, i64 0
  store %variant %51, %variant* %52, align 16
  %53 = bitcast [1 x %variant]* %varargslots30 to %variant*
  %54 = insertvalue %"variant[]" undef, %variant* %53, 0
  %55 = insertvalue %"variant[]" %54, i64 1, 1
  store %"variant[]" %55, %"variant[]"* %taddr32, align 8
  %56 = bitcast %"variant[]"* %taddr32 to { i8*, i64 }*
  %57 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 0
  %lo33 = load i8*, i8** %57, align 8
  %58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 1
  %hi34 = load i64, i64* %58, align 8
  %59 = call i64 @std_io_printfln(i64* %retparam29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i64 2, i8* %lo33, i64 %hi34)
  %not_err35 = icmp eq i64 %59, 0
  br i1 %not_err35, label %after_check36, label %voiderr37

after_check36:                                    ; preds = %voiderr28
  br label %voiderr37

voiderr37:                                        ; preds = %after_check36, %voiderr28
  store [12 x i8]* bitcast ([13 x i8]* @.str.8 to [12 x i8]*), [12 x i8]** %taddr40, align 8
  %60 = bitcast [12 x i8]** %taddr40 to i8*
  %61 = insertvalue %variant undef, i8* %60, 0
  %62 = insertvalue %variant %61, i64 ptrtoint (%.introspect* @"ct$p$a12$char" to i64), 1
  %63 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots39, i64 0, i64 0
  store %variant %62, %variant* %63, align 16
  %64 = bitcast [1 x %variant]* %varargslots39 to %variant*
  %65 = insertvalue %"variant[]" undef, %variant* %64, 0
  %66 = insertvalue %"variant[]" %65, i64 1, 1
  store %"variant[]" %66, %"variant[]"* %taddr41, align 8
  %67 = bitcast %"variant[]"* %taddr41 to { i8*, i64 }*
  %68 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %67, i32 0, i32 0
  %lo42 = load i8*, i8** %68, align 8
  %69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %67, i32 0, i32 1
  %hi43 = load i64, i64* %69, align 8
  %70 = call i64 @std_io_printfln(i64* %retparam38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i64 2, i8* %lo42, i64 %hi43)
  %not_err44 = icmp eq i64 %70, 0
  br i1 %not_err44, label %after_check45, label %voiderr46

after_check45:                                    ; preds = %voiderr37
  br label %voiderr46

voiderr46:                                        ; preds = %after_check45, %voiderr37
  store [6 x i8]* bitcast ([7 x i8]* @.str.10 to [6 x i8]*), [6 x i8]** %taddr49, align 8
  %71 = bitcast [6 x i8]** %taddr49 to i8*
  %72 = insertvalue %variant undef, i8* %71, 0
  %73 = insertvalue %variant %72, i64 ptrtoint (%.introspect* @"ct$p$a6$char" to i64), 1
  %74 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots48, i64 0, i64 0
  store %variant %73, %variant* %74, align 16
  %75 = bitcast [1 x %variant]* %varargslots48 to %variant*
  %76 = insertvalue %"variant[]" undef, %variant* %75, 0
  %77 = insertvalue %"variant[]" %76, i64 1, 1
  store %"variant[]" %77, %"variant[]"* %taddr50, align 8
  %78 = bitcast %"variant[]"* %taddr50 to { i8*, i64 }*
  %79 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 0
  %lo51 = load i8*, i8** %79, align 8
  %80 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 1
  %hi52 = load i64, i64* %80, align 8
  %81 = call i64 @std_io_printfln(i64* %retparam47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i64 2, i8* %lo51, i64 %hi52)
  %not_err53 = icmp eq i64 %81, 0
  br i1 %not_err53, label %after_check54, label %voiderr55

after_check54:                                    ; preds = %voiderr46
  br label %voiderr55

voiderr55:                                        ; preds = %after_check54, %voiderr46
  store [13 x i8]* bitcast ([14 x i8]* @.str.12 to [13 x i8]*), [13 x i8]** %taddr58, align 8
  %82 = bitcast [13 x i8]** %taddr58 to i8*
  %83 = insertvalue %variant undef, i8* %82, 0
  %84 = insertvalue %variant %83, i64 ptrtoint (%.introspect* @"ct$p$a13$char" to i64), 1
  %85 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots57, i64 0, i64 0
  store %variant %84, %variant* %85, align 16
  %86 = bitcast [1 x %variant]* %varargslots57 to %variant*
  %87 = insertvalue %"variant[]" undef, %variant* %86, 0
  %88 = insertvalue %"variant[]" %87, i64 1, 1
  store %"variant[]" %88, %"variant[]"* %taddr59, align 8
  %89 = bitcast %"variant[]"* %taddr59 to { i8*, i64 }*
  %90 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %89, i32 0, i32 0
  %lo60 = load i8*, i8** %90, align 8
  %91 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %89, i32 0, i32 1
  %hi61 = load i64, i64* %91, align 8
  %92 = call i64 @std_io_printfln(i64* %retparam56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i64 2, i8* %lo60, i64 %hi61)
  %not_err62 = icmp eq i64 %92, 0
  br i1 %not_err62, label %after_check63, label %voiderr64

after_check63:                                    ; preds = %voiderr55
  br label %voiderr64

voiderr64:                                        ; preds = %after_check63, %voiderr55
  store i32 (i32)* @test_test2, i32 (i32)** %y, align 8
  store i64 ptrtoint (%.introspect* @"ct$p$fn$int$int$" to i64), i64* %zfoke, align 8
  ret void
}
