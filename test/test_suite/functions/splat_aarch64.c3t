// #target: linux-aarch64
module splat;

extern fn int sum_us(int... x);

fn void test()
{
    sum_us(1, 2, 3);
    int[3] x = { 1, 2, 3 };
    int[] z = &x;
    sum_us(...x);
    sum_us(...z);
    sum_us();
}

/* #expect: splat.ll


%"int[]" = type { ptr, i64 }

declare i32 @sum_us([2 x i64]) #0

; Function Attrs:
define void @splat.test() #0 {
entry:
  %varargslots = alloca [3 x i32], align 4
  %taddr = alloca %"int[]", align 8
  %x = alloca [3 x i32], align 4
  %z = alloca %"int[]", align 8
  %taddr2 = alloca %"int[]", align 8
  %taddr3 = alloca %"int[]", align 8
  store i32 1, ptr %varargslots, align 4
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 4
  store i32 2, ptr %ptradd, align 4
  %ptradd1 = getelementptr inbounds i8, ptr %varargslots, i64 8
  store i32 3, ptr %ptradd1, align 4
  %0 = insertvalue %"int[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"int[]" %0, i64 3, 1
  store %"int[]" %"$$temp", ptr %taddr, align 8
  %1 = load [2 x i64], ptr %taddr, align 8
  %2 = call i32 @sum_us([2 x i64] %1)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %x, ptr align 4 @.__const, i32 12, i1 false)
  %3 = insertvalue %"int[]" undef, ptr %x, 0
  %4 = insertvalue %"int[]" %3, i64 3, 1
  store %"int[]" %4, ptr %z, align 8
  %5 = insertvalue %"int[]" undef, ptr %x, 0
  %6 = insertvalue %"int[]" %5, i64 3, 1
  store %"int[]" %6, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = call i32 @sum_us([2 x i64] %7)
  %9 = load [2 x i64], ptr %z, align 8
  %10 = call i32 @sum_us([2 x i64] %9)
  store %"int[]" zeroinitializer, ptr %taddr3, align 8
  %11 = load [2 x i64], ptr %taddr3, align 8
  %12 = call i32 @sum_us([2 x i64] %11)
  ret void
}
