// #target: linux-aarch64
module splat;

extern fn int sum_us(int... x);

fn void test()
{
    sum_us(1, 2, 3);
    int[3] x = { 1, 2, 3 };
    int[] z = &x;
    sum_us(...x);
    sum_us(...z);
    sum_us();
}

/* #expect: splat.ll

%"int[]" = type { i32*, i64 }

declare i32 @sum_us([2 x i64]) #0

define void @splat_test() #0 {
entry:
  %varargslots = alloca [3 x i32], align 4
  %taddr = alloca %"int[]", align 8
  %x = alloca [3 x i32], align 4
  %z = alloca %"int[]", align 8
  %taddr1 = alloca %"int[]", align 8
  %taddr2 = alloca %"int[]", align 8
  %0 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 2
  store i32 3, i32* %2, align 4
  %3 = bitcast [3 x i32]* %varargslots to i32*
  %4 = insertvalue %"int[]" undef, i32* %3, 0
  %5 = insertvalue %"int[]" %4, i64 3, 1
  store %"int[]" %5, %"int[]"* %taddr, align 8
  %6 = bitcast %"int[]"* %taddr to [2 x i64]*
  %7 = load [2 x i64], [2 x i64]* %6, align 8
  %8 = call i32 @sum_us([2 x i64] %7)
  %9 = bitcast [3 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %9, i8* align 4 bitcast ([3 x i32]* @.__const to i8*), i32 12, i1 false)
  %10 = bitcast [3 x i32]* %x to i32*
  %11 = insertvalue %"int[]" undef, i32* %10, 0
  %12 = insertvalue %"int[]" %11, i64 3, 1
  store %"int[]" %12, %"int[]"* %z, align 8
  %13 = bitcast [3 x i32]* %x to i32*
  %14 = insertvalue %"int[]" undef, i32* %13, 0
  %15 = insertvalue %"int[]" %14, i64 3, 1
  store %"int[]" %15, %"int[]"* %taddr1, align 8
  %16 = bitcast %"int[]"* %taddr1 to [2 x i64]*
  %17 = load [2 x i64], [2 x i64]* %16, align 8
  %18 = call i32 @sum_us([2 x i64] %17)
  %19 = bitcast %"int[]"* %z to [2 x i64]*
  %20 = load [2 x i64], [2 x i64]* %19, align 8
  %21 = call i32 @sum_us([2 x i64] %20)
  store %"int[]" zeroinitializer, %"int[]"* %taddr2, align 8
  %22 = bitcast %"int[]"* %taddr2 to [2 x i64]*
  %23 = load [2 x i64], [2 x i64]* %22, align 8
  %24 = call i32 @sum_us([2 x i64] %23)
  ret void
}
