// #target: x64-darwin
module splat;

extern func int sum_us(int... x);

func void test()
{
    sum_us(1, 2, 3);
    int[3] x = { 1, 2, 3 };
    int[] z = &x;
    sum_us(...x);
    sum_us(...z);
    sum_us();
}

// #expect: splat.ll

  %vararg = alloca %"int[]", align 8
  %varargslots = alloca [3 x i32], align 4
  %x = alloca [3 x i32], align 4
  %z = alloca %"int[]", align 8
  %vararg1 = alloca %"int[]", align 8
  %vararg4 = alloca %"int[]", align 8
  %vararg7 = alloca %"int[]", align 8
  %0 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [3 x i32], [3 x i32]* %varargslots, i64 0, i64 2
  store i32 3, i32* %2, align 4
  %3 = getelementptr inbounds %"int[]", %"int[]"* %vararg, i32 0, i32 1
  store i64 3, i64* %3, align 8
  %4 = getelementptr inbounds %"int[]", %"int[]"* %vararg, i32 0, i32 0
  %5 = bitcast [3 x i32]* %varargslots to i32*
  store i32* %5, i32** %4, align 8
  %6 = bitcast %"int[]"* %vararg to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  %lo = load i8*, i8** %7, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  %hi = load i64, i64* %8, align 8
  %9 = call i32 @sum_us(i8* %lo, i64 %hi)
  %10 = bitcast [3 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %10, i8* align 4 bitcast ([3 x i32]* @.__const to i8*), i32 12, i1 false)
  %11 = bitcast [3 x i32]* %x to i32*
  %12 = insertvalue %"int[]" undef, i32* %11, 0
  %13 = insertvalue %"int[]" %12, i64 3, 1
  store %"int[]" %13, %"int[]"* %z, align 8
  %14 = getelementptr inbounds %"int[]", %"int[]"* %vararg1, i32 0, i32 1
  %15 = getelementptr inbounds %"int[]", %"int[]"* %vararg1, i32 0, i32 0
  store i64 3, i64* %14, align 8
  %16 = bitcast [3 x i32]* %x to i32*
  store i32* %16, i32** %15, align 8
  %17 = bitcast %"int[]"* %vararg1 to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %lo2 = load i8*, i8** %18, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %hi3 = load i64, i64* %19, align 8
  %20 = call i32 @sum_us(i8* %lo2, i64 %hi3)
  %21 = getelementptr inbounds %"int[]", %"int[]"* %vararg4, i32 0, i32 1
  %22 = getelementptr inbounds %"int[]", %"int[]"* %vararg4, i32 0, i32 0
  %23 = bitcast %"int[]"* %z to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %lo5 = load i8*, i8** %24, align 8
  %25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %hi6 = load i64, i64* %25, align 8
  %26 = call i32 @sum_us(i8* %lo5, i64 %hi6)
  %27 = getelementptr inbounds %"int[]", %"int[]"* %vararg7, i32 0, i32 1
  store i64 0, i64* %27, align 8
  %28 = bitcast %"int[]"* %vararg7 to { i8*, i64 }*
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %28, i32 0, i32 0
  %lo8 = load i8*, i8** %29, align 8
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %28, i32 0, i32 1
  %hi9 = load i64, i64* %30, align 8
  %31 = call i32 @sum_us(i8* %lo8, i64 %hi9)
  ret void
