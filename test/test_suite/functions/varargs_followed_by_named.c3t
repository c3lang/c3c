// #target: macos-x64
module foo;

extern fn void printf(char* format, ...);

fn void test(int x, int... y, int z = 2)
{
	printf("Got %d %d %d %d\n", x, (int)y.len, z, y[0]);
}
fn void test2(int x, y..., int z = 2)
{
	printf("Got %d %d %d\n", x, (int)y.len, z);
}

fn void main()
{
	test(3, 4, 5, .z = 123);
	test2(3, 4, 5, .z = 123);
	test(3, 4, 5);
	test2(3, 4, 5);
}

/* #expect: foo.ll

define void @foo_test(i32 %0, ptr %1, i64 %2, i32 %3) #0 {
entry:
  %y = alloca %"int[]", align 8
  store ptr %1, ptr %y, align 8
  %ptroffset = getelementptr inbounds i64, ptr %y, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %4 = getelementptr inbounds %"int[]", ptr %y, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  %uisitrunc = trunc i64 %5 to i32
  %6 = getelementptr inbounds %"int[]", ptr %y, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %ptroffset1 = getelementptr inbounds i32, ptr %7, i64 0
  %8 = load i32, ptr %ptroffset1, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %0, i32 %uisitrunc, i32 %3, i32 %8)
  ret void
}

; Function Attrs: nounwind
define void @foo_test2(i32 %0, ptr %1, i64 %2, i32 %3) #0 {
entry:
  %y = alloca %"variant[]", align 8
  store ptr %1, ptr %y, align 8
  %ptroffset = getelementptr inbounds i64, ptr %y, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %4 = getelementptr inbounds %"variant[]", ptr %y, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  %uisitrunc = trunc i64 %5 to i32
  call void (ptr, ...) @printf(ptr @.str.1, i32 %0, i32 %uisitrunc, i32 %3)
  ret void
}

; Function Attrs: nounwind
define void @foo_main() #0 {
entry:
  %varargslots = alloca [2 x i32], align 4
  %varargslots1 = alloca [2 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr2 = alloca i32, align 4
  %varargslots3 = alloca [2 x i32], align 4
  %varargslots4 = alloca [2 x %variant], align 16
  %taddr5 = alloca i32, align 4
  %taddr6 = alloca i32, align 4
  %0 = getelementptr inbounds [2 x i32], ptr %varargslots, i64 0, i64 0
  store i32 4, ptr %0, align 4
  %1 = getelementptr inbounds [2 x i32], ptr %varargslots, i64 0, i64 1
  store i32 5, ptr %1, align 4
  call void @foo_test(i32 3, ptr %varargslots, i64 2, i32 123)
  store i32 4, ptr %taddr, align 4
  %2 = insertvalue %variant undef, ptr %taddr, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %4 = getelementptr inbounds [2 x %variant], ptr %varargslots1, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  store i32 5, ptr %taddr2, align 4
  %5 = insertvalue %variant undef, ptr %taddr2, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %7 = getelementptr inbounds [2 x %variant], ptr %varargslots1, i64 0, i64 1
  store %variant %6, ptr %7, align 16
  call void @foo_test2(i32 3, ptr %varargslots1, i64 2, i32 123)
  %8 = getelementptr inbounds [2 x i32], ptr %varargslots3, i64 0, i64 0
  store i32 4, ptr %8, align 4
  %9 = getelementptr inbounds [2 x i32], ptr %varargslots3, i64 0, i64 1
  store i32 5, ptr %9, align 4
  call void @foo_test(i32 3, ptr %varargslots3, i64 2, i32 2)
  store i32 4, ptr %taddr5, align 4
  %10 = insertvalue %variant undef, ptr %taddr5, 0
  %11 = insertvalue %variant %10, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %12 = getelementptr inbounds [2 x %variant], ptr %varargslots4, i64 0, i64 0
  store %variant %11, ptr %12, align 16
  store i32 5, ptr %taddr6, align 4
  %13 = insertvalue %variant undef, ptr %taddr6, 0
  %14 = insertvalue %variant %13, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %15 = getelementptr inbounds [2 x %variant], ptr %varargslots4, i64 0, i64 1
  store %variant %14, ptr %15, align 16
  call void @foo_test2(i32 3, ptr %varargslots4, i64 2, i32 2)
  ret void
}