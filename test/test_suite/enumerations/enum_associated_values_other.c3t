// #target: macos-x64
module test;
import std::io;
import abc;

fn void main(String[] args)
{
	typeid y = Abc.typeid;
	int* x = &abc::dabc;
	Foo a = Foo.DEF;
	String z = a.val;
	io::printfn("%s", z);
}

module abc;
int dabc;

struct Abc { int x; }
enum Foo : int(String val)
{
	ABC("hello"),
	DEF("world")
}

/* #expect: abc.ll

@"$ct.abc.Abc" = linkonce constant %.introspect { i8 10, i64 4, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.enum.0 = internal constant [4 x i8] c"ABC\00", align 1
@.enum.1 = internal constant [4 x i8] c"DEF\00", align 1
@"$ct.int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.abc.Foo" = linkonce constant { i8, i64, i64, i64, [2 x %"char[]"] } { i8 8, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 2, [2 x %"char[]"] [%"char[]" { ptr @.enum.0, i64 3 }, %"char[]" { ptr @.enum.1, i64 3 }] }, align 8
@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"world\00", align 1
@"abc.Foo$val" = linkonce constant [2 x %"char[]"] [%"char[]" { ptr @.str, i64 5 }, %"char[]" { ptr @.str.1, i64 5 }], align 8
@abc.dabc = global i32 0, align 4


// #expect: test.ll

@"$ct.abc.Abc" = linkonce constant %.introspect { i8 10, i64 4, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@abc.dabc = external global i32, align 4
@.enum.0 = internal constant [4 x i8] c"ABC\00", align 1
@.enum.1 = internal constant [4 x i8] c"DEF\00", align 1
@"$ct.int" = linkonce constant %.introspect { i8 2, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.abc.Foo" = linkonce constant { i8, i64, i64, i64, [2 x %"char[]"] } { i8 8, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 2, [2 x %"char[]"] [%"char[]" { ptr @.enum.0, i64 3 }, %"char[]" { ptr @.enum.1, i64 3 }] }, align 8
@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"world\00", align 1
@"abc.Foo$val" = linkonce constant [2 x %"char[]"] [%"char[]" { ptr @.str, i64 5 }, %"char[]" { ptr @.str.1, i64 5 }], align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@"$ct.char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.sa$char" = linkonce constant %.introspect { i8 16, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8

define void @test.main(ptr %0, i64 %1) #0 {
entry:
  %args = alloca %"char[][]", align 8
  %y = alloca i64, align 8
  %x = alloca ptr, align 8
  %a = alloca i32, align 4
  %z = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  store ptr %0, ptr %args, align 8
  %ptroffset = getelementptr inbounds i64, ptr %args, i64 1
  store i64 %1, ptr %ptroffset, align 8
  store i64 ptrtoint (ptr @"$ct.abc.Abc" to i64), ptr %y, align 8
  store ptr @abc.dabc, ptr %x, align 8
  store i32 1, ptr %a, align 4
  %2 = load i32, ptr %a, align 4
  %3 = getelementptr inbounds [2 x %"char[]"], ptr @"abc.Foo$val", i32 0, i32 %2
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %z, ptr align 8 %3, i32 16, i1 false)
  %4 = insertvalue %any undef, ptr %z, 0
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %6 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %5, ptr %6, align 16
  %7 = call i64 @std.io.printfn(ptr %retparam, ptr @.str.2, i64 2, ptr %varargslots, i64 1)
  ret void
}