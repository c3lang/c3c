// #target: macos-x64
module test;
import std::io;
import std::bits;
fn void main()
{
	int a = 123;
	int b = -23;
	int c = $$min(a, b);
	int d = $$max(a, b);
	io::printfn("%d %d", c, d);
	char z = 0b1101_1101;
	io::printfn("%b %b %b", z, z.rotr(1), z.rotl(1));
}

/* #expect: test.ll

define void @test.main() #0 {
entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %varargslots = alloca [2 x %"any*"], align 16
  %retparam = alloca i64, align 8
  %z = alloca i8, align 1
  %varargslots1 = alloca [3 x %"any*"], align 16
  %self = alloca i8, align 1
  %taddr = alloca i8, align 1
  %self2 = alloca i8, align 1
  %taddr3 = alloca i8, align 1
  %retparam4 = alloca i64, align 8
  store i32 123, ptr %a, align 4
  store i32 -23, ptr %b, align 4
  %0 = load i32, ptr %a, align 4
  %1 = load i32, ptr %b, align 4
  %2 = call i32 @llvm.smin.i32(i32 %0, i32 %1)
  store i32 %2, ptr %c, align 4
  %3 = load i32, ptr %a, align 4
  %4 = load i32, ptr %b, align 4
  %5 = call i32 @llvm.smax.i32(i32 %3, i32 %4)
  store i32 %5, ptr %d, align 4
  %6 = insertvalue %"any*" undef, ptr %c, 0
  %7 = insertvalue %"any*" %6, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %8 = getelementptr inbounds [2 x %"any*"], ptr %varargslots, i64 0, i64 0
  store %"any*" %7, ptr %8, align 16
  %9 = insertvalue %"any*" undef, ptr %d, 0
  %10 = insertvalue %"any*" %9, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %11 = getelementptr inbounds [2 x %"any*"], ptr %varargslots, i64 0, i64 1
  store %"any*" %10, ptr %11, align 16
  %12 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 5, ptr %varargslots, i64 2)
  store i8 -35, ptr %z, align 1
  %13 = insertvalue %"any*" undef, ptr %z, 0
  %14 = insertvalue %"any*" %13, i64 ptrtoint (ptr @"$ct.char" to i64), 1
  %15 = getelementptr inbounds [3 x %"any*"], ptr %varargslots1, i64 0, i64 0
  store %"any*" %14, ptr %15, align 16
  %16 = load i8, ptr %z, align 1
  store i8 %16, ptr %self, align 1
  %17 = load i8, ptr %self, align 1
  %18 = load i8, ptr %self, align 1
  %19 = call i8 @llvm.fshr.i8(i8 %17, i8 %18, i8 1)
  store i8 %19, ptr %taddr, align 1
  %20 = insertvalue %"any*" undef, ptr %taddr, 0
  %21 = insertvalue %"any*" %20, i64 ptrtoint (ptr @"$ct.char" to i64), 1
  %22 = getelementptr inbounds [3 x %"any*"], ptr %varargslots1, i64 0, i64 1
  store %"any*" %21, ptr %22, align 16
  %23 = load i8, ptr %z, align 1
  store i8 %23, ptr %self2, align 1
  %24 = load i8, ptr %self2, align 1
  %25 = load i8, ptr %self2, align 1
  %26 = call i8 @llvm.fshl.i8(i8 %24, i8 %25, i8 1)
  store i8 %26, ptr %taddr3, align 1
  %27 = insertvalue %"any*" undef, ptr %taddr3, 0
  %28 = insertvalue %"any*" %27, i64 ptrtoint (ptr @"$ct.char" to i64), 1
  %29 = getelementptr inbounds [3 x %"any*"], ptr %varargslots1, i64 0, i64 2
  store %"any*" %28, ptr %29, align 16
  %30 = call i64 @std.io.printfn(ptr %retparam4, ptr @.str.1, i64 8, ptr %varargslots1, i64 3)
  ret void
}
