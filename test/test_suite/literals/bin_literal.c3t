// #target: macos-x64
module test;
import std::io;
import std::bits;
fn void main()
{
	int a = 123;
	int b = -23;
	int c = $$min(a, b);
	int d = $$max(a, b);
	io::printfln("%d %d", c, d);
	char z = 0b1101_1101;
	io::printfln("%b %b %b", z, z.rotr(1), z.rotl(1));
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr = alloca %"variant[]", align 8
  %z = alloca i8, align 1
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [3 x %variant], align 16
  %i = alloca i8, align 1
  %shift = alloca i8, align 1
  %taddr3 = alloca i8, align 1
  %i4 = alloca i8, align 1
  %shift5 = alloca i8, align 1
  %taddr6 = alloca i8, align 1
  %taddr7 = alloca %"variant[]", align 8
  store i32 123, i32* %a, align 4
  store i32 -23, i32* %b, align 4
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %b, align 4
  %2 = call i32 @llvm.smin.i32(i32 %0, i32 %1)
  store i32 %2, i32* %c, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %b, align 4
  %5 = call i32 @llvm.smax.i32(i32 %3, i32 %4)
  store i32 %5, i32* %d, align 4
  %6 = bitcast i32* %c to i8*
  %7 = insertvalue %variant undef, i8* %6, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %9 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 0
  store %variant %8, %variant* %9, align 16
  %10 = bitcast i32* %d to i8*
  %11 = insertvalue %variant undef, i8* %10, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %13 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 1
  store %variant %12, %variant* %13, align 16
  %14 = bitcast [2 x %variant]* %varargslots to %variant*
  %15 = insertvalue %"variant[]" undef, %variant* %14, 0
  %16 = insertvalue %"variant[]" %15, i64 2, 1
  store %"variant[]" %16, %"variant[]"* %taddr, align 8
  %17 = bitcast %"variant[]"* %taddr to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %lo = load i8*, i8** %18, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %hi = load i64, i64* %19, align 8
  %20 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i64 5, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %20, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  store i8 -35, i8* %z, align 1
  %21 = insertvalue %variant undef, i8* %z, 0
  %22 = insertvalue %variant %21, i64 ptrtoint (%.introspect* @"ct$char" to i64), 1
  %23 = getelementptr inbounds [3 x %variant], [3 x %variant]* %varargslots2, i64 0, i64 0
  store %variant %22, %variant* %23, align 16
  %24 = load i8, i8* %z, align 1
  store i8 %24, i8* %i, align 1
  store i8 1, i8* %shift, align 1
  %25 = load i8, i8* %i, align 1
  %26 = load i8, i8* %i, align 1
  %27 = load i8, i8* %shift, align 1
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27)
  store i8 %28, i8* %taddr3, align 1
  %29 = insertvalue %variant undef, i8* %taddr3, 0
  %30 = insertvalue %variant %29, i64 ptrtoint (%.introspect* @"ct$char" to i64), 1
  %31 = getelementptr inbounds [3 x %variant], [3 x %variant]* %varargslots2, i64 0, i64 1
  store %variant %30, %variant* %31, align 16
  %32 = load i8, i8* %z, align 1
  store i8 %32, i8* %i4, align 1
  store i8 1, i8* %shift5, align 1
  %33 = load i8, i8* %i4, align 1
  %34 = load i8, i8* %i4, align 1
  %35 = load i8, i8* %shift5, align 1
  %36 = call i8 @llvm.fshl.i8(i8 %33, i8 %34, i8 %35)
  store i8 %36, i8* %taddr6, align 1
  %37 = insertvalue %variant undef, i8* %taddr6, 0
  %38 = insertvalue %variant %37, i64 ptrtoint (%.introspect* @"ct$char" to i64), 1
  %39 = getelementptr inbounds [3 x %variant], [3 x %variant]* %varargslots2, i64 0, i64 2
  store %variant %38, %variant* %39, align 16
  %40 = bitcast [3 x %variant]* %varargslots2 to %variant*
  %41 = insertvalue %"variant[]" undef, %variant* %40, 0
  %42 = insertvalue %"variant[]" %41, i64 3, 1
  store %"variant[]" %42, %"variant[]"* %taddr7, align 8
  %43 = bitcast %"variant[]"* %taddr7 to { i8*, i64 }*
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 0
  %lo8 = load i8*, i8** %44, align 8
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 1
  %hi9 = load i64, i64* %45, align 8
  %46 = call i64 @std_io_printfln(i64* %retparam1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i64 8, i8* %lo8, i64 %hi9)
  %not_err10 = icmp eq i64 %46, 0
  br i1 %not_err10, label %after_check11, label %voiderr12

after_check11:                                    ; preds = %voiderr
  br label %voiderr12

voiderr12:                                        ; preds = %after_check11, %voiderr
  ret void
}
