// #target: macos-x64

module test;
import std::io;
import std::map;

struct Foo { int x; void* bar; }

define IntFooMap = std::map::HashMap<int, Foo>;
define IntDoubleMap = std::map::HashMap<int, double>;

fn char[] Foo.to_string(Foo* foo, Allocator* allocator = mem::current_allocator())
{
	VarString s = string::new_with_capacity(128, allocator);
	s.printf("{%s, %p}", foo.x, foo.bar);
	return s.str();
}

static initialize
{
	io::formatter_register_type(Foo);
}

fn void main()
{
	IntFooMap map;
	map.init();
	io::printfn("Map size: %d", map.count);
	map.set(1, Foo { 1, null });
	io::printfn("Map size: %d", map.count);
	map.set(1, Foo { 2, null });
	io::printfn("Map size: %d", map.count);
	io::printfn("Val: %d", map.get(1).x);
	io::printfn("Has 1: %s", map.has_key(1));
	io::printfn("Has 2: %s", map.has_key(2));
	map.set(7, Foo { 4, null });
	io::printfn("Values: %s", map.value_list());
	IntDoubleMap map2;
	map2.init();
	map2.set(4, 1.3);
	io::printfn("Map find: %s", map2.has_value(1.3));
	io::printfn("Map find: %s", map2.has_value(1.2));
	map2.set(100, 3.4);
	io::printfn("%s", map2.key_list());
	io::printfn("%s", map2.value_list());
	@pool()
	{
		IntDoubleMap map3;
		map3.init();
		map3.set(5, 3.2);
		map3.set(7, 5.2);
		io::printfn("%s", map3.key_list());
	};
}

/* #expect: test.ll

@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @.static_initialize.0, ptr null }]

define internal void @.static_initialize.0() {
entry:
  %0 = load i64, ptr getelementptr inbounds (%"Entry*[]", ptr @std_io_tostring_functions, i32 0, i32 1), align 8
  %not = icmp eq i64 %0, 0
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  call void @"std_map$$typeid.p$std_io$ToStringFunction_HashMap_init"(ptr @std_io_tostring_functions, i32 64, float 7.500000e-01, ptr %1)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  %2 = call i8 @"std_map$$typeid.p$std_io$ToStringFunction_HashMap_set"(ptr @std_io_tostring_functions, i64 ptrtoint (ptr @"ct$test_Foo" to i64), ptr @test_Foo_to_string)
  ret void
}

define { ptr, i64 } @test_Foo_to_string(ptr %0, ptr %1) #0 {
entry:
  %s = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %variant], align 16
  %result = alloca %"char[]", align 8
  %2 = call ptr @std_core_string_new_with_capacity(i64 128, ptr %1)
  store ptr %2, ptr %s, align 8
  %3 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 0
  %4 = insertvalue %variant undef, ptr %3, 0
  %5 = insertvalue %variant %4, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %6 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %5, ptr %6, align 16
  %7 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 1
  %8 = insertvalue %variant undef, ptr %7, 0
  %9 = insertvalue %variant %8, i64 ptrtoint (ptr @"ct$p$void" to i64), 1
  %10 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 1
  store %variant %9, ptr %10, align 16
  %11 = call i64 @std_core_string_VarString_printf(ptr %retparam, ptr %s, ptr @.str.12, i64 8, ptr %varargslots, i64 2)
  %12 = load ptr, ptr %s, align 8
  %13 = call { ptr, i64 } @std_core_string_VarString_str(ptr %12)
  store { ptr, i64 } %13, ptr %result, align 8
  %14 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %14
}

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %map = alloca %HashMap.0, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %literal = alloca %Foo, align 8
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %literal3 = alloca %Foo, align 8
  %retparam6 = alloca i64, align 8
  %varargslots7 = alloca [1 x %variant], align 16
  %retparam8 = alloca i64, align 8
  %varargslots9 = alloca [1 x %variant], align 16
  %retparam10 = alloca %Foo, align 8
  %retparam13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %variant], align 16
  %taddr = alloca i8, align 1
  %retparam17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %variant], align 16
  %taddr19 = alloca i8, align 1
  %literal22 = alloca %Foo, align 8
  %retparam25 = alloca i64, align 8
  %varargslots26 = alloca [1 x %variant], align 16
  %result = alloca %"Foo[]", align 8
  %map2 = alloca %HashMap.2, align 8
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %variant], align 16
  %taddr31 = alloca i8, align 1
  %retparam34 = alloca i64, align 8
  %varargslots35 = alloca [1 x %variant], align 16
  %taddr36 = alloca i8, align 1
  %retparam39 = alloca i64, align 8
  %varargslots40 = alloca [1 x %variant], align 16
  %result41 = alloca %"int[]", align 8
  %retparam44 = alloca i64, align 8
  %varargslots45 = alloca [1 x %variant], align 16
  %result46 = alloca %"double[]", align 8
  %temp = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam49 = alloca ptr, align 8
  %mark = alloca i64, align 8
  %map3 = alloca %HashMap.2, align 8
  %retparam52 = alloca i64, align 8
  %varargslots53 = alloca [1 x %variant], align 16
  %result54 = alloca %"int[]", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %map, i8 0, i64 40, i1 false)
  %0 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  call void @"std_map$$int.test_Foo_HashMap_init"(ptr %map, i32 16, float 7.500000e-01, ptr %0)
  %1 = getelementptr inbounds %HashMap.0, ptr %map, i32 0, i32 2
  %2 = insertvalue %variant undef, ptr %1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$uint" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = call i64 @std_io_printfn(ptr %retparam, ptr @.str, i64 12, ptr %varargslots, i64 1)
  %6 = getelementptr inbounds %Foo, ptr %literal, i32 0, i32 0
  store i32 1, ptr %6, align 8
  %7 = getelementptr inbounds %Foo, ptr %literal, i32 0, i32 1
  store ptr null, ptr %7, align 8
  %8 = getelementptr inbounds { i64, ptr }, ptr %literal, i32 0, i32 0
  %lo = load i64, ptr %8, align 8
  %9 = getelementptr inbounds { i64, ptr }, ptr %literal, i32 0, i32 1
  %hi = load ptr, ptr %9, align 8
  %10 = call i8 @"std_map$$int.test_Foo_HashMap_set"(ptr %map, i32 1, i64 %lo, ptr %hi)
  %11 = getelementptr inbounds %HashMap.0, ptr %map, i32 0, i32 2
  %12 = insertvalue %variant undef, ptr %11, 0
  %13 = insertvalue %variant %12, i64 ptrtoint (ptr @"ct$uint" to i64), 1
  %14 = getelementptr inbounds [1 x %variant], ptr %varargslots2, i64 0, i64 0
  store %variant %13, ptr %14, align 16
  %15 = call i64 @std_io_printfn(ptr %retparam1, ptr @.str.1, i64 12, ptr %varargslots2, i64 1)
  %16 = getelementptr inbounds %Foo, ptr %literal3, i32 0, i32 0
  store i32 2, ptr %16, align 8
  %17 = getelementptr inbounds %Foo, ptr %literal3, i32 0, i32 1
  store ptr null, ptr %17, align 8
  %18 = getelementptr inbounds { i64, ptr }, ptr %literal3, i32 0, i32 0
  %lo4 = load i64, ptr %18, align 8
  %19 = getelementptr inbounds { i64, ptr }, ptr %literal3, i32 0, i32 1
  %hi5 = load ptr, ptr %19, align 8
  %20 = call i8 @"std_map$$int.test_Foo_HashMap_set"(ptr %map, i32 1, i64 %lo4, ptr %hi5)
  %21 = getelementptr inbounds %HashMap.0, ptr %map, i32 0, i32 2
  %22 = insertvalue %variant undef, ptr %21, 0
  %23 = insertvalue %variant %22, i64 ptrtoint (ptr @"ct$uint" to i64), 1
  %24 = getelementptr inbounds [1 x %variant], ptr %varargslots7, i64 0, i64 0
  store %variant %23, ptr %24, align 16
  %25 = call i64 @std_io_printfn(ptr %retparam6, ptr @.str.2, i64 12, ptr %varargslots7, i64 1)
  %26 = call i64 @"std_map$$int.test_Foo_HashMap_get"(ptr %retparam10, ptr %map, i32 1)
  %not_err = icmp eq i64 %26, 0
  br i1 %not_err, label %after_check, label %after_check12

after_check:                                      ; preds = %entry
  %27 = getelementptr inbounds %Foo, ptr %retparam10, i32 0, i32 0
  %28 = insertvalue %variant undef, ptr %27, 0
  %29 = insertvalue %variant %28, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %30 = getelementptr inbounds [1 x %variant], ptr %varargslots9, i64 0, i64 0
  store %variant %29, ptr %30, align 16
  %31 = call i64 @std_io_printfn(ptr %retparam8, ptr @.str.3, i64 7, ptr %varargslots9, i64 1)
  %not_err11 = icmp eq i64 %31, 0
  br i1 %not_err11, label %after_check12, label %after_check12

after_check12:                                    ; preds = %entry, %after_check, %after_check
  %32 = call i8 @"std_map$$int.test_Foo_HashMap_has_key"(ptr %map, i32 1)
  store i8 %32, ptr %taddr, align 1
  %33 = insertvalue %variant undef, ptr %taddr, 0
  %34 = insertvalue %variant %33, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %35 = getelementptr inbounds [1 x %variant], ptr %varargslots14, i64 0, i64 0
  store %variant %34, ptr %35, align 16
  %36 = call i64 @std_io_printfn(ptr %retparam13, ptr @.str.4, i64 9, ptr %varargslots14, i64 1)
  %37 = call i8 @"std_map$$int.test_Foo_HashMap_has_key"(ptr %map, i32 2)
  store i8 %37, ptr %taddr19, align 1
  %38 = insertvalue %variant undef, ptr %taddr19, 0
  %39 = insertvalue %variant %38, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %40 = getelementptr inbounds [1 x %variant], ptr %varargslots18, i64 0, i64 0
  store %variant %39, ptr %40, align 16
  %41 = call i64 @std_io_printfn(ptr %retparam17, ptr @.str.5, i64 9, ptr %varargslots18, i64 1)
  %42 = getelementptr inbounds %Foo, ptr %literal22, i32 0, i32 0
  store i32 4, ptr %42, align 8
  %43 = getelementptr inbounds %Foo, ptr %literal22, i32 0, i32 1
  store ptr null, ptr %43, align 8
  %44 = getelementptr inbounds { i64, ptr }, ptr %literal22, i32 0, i32 0
  %lo23 = load i64, ptr %44, align 8
  %45 = getelementptr inbounds { i64, ptr }, ptr %literal22, i32 0, i32 1
  %hi24 = load ptr, ptr %45, align 8
  %46 = call i8 @"std_map$$int.test_Foo_HashMap_set"(ptr %map, i32 7, i64 %lo23, ptr %hi24)
  %47 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  %48 = call { ptr, i64 } @"std_map$$int.test_Foo_HashMap_value_list"(ptr %map, ptr %47)
  store { ptr, i64 } %48, ptr %result, align 8
  %49 = insertvalue %variant undef, ptr %result, 0
  %50 = insertvalue %variant %49, i64 ptrtoint (ptr @"ct$sa$test_Foo" to i64), 1
  %51 = getelementptr inbounds [1 x %variant], ptr %varargslots26, i64 0, i64 0
  store %variant %50, ptr %51, align 16
  %52 = call i64 @std_io_printfn(ptr %retparam25, ptr @.str.6, i64 10, ptr %varargslots26, i64 1)
  call void @llvm.memset.p0.i64(ptr align 8 %map2, i8 0, i64 40, i1 false)
  %53 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  call void @"std_map$$int.double_HashMap_init"(ptr %map2, i32 16, float 7.500000e-01, ptr %53)
  %54 = call i8 @"std_map$$int.double_HashMap_set"(ptr %map2, i32 4, double 1.300000e+00)
  %55 = call i8 @"std_map$$int.double_HashMap_has_value"(ptr %map2, double 1.300000e+00)
  store i8 %55, ptr %taddr31, align 1
  %56 = insertvalue %variant undef, ptr %taddr31, 0
  %57 = insertvalue %variant %56, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %58 = getelementptr inbounds [1 x %variant], ptr %varargslots30, i64 0, i64 0
  store %variant %57, ptr %58, align 16
  %59 = call i64 @std_io_printfn(ptr %retparam29, ptr @.str.7, i64 12, ptr %varargslots30, i64 1)
  %60 = call i8 @"std_map$$int.double_HashMap_has_value"(ptr %map2, double 1.200000e+00)
  store i8 %60, ptr %taddr36, align 1
  %61 = insertvalue %variant undef, ptr %taddr36, 0
  %62 = insertvalue %variant %61, i64 ptrtoint (ptr @"ct$bool" to i64), 1
  %63 = getelementptr inbounds [1 x %variant], ptr %varargslots35, i64 0, i64 0
  store %variant %62, ptr %63, align 16
  %64 = call i64 @std_io_printfn(ptr %retparam34, ptr @.str.8, i64 12, ptr %varargslots35, i64 1)
  %65 = call i8 @"std_map$$int.double_HashMap_set"(ptr %map2, i32 100, double 3.400000e+00)
  %66 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  %67 = call { ptr, i64 } @"std_map$$int.double_HashMap_key_list"(ptr %map2, ptr %66)
  store { ptr, i64 } %67, ptr %result41, align 8
  %68 = insertvalue %variant undef, ptr %result41, 0
  %69 = insertvalue %variant %68, i64 ptrtoint (ptr @"ct$sa$int" to i64), 1
  %70 = getelementptr inbounds [1 x %variant], ptr %varargslots40, i64 0, i64 0
  store %variant %69, ptr %70, align 16
  %71 = call i64 @std_io_printfn(ptr %retparam39, ptr @.str.9, i64 2, ptr %varargslots40, i64 1)
  %72 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  %73 = call { ptr, i64 } @"std_map$$int.double_HashMap_value_list"(ptr %map2, ptr %72)
  store { ptr, i64 } %73, ptr %result46, align 8
  %74 = insertvalue %variant undef, ptr %result46, 0
  %75 = insertvalue %variant %74, i64 ptrtoint (ptr @"ct$sa$double" to i64), 1
  %76 = getelementptr inbounds [1 x %variant], ptr %varargslots45, i64 0, i64 0
  store %variant %75, ptr %76, align 16
  %77 = call i64 @std_io_printfn(ptr %retparam44, ptr @.str.10, i64 2, ptr %varargslots45, i64 1)
  %78 = load ptr, ptr @std_core_mem_thread_temp_allocator, align 8
  %not = icmp eq ptr %78, null
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %after_check12
  %79 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  %80 = call i64 @std_core_mem_allocator_new_temp(ptr %retparam49, i64 262144, ptr %79)
  %not_err50 = icmp eq i64 %80, 0
  br i1 %not_err50, label %after_check51, label %assign_optional

assign_optional:                                  ; preds = %if.then
  store i64 %80, ptr %error_var, align 8
  br label %panic_block

after_check51:                                    ; preds = %if.then
  %81 = load ptr, ptr %retparam49, align 8
  br label %noerr_block

panic_block:                                      ; preds = %assign_optional
  %82 = load ptr, ptr @std_core_builtin_panic, align 8
  call void %82(ptr @.panic_msg, i64 27, ptr @.file, i64 6, ptr @.func, i64 4, i32 280)
  unreachable

noerr_block:                                      ; preds = %after_check51
  store ptr %81, ptr @std_core_mem_thread_temp_allocator, align 8
  br label %if.exit

if.exit:                                          ; preds = %noerr_block, %after_check12
  %83 = load ptr, ptr @std_core_mem_thread_temp_allocator, align 8
  store ptr %83, ptr %temp, align 8
  %84 = load ptr, ptr %temp, align 8
  %85 = getelementptr inbounds %TempAllocator, ptr %84, i32 0, i32 3
  %86 = load i64, ptr %85, align 8
  store i64 %86, ptr %mark, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %map3, i8 0, i64 40, i1 false)
  %87 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  call void @"std_map$$int.double_HashMap_init"(ptr %map3, i32 16, float 7.500000e-01, ptr %87)
  %88 = call i8 @"std_map$$int.double_HashMap_set"(ptr %map3, i32 5, double 3.200000e+00)
  %89 = call i8 @"std_map$$int.double_HashMap_set"(ptr %map3, i32 7, double 5.200000e+00)
  %90 = load ptr, ptr @std_core_mem_thread_allocator, align 8
  %91 = call { ptr, i64 } @"std_map$$int.double_HashMap_key_list"(ptr %map3, ptr %90)
  store { ptr, i64 } %91, ptr %result54, align 8
  %92 = insertvalue %variant undef, ptr %result54, 0
  %93 = insertvalue %variant %92, i64 ptrtoint (ptr @"ct$sa$int" to i64), 1
  %94 = getelementptr inbounds [1 x %variant], ptr %varargslots53, i64 0, i64 0
  store %variant %93, ptr %94, align 16
  %95 = call i64 @std_io_printfn(ptr %retparam52, ptr @.str.11, i64 2, ptr %varargslots53, i64 1)
  %96 = load ptr, ptr %temp, align 8
  %97 = getelementptr inbounds %TempAllocator, ptr %96, i32 0, i32 0
  %98 = load i64, ptr %mark, align 8
  call void @std_core_mem_allocator_Allocator_reset(ptr %97, i64 %98)
  ret void
}
