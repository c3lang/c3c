// #target: macos-x64

module test;
import std::io;
import std::collections::map;

struct Foo { int x; void* bar; }

def IntFooMap = HashMap(<int, Foo>);
def IntDoubleMap = HashMap(<int, double>);

fn String Foo.to_string(Foo* foo, Allocator* allocator = mem::heap()) @dynamic
{
	DString s = dstring::new_with_capacity(128, allocator);
	s.printf("{%s, %p}", foo.x, foo.bar);
	return s.as_str();
}



fn void main()
{
	IntFooMap map;
	map.init();
	io::printfn("Map size: %d", map.count);
	map.set(1, Foo { 1, null });
	io::printfn("Map size: %d", map.count);
	map.set(1, Foo { 2, null });
	io::printfn("Map size: %d", map.count);
	(void)io::printfn("Val: %d", map.get(1).x);
	io::printfn("Has 1: %s", map.has_key(1));
	io::printfn("Has 2: %s", map.has_key(2));
	map.set(7, Foo { 4, null });
	io::printfn("Values: %s", map.value_list());
	IntDoubleMap map2;
	map2.init();
	map2.set(4, 1.3);
	io::printfn("Map find: %s", map2.has_value(1.3));
	io::printfn("Map find: %s", map2.has_value(1.2));
	map2.set(100, 3.4);
	io::printfn("%s", map2.key_list());
	io::printfn("%s", map2.value_list());
	@pool()
	{
		IntDoubleMap map3;
		map3.init();
		map3.set(5, 3.2);
		map3.set(7, 5.2);
		io::printfn("%s", map3.key_list());
	};
}

/* #expect: test.ll

@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.static_initialize.0, ptr null }]

define { ptr, i64 } @test.Foo.to_string(ptr %0, ptr %1) #0 {
entry:
  %s = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %result = alloca %"char[]", align 8
  %2 = call ptr @std.core.dstring.new_with_capacity(i64 128, ptr %1)
  store ptr %2, ptr %s, align 8
  %3 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 0
  %4 = insertvalue %any undef, ptr %3, 0
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %6 = getelementptr inbounds [2 x %any], ptr %varargslots, i64 0, i64 0
  store %any %5, ptr %6, align 16
  %7 = getelementptr inbounds %Foo, ptr %0, i32 0, i32 1
  %8 = insertvalue %any undef, ptr %7, 0
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.p$void" to i64), 1
  %10 = getelementptr inbounds [2 x %any], ptr %varargslots, i64 0, i64 1
  store %any %9, ptr %10, align 16
  %11 = call i64 @std.core.dstring.DString.printf(ptr %retparam, ptr %s, ptr @.str.14, i64 8, ptr %varargslots, i64 2)
  %12 = load ptr, ptr %s, align 8
  %13 = call { ptr, i64 } @std.core.dstring.DString.as_str(ptr %12)
  store { ptr, i64 } %13, ptr %result, align 8
  %14 = load { ptr, i64 }, ptr %result, align 8
  ret { ptr, i64 } %14
}

; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %map = alloca %HashMap, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %literal = alloca %Foo, align 8
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %any], align 16
  %literal3 = alloca %Foo, align 8
  %retparam6 = alloca i64, align 8
  %varargslots7 = alloca [1 x %any], align 16
  %retparam8 = alloca i64, align 8
  %varargslots9 = alloca [1 x %any], align 16
  %retparam10 = alloca %Foo, align 8
  %retparam13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %any], align 16
  %taddr = alloca i8, align 1
  %retparam17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %any], align 16
  %taddr19 = alloca i8, align 1
  %literal22 = alloca %Foo, align 8
  %retparam25 = alloca i64, align 8
  %varargslots26 = alloca [1 x %any], align 16
  %result = alloca %"Foo[]", align 8
  %map2 = alloca %HashMap.0, align 8
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %any], align 16
  %taddr31 = alloca i8, align 1
  %retparam34 = alloca i64, align 8
  %varargslots35 = alloca [1 x %any], align 16
  %taddr36 = alloca i8, align 1
  %retparam39 = alloca i64, align 8
  %varargslots40 = alloca [1 x %any], align 16
  %result41 = alloca %"int[]", align 8
  %retparam44 = alloca i64, align 8
  %varargslots45 = alloca [1 x %any], align 16
  %result46 = alloca %"double[]", align 8
  %current = alloca ptr, align 8
  %mark = alloca i64, align 8
  %map3 = alloca %HashMap.0, align 8
  %retparam49 = alloca i64, align 8
  %varargslots50 = alloca [1 x %any], align 16
  %result51 = alloca %"int[]", align 8
  %mark54 = alloca i64, align 8
  %retparam55 = alloca ptr, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %map, i8 0, i64 40, i1 false)
  %0 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  call void @"std.collections.map$int$test.Foo$.HashMap.init"(ptr %map, i32 16, float 7.500000e-01, ptr %0)
  %1 = getelementptr inbounds %HashMap, ptr %map, i32 0, i32 2
  %2 = insertvalue %any undef, ptr %1, 0
  %3 = insertvalue %any %2, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %4 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %3, ptr %4, align 16
  %5 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 12, ptr %varargslots, i64 1)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 @.__const, i32 16, i1 false)
  %6 = getelementptr inbounds { i64, ptr }, ptr %literal, i32 0, i32 0
  %lo = load i64, ptr %6, align 8
  %7 = getelementptr inbounds { i64, ptr }, ptr %literal, i32 0, i32 1
  %hi = load ptr, ptr %7, align 8
  %8 = call i8 @"std.collections.map$int$test.Foo$.HashMap.set"(ptr %map, i32 1, i64 %lo, ptr %hi)
  %9 = getelementptr inbounds %HashMap, ptr %map, i32 0, i32 2
  %10 = insertvalue %any undef, ptr %9, 0
  %11 = insertvalue %any %10, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %12 = getelementptr inbounds [1 x %any], ptr %varargslots2, i64 0, i64 0
  store %any %11, ptr %12, align 16
  %13 = call i64 @std.io.printfn(ptr %retparam1, ptr @.str.1, i64 12, ptr %varargslots2, i64 1)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal3, ptr align 8 @.__const.2, i32 16, i1 false)
  %14 = getelementptr inbounds { i64, ptr }, ptr %literal3, i32 0, i32 0
  %lo4 = load i64, ptr %14, align 8
  %15 = getelementptr inbounds { i64, ptr }, ptr %literal3, i32 0, i32 1
  %hi5 = load ptr, ptr %15, align 8
  %16 = call i8 @"std.collections.map$int$test.Foo$.HashMap.set"(ptr %map, i32 1, i64 %lo4, ptr %hi5)
  %17 = getelementptr inbounds %HashMap, ptr %map, i32 0, i32 2
  %18 = insertvalue %any undef, ptr %17, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %20 = getelementptr inbounds [1 x %any], ptr %varargslots7, i64 0, i64 0
  store %any %19, ptr %20, align 16
  %21 = call i64 @std.io.printfn(ptr %retparam6, ptr @.str.3, i64 12, ptr %varargslots7, i64 1)
  %22 = call i64 @"std.collections.map$int$test.Foo$.HashMap.get"(ptr %retparam10, ptr %map, i32 1)
  %not_err = icmp eq i64 %22, 0
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %23, label %after_check, label %after_check12

after_check:                                      ; preds = %entry
  %24 = getelementptr inbounds %Foo, ptr %retparam10, i32 0, i32 0
  %25 = insertvalue %any undef, ptr %24, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %27 = getelementptr inbounds [1 x %any], ptr %varargslots9, i64 0, i64 0
  store %any %26, ptr %27, align 16
  %28 = call i64 @std.io.printfn(ptr %retparam8, ptr @.str.4, i64 7, ptr %varargslots9, i64 1)
  %not_err11 = icmp eq i64 %28, 0
  %29 = call i1 @llvm.expect.i1(i1 %not_err11, i1 true)
  br i1 %29, label %after_check12, label %after_check12

after_check12:                                    ; preds = %entry, %after_check, %after_check
  %30 = call i8 @"std.collections.map$int$test.Foo$.HashMap.has_key"(ptr %map, i32 1)
  store i8 %30, ptr %taddr, align 1
  %31 = insertvalue %any undef, ptr %taddr, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %33 = getelementptr inbounds [1 x %any], ptr %varargslots14, i64 0, i64 0
  store %any %32, ptr %33, align 16
  %34 = call i64 @std.io.printfn(ptr %retparam13, ptr @.str.5, i64 9, ptr %varargslots14, i64 1)
  %35 = call i8 @"std.collections.map$int$test.Foo$.HashMap.has_key"(ptr %map, i32 2)
  store i8 %35, ptr %taddr19, align 1
  %36 = insertvalue %any undef, ptr %taddr19, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %38 = getelementptr inbounds [1 x %any], ptr %varargslots18, i64 0, i64 0
  store %any %37, ptr %38, align 16
  %39 = call i64 @std.io.printfn(ptr %retparam17, ptr @.str.6, i64 9, ptr %varargslots18, i64 1)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal22, ptr align 8 @.__const.7, i32 16, i1 false)
  %40 = getelementptr inbounds { i64, ptr }, ptr %literal22, i32 0, i32 0
  %lo23 = load i64, ptr %40, align 8
  %41 = getelementptr inbounds { i64, ptr }, ptr %literal22, i32 0, i32 1
  %hi24 = load ptr, ptr %41, align 8
  %42 = call i8 @"std.collections.map$int$test.Foo$.HashMap.set"(ptr %map, i32 7, i64 %lo23, ptr %hi24)
  %43 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  %44 = call { ptr, i64 } @"std.collections.map$int$test.Foo$.HashMap.value_list"(ptr %map, ptr %43)
  store { ptr, i64 } %44, ptr %result, align 8
  %45 = insertvalue %any undef, ptr %result, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.sa$test.Foo" to i64), 1
  %47 = getelementptr inbounds [1 x %any], ptr %varargslots26, i64 0, i64 0
  store %any %46, ptr %47, align 16
  %48 = call i64 @std.io.printfn(ptr %retparam25, ptr @.str.8, i64 10, ptr %varargslots26, i64 1)
  call void @llvm.memset.p0.i64(ptr align 8 %map2, i8 0, i64 40, i1 false)
  %49 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  call void @"std.collections.map$int$double$.HashMap.init"(ptr %map2, i32 16, float 7.500000e-01, ptr %49)
  %50 = call i8 @"std.collections.map$int$double$.HashMap.set"(ptr %map2, i32 4, double 1.300000e+00)
  %51 = call i8 @"std.collections.map$int$double$.HashMap.has_value"(ptr %map2, double 1.300000e+00)
  store i8 %51, ptr %taddr31, align 1
  %52 = insertvalue %any undef, ptr %taddr31, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %54 = getelementptr inbounds [1 x %any], ptr %varargslots30, i64 0, i64 0
  store %any %53, ptr %54, align 16
  %55 = call i64 @std.io.printfn(ptr %retparam29, ptr @.str.9, i64 12, ptr %varargslots30, i64 1)
  %56 = call i8 @"std.collections.map$int$double$.HashMap.has_value"(ptr %map2, double 1.200000e+00)
  store i8 %56, ptr %taddr36, align 1
  %57 = insertvalue %any undef, ptr %taddr36, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %59 = getelementptr inbounds [1 x %any], ptr %varargslots35, i64 0, i64 0
  store %any %58, ptr %59, align 16
  %60 = call i64 @std.io.printfn(ptr %retparam34, ptr @.str.10, i64 12, ptr %varargslots35, i64 1)
  %61 = call i8 @"std.collections.map$int$double$.HashMap.set"(ptr %map2, i32 100, double 3.400000e+00)
  %62 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  %63 = call { ptr, i64 } @"std.collections.map$int$double$.HashMap.key_list"(ptr %map2, ptr %62)
  store { ptr, i64 } %63, ptr %result41, align 8
  %64 = insertvalue %any undef, ptr %result41, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.sa$int" to i64), 1
  %66 = getelementptr inbounds [1 x %any], ptr %varargslots40, i64 0, i64 0
  store %any %65, ptr %66, align 16
  %67 = call i64 @std.io.printfn(ptr %retparam39, ptr @.str.11, i64 2, ptr %varargslots40, i64 1)
  %68 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  %69 = call { ptr, i64 } @"std.collections.map$int$double$.HashMap.value_list"(ptr %map2, ptr %68)
  store { ptr, i64 } %69, ptr %result46, align 8
  %70 = insertvalue %any undef, ptr %result46, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.sa$double" to i64), 1
  %72 = getelementptr inbounds [1 x %any], ptr %varargslots45, i64 0, i64 0
  store %any %71, ptr %72, align 16
  %73 = call i64 @std.io.printfn(ptr %retparam44, ptr @.str.12, i64 2, ptr %varargslots45, i64 1)
  %74 = load ptr, ptr @std.core.mem.thread_temp_allocator, align 8
  %not = icmp eq ptr %74, null
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %after_check12
  call void @std.core.mem.init_default_temp_allocators()
  br label %if.exit

if.exit:                                          ; preds = %if.then, %after_check12
  %75 = load ptr, ptr @std.core.mem.thread_temp_allocator, align 8
  store ptr %75, ptr %current, align 8
  %76 = load ptr, ptr %current, align 8
  %77 = getelementptr inbounds %TempAllocator, ptr %76, i32 0, i32 3
  %78 = load i64, ptr %77, align 8
  store i64 %78, ptr %mark, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %map3, i8 0, i64 40, i1 false)
  %79 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  call void @"std.collections.map$int$double$.HashMap.init"(ptr %map3, i32 16, float 7.500000e-01, ptr %79)
  %80 = call i8 @"std.collections.map$int$double$.HashMap.set"(ptr %map3, i32 5, double 3.200000e+00)
  %81 = call i8 @"std.collections.map$int$double$.HashMap.set"(ptr %map3, i32 7, double 5.200000e+00)
  %82 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  %83 = call { ptr, i64 } @"std.collections.map$int$double$.HashMap.key_list"(ptr %map3, ptr %82)
  store { ptr, i64 } %83, ptr %result51, align 8
  %84 = insertvalue %any undef, ptr %result51, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.sa$int" to i64), 1
  %86 = getelementptr inbounds [1 x %any], ptr %varargslots50, i64 0, i64 0
  store %any %85, ptr %86, align 16
  %87 = call i64 @std.io.printfn(ptr %retparam49, ptr @.str.13, i64 2, ptr %varargslots50, i64 1)
  %88 = load ptr, ptr %current, align 8
  %89 = getelementptr inbounds %TempAllocator, ptr %88, i32 0, i32 0
  %90 = load i64, ptr %mark, align 8
  store i64 %90, ptr %mark54, align 8
  %91 = getelementptr inbounds %Allocator, ptr %89, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = load i64, ptr %mark54, align 8
  %94 = call i64 %92(ptr %retparam55, ptr %89, i64 %93, i64 0, i64 0, ptr null, i32 8)
  ret void
}
define internal void @.static_initialize.0() {
entry:
  br label %dtable_check

dtable_check:                                     ; preds = %dtable_next, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.test.Foo", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_next ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %0 = icmp eq ptr %dtable_ptr, null
  br i1 %0, label %dtable_found, label %dtable_next

dtable_next:                                      ; preds = %dtable_check
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.test.Foo.to_string", ptr %dtable_ref, align 8
  ret void
}
