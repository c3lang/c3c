// #target: macos-x64
module foo;

module foo;

bitstruct BitField3 : char[4] @bigendian
{
    uint c : 4..19;
}

bitstruct BitField4 : char[4]
{
    uint c : 4..19;
}

extern fn void printf(char*, ...);

fn void main()
{
    test3();
}
fn void test3()
{
    //BitField3 xx = { 0xdeadbeef };
    BitField3 xx = { 0xbeaf };
    printf("%x = beaf\n", xx.c);
    BitField4 xy = { 0xbeaf };
    void *abc = &xy;
    char[4]* z = abc;
    printf("%x = beaf\n", xy.c);
    xy.c = 0xbeef;
    printf("%x = beef\n", xy.c);
    xx.c = 0xbeef;
    printf("%x = beef\n", xx.c);
}


/* #expect: foo.ll

define void @foo_test3() #0 {
entry:
  %xx = alloca [4 x i8], align 1
  %xy = alloca [4 x i8], align 1
  %abc = alloca ptr, align 8
  %z = alloca ptr, align 8
  store [4 x i8] c"\E0\FB\0A\00", ptr %xx, align 1
  %0 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 0
  %1 = load i8, ptr %0, align 1
  %zext = zext i8 %1 to i32
  %lshrl = lshr i32 %zext, 4
  %2 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 1
  %3 = load i8, ptr %2, align 1
  %zext1 = zext i8 %3 to i32
  %shl = shl i32 %zext1, 4
  %4 = or i32 %shl, %lshrl
  %5 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 2
  %6 = load i8, ptr %5, align 1
  %zext2 = zext i8 %6 to i32
  %shl3 = shl i32 %zext2, 12
  %7 = or i32 %shl3, %4
  %shl4 = shl i32 %7, 16
  %8 = call i32 @llvm.bswap.i32(i32 %shl4)
  %9 = and i32 65535, %8
  call void (ptr, ...) @printf(ptr @.str, i32 %9)
  store [4 x i8] c"\F0\EA\0B\00", ptr %xy, align 1
  store ptr %xy, ptr %abc, align 8
  %10 = load ptr, ptr %abc, align 8
  store ptr %10, ptr %z, align 8
  %11 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 0
  %12 = load i8, ptr %11, align 1
  %zext5 = zext i8 %12 to i32
  %lshrl6 = lshr i32 %zext5, 4
  %13 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 1
  %14 = load i8, ptr %13, align 1
  %zext7 = zext i8 %14 to i32
  %shl8 = shl i32 %zext7, 4
  %15 = or i32 %shl8, %lshrl6
  %16 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 2
  %17 = load i8, ptr %16, align 1
  %zext9 = zext i8 %17 to i32
  %shl10 = shl i32 %zext9, 12
  %18 = or i32 %shl10, %15
  %19 = and i32 65535, %18
  call void (ptr, ...) @printf(ptr @.str.1, i32 %19)
  %20 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 0
  %21 = load i8, ptr %20, align 1
  %22 = and i8 %21, 15
  %23 = or i8 %22, -16
  store i8 %23, ptr %20, align 1
  %24 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 1
  store i8 -18, ptr %24, align 1
  %25 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 2
  %26 = load i8, ptr %25, align 1
  %27 = and i8 %26, -16
  %28 = or i8 %27, 11
  store i8 %27, ptr %25, align 1
  %29 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 0
  %30 = load i8, ptr %29, align 1
  %zext11 = zext i8 %30 to i32
  %lshrl12 = lshr i32 %zext11, 4
  %31 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 1
  %32 = load i8, ptr %31, align 1
  %zext13 = zext i8 %32 to i32
  %shl14 = shl i32 %zext13, 4
  %33 = or i32 %shl14, %lshrl12
  %34 = getelementptr inbounds [4 x i8], ptr %xy, i64 0, i64 2
  %35 = load i8, ptr %34, align 1
  %zext15 = zext i8 %35 to i32
  %shl16 = shl i32 %zext15, 12
  %36 = or i32 %shl16, %33
  %37 = and i32 65535, %36
  call void (ptr, ...) @printf(ptr @.str.2, i32 %37)
  %38 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 0
  %39 = load i8, ptr %38, align 1
  %40 = and i8 %39, 15
  %41 = or i8 %40, -32
  store i8 %41, ptr %38, align 1
  %42 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 1
  store i8 -5, ptr %42, align 1
  %43 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 2
  %44 = load i8, ptr %43, align 1
  %45 = and i8 %44, -16
  %46 = or i8 %45, 14
  store i8 %45, ptr %43, align 1
  %47 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 0
  %48 = load i8, ptr %47, align 1
  %zext17 = zext i8 %48 to i32
  %lshrl18 = lshr i32 %zext17, 4
  %49 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 1
  %50 = load i8, ptr %49, align 1
  %zext19 = zext i8 %50 to i32
  %shl20 = shl i32 %zext19, 4
  %51 = or i32 %shl20, %lshrl18
  %52 = getelementptr inbounds [4 x i8], ptr %xx, i64 0, i64 2
  %53 = load i8, ptr %52, align 1
  %zext21 = zext i8 %53 to i32
  %shl22 = shl i32 %zext21, 12
  %54 = or i32 %shl22, %51
  %shl23 = shl i32 %54, 16
  %55 = call i32 @llvm.bswap.i32(i32 %shl23)
  %56 = and i32 65535, %55
  call void (ptr, ...) @printf(ptr @.str.3, i32 %56)
  ret void
}