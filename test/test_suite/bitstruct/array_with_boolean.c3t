// #target: macos-x64

module foo;

bitstruct BitField : char[3]
{
  int a : 0..2;
  int b : 3..8;
  int c : 9..18;
  bool d : 19;
  bool e : 20;
}

extern fn void printf(char*, ...);

fn void main()
{
    BitField xx = { 2, 3, 15, true, false };
    BitField xy = { 2, 3, 15, false, true };
    printf("%x, %x, %x, %d, %d\n", xx.a, xx.b, xx.c, xx.d, xx.e);
}


/* #expect: foo.ll

define void @foo.main() #0 {
entry:
  %xx = alloca [3 x i8], align 1
  %xy = alloca [3 x i8], align 1
  store [3 x i8] c"\1A\1E\08", ptr %xx, align 1
  store [3 x i8] c"\1A\1E\10", ptr %xy, align 1
  %0 = load i8, ptr %xx, align 1
  %zext = zext i8 %0 to i32
  %shl = shl i32 %zext, 29
  %ashr = ashr i32 %shl, 29
  %1 = load i8, ptr %xx, align 1
  %zext1 = zext i8 %1 to i32
  %lshrl = lshr i32 %zext1, 3
  %ptradd = getelementptr inbounds i8, ptr %xx, i64 1
  %2 = load i8, ptr %ptradd, align 1
  %zext2 = zext i8 %2 to i32
  %shl3 = shl i32 %zext2, 5
  %3 = or i32 %shl3, %lshrl
  %shl4 = shl i32 %3, 26
  %ashr5 = ashr i32 %shl4, 26
  %ptradd6 = getelementptr inbounds i8, ptr %xx, i64 1
  %4 = load i8, ptr %ptradd6, align 1
  %zext7 = zext i8 %4 to i32
  %lshrl8 = lshr i32 %zext7, 1
  %ptradd9 = getelementptr inbounds i8, ptr %xx, i64 2
  %5 = load i8, ptr %ptradd9, align 1
  %zext10 = zext i8 %5 to i32
  %shl11 = shl i32 %zext10, 7
  %6 = or i32 %shl11, %lshrl8
  %shl12 = shl i32 %6, 22
  %ashr13 = ashr i32 %shl12, 22
  %ptradd14 = getelementptr inbounds i8, ptr %xx, i64 2
  %7 = load i8, ptr %ptradd14, align 1
  %lshrl15 = lshr i8 %7, 3
  %8 = trunc i8 %lshrl15 to i1
  %boolsi = zext i1 %8 to i32
  %ptradd16 = getelementptr inbounds i8, ptr %xx, i64 2
  %9 = load i8, ptr %ptradd16, align 1
  %lshrl17 = lshr i8 %9, 4
  %10 = trunc i8 %lshrl17 to i1
  %boolsi18 = zext i1 %10 to i32
  call void (ptr, ...) @printf(ptr @.str, i32 %ashr, i32 %ashr5, i32 %ashr13, i32 %boolsi, i32 %boolsi18)
  ret void
}