// #target: macos-x64
module test;
import std::io;

bitstruct Test : int @bigendian
{
	ushort a : 0..15;
	ushort b : 16..31;
}

bitstruct Test2 : char[4] @bigendian
{
	ushort a : 0..15;
	ushort b : 16..31;
}

fn void main()
{
	IntBE x;
	x.val = 123;

	io::printf("BE 123 => %d (%d)\n", (int)x, x.val);
	Test abc = { .a = 0x1234, .b = 0x5678 };
	Test2 abc2 = { .a = 0x1234, .b = 0x5678 };
	char[4]* z = (char[4]*)&abc;
	char[4]* z2 = (char[4]*)&abc2;
	foreach (d : z2) io::printf(" %x", d);
	io::printn("");
	foreach (d : z) io::printf(" %x", d);
	io::printn("");
	io::printfn("abc.a = %x", abc.a);
	abc.a = 0x1234;
	abc.b = 0x5678;
	io::printfn("->abc.a = %x", abc.a);
	foreach (d : z) io::printf(" %x", d);
	io::printn("");

	IntLE y;
	y.val = 123;
	io::printf("LE 123 => %d (%d)\n", (int)y, y.val);

}

/* #expect: test.ll

  %0 = load i32, ptr %x, align 4
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  store i32 2063597568, ptr %x, align 4
  %2 = insertvalue %variant undef, ptr %x, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %4 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = load i32, ptr %x, align 4
  %6 = call i32 @llvm.bswap.i32(i32 %5)
  store i32 %6, ptr %taddr, align 4
  %7 = insertvalue %variant undef, ptr %taddr, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %9 = getelementptr inbounds [2 x %variant], ptr %varargslots, i64 0, i64 1
  store %variant %8, ptr %9, align 16
  %10 = call i64 @std_io_printf(ptr %retparam, ptr @.str, i64 18, ptr %varargslots, i64 2)
  %not_err = icmp eq i64 %10, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  store i32 873625686, ptr %abc, align 4
  store [4 x i8] c"\124Vx", ptr %abc2, align 1
  store ptr %abc, ptr %z, align 8
  store ptr %abc2, ptr %z2, align 8
  %11 = load ptr, ptr %z2, align 8
  store ptr %11, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %voiderr6, %voiderr
  %12 = load i64, ptr %.anon1, align 8
  %gt = icmp ugt i64 4, %12
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %13 = load ptr, ptr %.anon, align 8
  %14 = load i64, ptr %.anon1, align 8
  %15 = getelementptr inbounds [4 x i8], ptr %13, i64 0, i64 %14
  %16 = load i8, ptr %15, align 1
  store i8 %16, ptr %d, align 1
  %17 = insertvalue %variant undef, ptr %d, 0
  %18 = insertvalue %variant %17, i64 ptrtoint (ptr @"ct$char" to i64), 1
  %19 = getelementptr inbounds [1 x %variant], ptr %varargslots3, i64 0, i64 0
  store %variant %18, ptr %19, align 16
  %20 = call i64 @std_io_printf(ptr %retparam2, ptr @.str.1, i64 3, ptr %varargslots3, i64 1)
  %not_err4 = icmp eq i64 %20, 0
  br i1 %not_err4, label %after_check5, label %voiderr6

after_check5:                                     ; preds = %loop.body
  br label %voiderr6

voiderr6:                                         ; preds = %after_check5, %loop.body
  %21 = load i64, ptr %.anon1, align 8
  %add = add i64 %21, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store ptr @.str.2, ptr %x7, align 8
  store i64 0, ptr %error_var, align 8
  %22 = call ptr @std_io_stdout()
  store ptr %22, ptr %result, align 8
  %23 = call i64 @std_io_File_printn(ptr %retparam8, ptr %result, ptr null, i64 0)
  %not_err9 = icmp eq i64 %23, 0
  br i1 %not_err9, label %after_check10, label %assign_optional

assign_optional:                                  ; preds = %loop.exit
  store i64 %23, ptr %error_var, align 8
  br label %noerr_block

after_check10:                                    ; preds = %loop.exit
  br label %noerr_block

noerr_block:                                      ; preds = %after_check10, %assign_optional
  br label %voiderr11

voiderr11:                                        ; preds = %noerr_block
  %24 = load ptr, ptr %z, align 8
  store ptr %24, ptr %.anon12, align 8
  store i64 0, ptr %.anon13, align 8
  br label %loop.cond14

loop.cond14:                                      ; preds = %voiderr22, %voiderr11
  %25 = load i64, ptr %.anon13, align 8
  %gt15 = icmp ugt i64 4, %25
  br i1 %gt15, label %loop.body16, label %loop.exit24

loop.body16:                                      ; preds = %loop.cond14
  %26 = load ptr, ptr %.anon12, align 8
  %27 = load i64, ptr %.anon13, align 8
  %28 = getelementptr inbounds [4 x i8], ptr %26, i64 0, i64 %27
  %29 = load i8, ptr %28, align 1
  store i8 %29, ptr %d17, align 1
  %30 = insertvalue %variant undef, ptr %d17, 0
  %31 = insertvalue %variant %30, i64 ptrtoint (ptr @"ct$char" to i64), 1
  %32 = getelementptr inbounds [1 x %variant], ptr %varargslots19, i64 0, i64 0
  store %variant %31, ptr %32, align 16
  %33 = call i64 @std_io_printf(ptr %retparam18, ptr @.str.3, i64 3, ptr %varargslots19, i64 1)
  %not_err20 = icmp eq i64 %33, 0
  br i1 %not_err20, label %after_check21, label %voiderr22

after_check21:                                    ; preds = %loop.body16
  br label %voiderr22

voiderr22:                                        ; preds = %after_check21, %loop.body16
  %34 = load i64, ptr %.anon13, align 8
  %add23 = add i64 %34, 1
  store i64 %add23, ptr %.anon13, align 8
  br label %loop.cond14

loop.exit24:                                      ; preds = %loop.cond14
  store ptr @.str.4, ptr %x25, align 8
  store i64 0, ptr %error_var26, align 8
  %35 = call ptr @std_io_stdout()
  store ptr %35, ptr %result28, align 8
  %36 = call i64 @std_io_File_printn(ptr %retparam27, ptr %result28, ptr null, i64 0)
  %not_err29 = icmp eq i64 %36, 0
  br i1 %not_err29, label %after_check31, label %assign_optional30

assign_optional30:                                ; preds = %loop.exit24
  store i64 %36, ptr %error_var26, align 8
  br label %noerr_block32

after_check31:                                    ; preds = %loop.exit24
  br label %noerr_block32

noerr_block32:                                    ; preds = %after_check31, %assign_optional30
  br label %voiderr33

voiderr33:                                        ; preds = %noerr_block32
  %37 = load i32, ptr %abc, align 4
  %38 = call i32 @llvm.bswap.i32(i32 %37)
  %39 = and i32 65535, %38
  %ztrunc = trunc i32 %39 to i16
  store i16 %ztrunc, ptr %taddr36, align 2
  %40 = insertvalue %variant undef, ptr %taddr36, 0
  %41 = insertvalue %variant %40, i64 ptrtoint (ptr @"ct$ushort" to i64), 1
  %42 = getelementptr inbounds [1 x %variant], ptr %varargslots35, i64 0, i64 0
  store %variant %41, ptr %42, align 16
  %43 = call i64 @std_io_printfn(ptr %retparam34, ptr @.str.5, i64 10, ptr %varargslots35, i64 1)
  %not_err37 = icmp eq i64 %43, 0
  br i1 %not_err37, label %after_check38, label %voiderr39

after_check38:                                    ; preds = %voiderr33
  br label %voiderr39

voiderr39:                                        ; preds = %after_check38, %voiderr33
  %44 = load i32, ptr %abc, align 4
  %45 = call i32 @llvm.bswap.i32(i32 %44)
  %46 = and i32 %45, -65536
  %47 = or i32 %46, 4660
  %48 = call i32 @llvm.bswap.i32(i32 %47)
  store i32 %48, ptr %abc, align 4
  %49 = load i32, ptr %abc, align 4
  %50 = call i32 @llvm.bswap.i32(i32 %49)
  %51 = and i32 %50, 65535
  %52 = or i32 %51, 1450704896
  %53 = call i32 @llvm.bswap.i32(i32 %52)
  store i32 %53, ptr %abc, align 4
  %54 = load i32, ptr %abc, align 4
  %55 = call i32 @llvm.bswap.i32(i32 %54)
  %56 = and i32 65535, %55
  %ztrunc42 = trunc i32 %56 to i16
  store i16 %ztrunc42, ptr %taddr43, align 2
  %57 = insertvalue %variant undef, ptr %taddr43, 0
  %58 = insertvalue %variant %57, i64 ptrtoint (ptr @"ct$ushort" to i64), 1
  %59 = getelementptr inbounds [1 x %variant], ptr %varargslots41, i64 0, i64 0
  store %variant %58, ptr %59, align 16
  %60 = call i64 @std_io_printfn(ptr %retparam40, ptr @.str.6, i64 12, ptr %varargslots41, i64 1)
  %not_err44 = icmp eq i64 %60, 0
  br i1 %not_err44, label %after_check45, label %voiderr46

after_check45:                                    ; preds = %voiderr39
  br label %voiderr46

voiderr46:                                        ; preds = %after_check45, %voiderr39
  %61 = load ptr, ptr %z, align 8
  store ptr %61, ptr %.anon47, align 8
  store i64 0, ptr %.anon48, align 8
  br label %loop.cond49

loop.cond49:                                      ; preds = %voiderr57, %voiderr46
  %62 = load i64, ptr %.anon48, align 8
  %gt50 = icmp ugt i64 4, %62
  br i1 %gt50, label %loop.body51, label %loop.exit59

loop.body51:                                      ; preds = %loop.cond49
  %63 = load ptr, ptr %.anon47, align 8
  %64 = load i64, ptr %.anon48, align 8
  %65 = getelementptr inbounds [4 x i8], ptr %63, i64 0, i64 %64
  %66 = load i8, ptr %65, align 1
  store i8 %66, ptr %d52, align 1
  %67 = insertvalue %variant undef, ptr %d52, 0
  %68 = insertvalue %variant %67, i64 ptrtoint (ptr @"ct$char" to i64), 1
  %69 = getelementptr inbounds [1 x %variant], ptr %varargslots54, i64 0, i64 0
  store %variant %68, ptr %69, align 16
  %70 = call i64 @std_io_printf(ptr %retparam53, ptr @.str.7, i64 3, ptr %varargslots54, i64 1)
  %not_err55 = icmp eq i64 %70, 0
  br i1 %not_err55, label %after_check56, label %voiderr57

after_check56:                                    ; preds = %loop.body51
  br label %voiderr57

voiderr57:                                        ; preds = %after_check56, %loop.body51
  %71 = load i64, ptr %.anon48, align 8
  %add58 = add i64 %71, 1
  store i64 %add58, ptr %.anon48, align 8
  br label %loop.cond49

loop.exit59:                                      ; preds = %loop.cond49
  store ptr @.str.8, ptr %x60, align 8
  store i64 0, ptr %error_var61, align 8
  %72 = call ptr @std_io_stdout()
  store ptr %72, ptr %result63, align 8
  %73 = call i64 @std_io_File_printn(ptr %retparam62, ptr %result63, ptr null, i64 0)
  %not_err64 = icmp eq i64 %73, 0
  br i1 %not_err64, label %after_check66, label %assign_optional65

assign_optional65:                                ; preds = %loop.exit59
  store i64 %73, ptr %error_var61, align 8
  br label %noerr_block67

after_check66:                                    ; preds = %loop.exit59
  br label %noerr_block67

noerr_block67:                                    ; preds = %after_check66, %assign_optional65
  br label %voiderr68

voiderr68:                                        ; preds = %noerr_block67
  store i32 0, ptr %y, align 4
  %74 = load i32, ptr %y, align 4
  store i32 123, ptr %y, align 4
  %75 = insertvalue %variant undef, ptr %y, 0
  %76 = insertvalue %variant %75, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %77 = getelementptr inbounds [2 x %variant], ptr %varargslots70, i64 0, i64 0
  store %variant %76, ptr %77, align 16
  %78 = load i32, ptr %y, align 4
  store i32 %78, ptr %taddr71, align 4
  %79 = insertvalue %variant undef, ptr %taddr71, 0
  %80 = insertvalue %variant %79, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %81 = getelementptr inbounds [2 x %variant], ptr %varargslots70, i64 0, i64 1
  store %variant %80, ptr %81, align 16
  %82 = call i64 @std_io_printf(ptr %retparam69, ptr @.str.9, i64 18, ptr %varargslots70, i64 2)
  %not_err72 = icmp eq i64 %82, 0
  br i1 %not_err72, label %after_check73, label %voiderr74

after_check73:                                    ; preds = %voiderr68
  br label %voiderr74

voiderr74:                                        ; preds = %after_check73, %voiderr68
  ret void
}