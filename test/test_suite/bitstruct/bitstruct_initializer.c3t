// #target: macos-x64
module test;
import std::io;

bitstruct Foo : ulong
{
	uint x : 0..31;
	uint y : 32..62;
	bool w : 63;
}

bitstruct Bar : char[8]
{
	uint x : 0..31;
	uint y : 32..62;
	bool w : 63;
}
struct Abc
{
	int x;
	Foo b;
}

fn void hello(int z)
{
	Foo x;
	x = { .x = z, .w = z < 100 };
	Abc y = { .b.x = 32, .b.y = 10 };
	Abc d = { .b = { 23, 11, true } };
	Bar b;
	b = { .x = z, .w = z < 100 };
	io::printfn("%s %s %s", x.x, x.y, x.w);
	io::printfn("%s %s %s", y.b.x, y.b.y, y.b.w);
	io::printfn("%s %s %s", b.x, b.y, b.w);
	x = { z + 1, 1, z > 100 };
	y.b = { 33, 11, true };
	b = {  z + 1, 1, z > 100 };
	io::printfn("%s %s %s", x.x, x.y, x.w);
    io::printfn("%s %s %s", y.b.x, y.b.y, y.b.w);
    io::printfn("%s %s %s", b.x, b.y, b.w);

}

fn void main()
{
	hello(12);
}

/* #expect: test.ll

define void @test.hello(i32 %0) #0 {
entry:
  %x = alloca i64, align 8
  %.assign_list = alloca i64, align 8
  %y = alloca %Abc, align 8
  %d = alloca %Abc, align 8
  %b = alloca [8 x i8], align 1
  %.assign_list10 = alloca [8 x i8], align 1
  %varargslots = alloca [3 x %any], align 16
  %taddr = alloca i32, align 4
  %taddr33 = alloca i32, align 4
  %taddr37 = alloca i8, align 1
  %retparam = alloca i64, align 8
  %varargslots39 = alloca [3 x %any], align 16
  %taddr42 = alloca i32, align 4
  %taddr46 = alloca i32, align 4
  %taddr51 = alloca i8, align 1
  %retparam53 = alloca i64, align 8
  %varargslots54 = alloca [3 x %any], align 16
  %taddr65 = alloca i32, align 4
  %taddr77 = alloca i32, align 4
  %taddr81 = alloca i8, align 1
  %retparam83 = alloca i64, align 8
  %.assign_list84 = alloca i64, align 8
  %.assign_list89 = alloca [8 x i8], align 1
  %varargslots116 = alloca [3 x %any], align 16
  %taddr118 = alloca i32, align 4
  %taddr121 = alloca i32, align 4
  %taddr125 = alloca i8, align 1
  %retparam127 = alloca i64, align 8
  %varargslots128 = alloca [3 x %any], align 16
  %taddr131 = alloca i32, align 4
  %taddr135 = alloca i32, align 4
  %taddr140 = alloca i8, align 1
  %retparam142 = alloca i64, align 8
  %varargslots143 = alloca [3 x %any], align 16
  %taddr154 = alloca i32, align 4
  %taddr166 = alloca i32, align 4
  %taddr170 = alloca i8, align 1
  %retparam172 = alloca i64, align 8
  store i64 0, ptr %x, align 8
  %zext = zext i32 %0 to i64
  %1 = and i64 %zext, 4294967295
  %lt = icmp slt i32 %0, 100
  %2 = zext i1 %lt to i8
  %zext1 = zext i8 %2 to i64
  %shl = shl i64 %zext1, 63
  %3 = and i64 %shl, -9223372036854775808
  %4 = and i64 %1, 9223372036854775807
  %5 = or i64 %4, %3
  store i64 %5, ptr %.assign_list, align 8
  %6 = load i64, ptr %.assign_list, align 8
  store i64 %6, ptr %x, align 8
  store i32 0, ptr %y, align 8
  %ptradd = getelementptr inbounds i8, ptr %y, i64 8
  store i64 42949672992, ptr %ptradd, align 8
  store i32 0, ptr %d, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %d, i64 8
  store i64 -9223371989610135529, ptr %ptradd2, align 8
  store i8 0, ptr %b, align 1
  %ptradd3 = getelementptr inbounds i8, ptr %b, i64 1
  store i8 0, ptr %ptradd3, align 1
  %ptradd4 = getelementptr inbounds i8, ptr %b, i64 2
  store i8 0, ptr %ptradd4, align 1
  %ptradd5 = getelementptr inbounds i8, ptr %b, i64 3
  store i8 0, ptr %ptradd5, align 1
  %ptradd6 = getelementptr inbounds i8, ptr %b, i64 4
  store i8 0, ptr %ptradd6, align 1
  %ptradd7 = getelementptr inbounds i8, ptr %b, i64 5
  store i8 0, ptr %ptradd7, align 1
  %ptradd8 = getelementptr inbounds i8, ptr %b, i64 6
  store i8 0, ptr %ptradd8, align 1
  %ptradd9 = getelementptr inbounds i8, ptr %b, i64 7
  store i8 0, ptr %ptradd9, align 1
  store i8 0, ptr %.assign_list10, align 1
  %ptradd11 = getelementptr inbounds i8, ptr %.assign_list10, i64 1
  store i8 0, ptr %ptradd11, align 1
  %ptradd12 = getelementptr inbounds i8, ptr %.assign_list10, i64 2
  store i8 0, ptr %ptradd12, align 1
  %ptradd13 = getelementptr inbounds i8, ptr %.assign_list10, i64 3
  store i8 0, ptr %ptradd13, align 1
  %ptradd14 = getelementptr inbounds i8, ptr %.assign_list10, i64 4
  store i8 0, ptr %ptradd14, align 1
  %ptradd15 = getelementptr inbounds i8, ptr %.assign_list10, i64 5
  store i8 0, ptr %ptradd15, align 1
  %ptradd16 = getelementptr inbounds i8, ptr %.assign_list10, i64 6
  store i8 0, ptr %ptradd16, align 1
  %ptradd17 = getelementptr inbounds i8, ptr %.assign_list10, i64 7
  store i8 0, ptr %ptradd17, align 1
  %trunc = trunc i32 %0 to i8
  store i8 %trunc, ptr %.assign_list10, align 1
  %lshrl = lshr i32 %0, 8
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list10, i64 1
  %trunc19 = trunc i32 %lshrl to i8
  store i8 %trunc19, ptr %ptradd18, align 1
  %lshrl20 = lshr i32 %lshrl, 8
  %ptradd21 = getelementptr inbounds i8, ptr %.assign_list10, i64 2
  %trunc22 = trunc i32 %lshrl20 to i8
  store i8 %trunc22, ptr %ptradd21, align 1
  %lshrl23 = lshr i32 %lshrl20, 8
  %ptradd24 = getelementptr inbounds i8, ptr %.assign_list10, i64 3
  %trunc25 = trunc i32 %lshrl23 to i8
  store i8 %trunc25, ptr %ptradd24, align 1
  %lshrl26 = lshr i32 %lshrl23, 8
  %lt27 = icmp slt i32 %0, 100
  %7 = zext i1 %lt27 to i8
  %shl28 = shl i8 %7, 7
  %ptradd29 = getelementptr inbounds i8, ptr %.assign_list10, i64 7
  %8 = load i8, ptr %ptradd29, align 1
  %9 = and i8 %8, 127
  %10 = or i8 %9, %shl28
  store i8 %10, ptr %ptradd29, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %b, ptr align 1 %.assign_list10, i32 8, i1 false)
  %11 = load i64, ptr %x, align 8
  %12 = and i64 4294967295, %11
  %trunc30 = trunc i64 %12 to i32
  store i32 %trunc30, ptr %taddr, align 4
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %14, ptr %varargslots, align 16
  %15 = load i64, ptr %x, align 8
  %lshrl31 = lshr i64 %15, 32
  %16 = and i64 2147483647, %lshrl31
  %trunc32 = trunc i64 %16 to i32
  store i32 %trunc32, ptr %taddr33, align 4
  %17 = insertvalue %any undef, ptr %taddr33, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd34, align 16
  %19 = load i64, ptr %x, align 8
  %lshrl35 = lshr i64 %19, 63
  %20 = and i64 1, %lshrl35
  %trunc36 = trunc i64 %20 to i8
  store i8 %trunc36, ptr %taddr37, align 1
  %21 = insertvalue %any undef, ptr %taddr37, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots, i64 32
  store %any %22, ptr %ptradd38, align 16
  %23 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 8, ptr %varargslots, i64 3)
  %ptradd40 = getelementptr inbounds i8, ptr %y, i64 8
  %24 = load i64, ptr %ptradd40, align 8
  %25 = and i64 4294967295, %24
  %trunc41 = trunc i64 %25 to i32
  store i32 %trunc41, ptr %taddr42, align 4
  %26 = insertvalue %any undef, ptr %taddr42, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %27, ptr %varargslots39, align 16
  %ptradd43 = getelementptr inbounds i8, ptr %y, i64 8
  %28 = load i64, ptr %ptradd43, align 8
  %lshrl44 = lshr i64 %28, 32
  %29 = and i64 2147483647, %lshrl44
  %trunc45 = trunc i64 %29 to i32
  store i32 %trunc45, ptr %taddr46, align 4
  %30 = insertvalue %any undef, ptr %taddr46, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %31, ptr %ptradd47, align 16
  %ptradd48 = getelementptr inbounds i8, ptr %y, i64 8
  %32 = load i64, ptr %ptradd48, align 8
  %lshrl49 = lshr i64 %32, 63
  %33 = and i64 1, %lshrl49
  %trunc50 = trunc i64 %33 to i8
  store i8 %trunc50, ptr %taddr51, align 1
  %34 = insertvalue %any undef, ptr %taddr51, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots39, i64 32
  store %any %35, ptr %ptradd52, align 16
  %36 = call i64 @std.io.printfn(ptr %retparam53, ptr @.str.1, i64 8, ptr %varargslots39, i64 3)
  %37 = load i8, ptr %b, align 1
  %zext55 = zext i8 %37 to i32
  %ptradd56 = getelementptr inbounds i8, ptr %b, i64 1
  %38 = load i8, ptr %ptradd56, align 1
  %zext57 = zext i8 %38 to i32
  %shl58 = shl i32 %zext57, 8
  %39 = or i32 %shl58, %zext55
  %ptradd59 = getelementptr inbounds i8, ptr %b, i64 2
  %40 = load i8, ptr %ptradd59, align 1
  %zext60 = zext i8 %40 to i32
  %shl61 = shl i32 %zext60, 16
  %41 = or i32 %shl61, %39
  %ptradd62 = getelementptr inbounds i8, ptr %b, i64 3
  %42 = load i8, ptr %ptradd62, align 1
  %zext63 = zext i8 %42 to i32
  %shl64 = shl i32 %zext63, 24
  %43 = or i32 %shl64, %41
  store i32 %43, ptr %taddr65, align 4
  %44 = insertvalue %any undef, ptr %taddr65, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %45, ptr %varargslots54, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %b, i64 4
  %46 = load i8, ptr %ptradd66, align 1
  %zext67 = zext i8 %46 to i32
  %ptradd68 = getelementptr inbounds i8, ptr %b, i64 5
  %47 = load i8, ptr %ptradd68, align 1
  %zext69 = zext i8 %47 to i32
  %shl70 = shl i32 %zext69, 8
  %48 = or i32 %shl70, %zext67
  %ptradd71 = getelementptr inbounds i8, ptr %b, i64 6
  %49 = load i8, ptr %ptradd71, align 1
  %zext72 = zext i8 %49 to i32
  %shl73 = shl i32 %zext72, 16
  %50 = or i32 %shl73, %48
  %ptradd74 = getelementptr inbounds i8, ptr %b, i64 7
  %51 = load i8, ptr %ptradd74, align 1
  %zext75 = zext i8 %51 to i32
  %shl76 = shl i32 %zext75, 24
  %52 = or i32 %shl76, %50
  %53 = and i32 2147483647, %52
  store i32 %53, ptr %taddr77, align 4
  %54 = insertvalue %any undef, ptr %taddr77, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %ptradd78 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %55, ptr %ptradd78, align 16
  %ptradd79 = getelementptr inbounds i8, ptr %b, i64 7
  %56 = load i8, ptr %ptradd79, align 1
  %lshrl80 = lshr i8 %56, 7
  %57 = trunc i8 %lshrl80 to i1
  %58 = zext i1 %57 to i8
  store i8 %58, ptr %taddr81, align 1
  %59 = insertvalue %any undef, ptr %taddr81, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots54, i64 32
  store %any %60, ptr %ptradd82, align 16
  %61 = call i64 @std.io.printfn(ptr %retparam83, ptr @.str.2, i64 8, ptr %varargslots54, i64 3)
  %add = add i32 %0, 1
  %zext85 = zext i32 %add to i64
  %62 = and i64 %zext85, 4294967295
  %63 = and i64 %62, -9223372032559808513
  %64 = or i64 %63, 4294967296
  %gt = icmp sgt i32 %0, 100
  %65 = zext i1 %gt to i8
  %zext86 = zext i8 %65 to i64
  %shl87 = shl i64 %zext86, 63
  %66 = and i64 %shl87, -9223372036854775808
  %67 = and i64 %64, 9223372036854775807
  %68 = or i64 %67, %66
  store i64 %68, ptr %.assign_list84, align 8
  %69 = load i64, ptr %.assign_list84, align 8
  store i64 %69, ptr %x, align 8
  %ptradd88 = getelementptr inbounds i8, ptr %y, i64 8
  store i64 -9223371989610135519, ptr %ptradd88, align 8
  store i8 0, ptr %.assign_list89, align 1
  %ptradd90 = getelementptr inbounds i8, ptr %.assign_list89, i64 1
  store i8 0, ptr %ptradd90, align 1
  %ptradd91 = getelementptr inbounds i8, ptr %.assign_list89, i64 2
  store i8 0, ptr %ptradd91, align 1
  %ptradd92 = getelementptr inbounds i8, ptr %.assign_list89, i64 3
  store i8 0, ptr %ptradd92, align 1
  %ptradd93 = getelementptr inbounds i8, ptr %.assign_list89, i64 4
  store i8 0, ptr %ptradd93, align 1
  %ptradd94 = getelementptr inbounds i8, ptr %.assign_list89, i64 5
  store i8 0, ptr %ptradd94, align 1
  %ptradd95 = getelementptr inbounds i8, ptr %.assign_list89, i64 6
  store i8 0, ptr %ptradd95, align 1
  %ptradd96 = getelementptr inbounds i8, ptr %.assign_list89, i64 7
  store i8 0, ptr %ptradd96, align 1
  %add97 = add i32 %0, 1
  %trunc98 = trunc i32 %add97 to i8
  store i8 %trunc98, ptr %.assign_list89, align 1
  %lshrl99 = lshr i32 %add97, 8
  %ptradd100 = getelementptr inbounds i8, ptr %.assign_list89, i64 1
  %trunc101 = trunc i32 %lshrl99 to i8
  store i8 %trunc101, ptr %ptradd100, align 1
  %lshrl102 = lshr i32 %lshrl99, 8
  %ptradd103 = getelementptr inbounds i8, ptr %.assign_list89, i64 2
  %trunc104 = trunc i32 %lshrl102 to i8
  store i8 %trunc104, ptr %ptradd103, align 1
  %lshrl105 = lshr i32 %lshrl102, 8
  %ptradd106 = getelementptr inbounds i8, ptr %.assign_list89, i64 3
  %trunc107 = trunc i32 %lshrl105 to i8
  store i8 %trunc107, ptr %ptradd106, align 1
  %lshrl108 = lshr i32 %lshrl105, 8
  %ptradd109 = getelementptr inbounds i8, ptr %.assign_list89, i64 4
  store i8 1, ptr %ptradd109, align 1
  %ptradd110 = getelementptr inbounds i8, ptr %.assign_list89, i64 5
  store i8 0, ptr %ptradd110, align 1
  %ptradd111 = getelementptr inbounds i8, ptr %.assign_list89, i64 6
  store i8 0, ptr %ptradd111, align 1
  %ptradd112 = getelementptr inbounds i8, ptr %.assign_list89, i64 7
  %70 = load i8, ptr %ptradd112, align 1
  %71 = and i8 %70, -128
  store i8 %71, ptr %ptradd112, align 1
  %gt113 = icmp sgt i32 %0, 100
  %72 = zext i1 %gt113 to i8
  %shl114 = shl i8 %72, 7
  %ptradd115 = getelementptr inbounds i8, ptr %.assign_list89, i64 7
  %73 = load i8, ptr %ptradd115, align 1
  %74 = and i8 %73, 127
  %75 = or i8 %74, %shl114
  store i8 %75, ptr %ptradd115, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %b, ptr align 1 %.assign_list89, i32 8, i1 false)
  %76 = load i64, ptr %x, align 8
  %77 = and i64 4294967295, %76
  %trunc117 = trunc i64 %77 to i32
  store i32 %trunc117, ptr %taddr118, align 4
  %78 = insertvalue %any undef, ptr %taddr118, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %79, ptr %varargslots116, align 16
  %80 = load i64, ptr %x, align 8
  %lshrl119 = lshr i64 %80, 32
  %81 = and i64 2147483647, %lshrl119
  %trunc120 = trunc i64 %81 to i32
  store i32 %trunc120, ptr %taddr121, align 4
  %82 = insertvalue %any undef, ptr %taddr121, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots116, i64 16
  store %any %83, ptr %ptradd122, align 16
  %84 = load i64, ptr %x, align 8
  %lshrl123 = lshr i64 %84, 63
  %85 = and i64 1, %lshrl123
  %trunc124 = trunc i64 %85 to i8
  store i8 %trunc124, ptr %taddr125, align 1
  %86 = insertvalue %any undef, ptr %taddr125, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %ptradd126 = getelementptr inbounds i8, ptr %varargslots116, i64 32
  store %any %87, ptr %ptradd126, align 16
  %88 = call i64 @std.io.printfn(ptr %retparam127, ptr @.str.3, i64 8, ptr %varargslots116, i64 3)
  %ptradd129 = getelementptr inbounds i8, ptr %y, i64 8
  %89 = load i64, ptr %ptradd129, align 8
  %90 = and i64 4294967295, %89
  %trunc130 = trunc i64 %90 to i32
  store i32 %trunc130, ptr %taddr131, align 4
  %91 = insertvalue %any undef, ptr %taddr131, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %92, ptr %varargslots128, align 16
  %ptradd132 = getelementptr inbounds i8, ptr %y, i64 8
  %93 = load i64, ptr %ptradd132, align 8
  %lshrl133 = lshr i64 %93, 32
  %94 = and i64 2147483647, %lshrl133
  %trunc134 = trunc i64 %94 to i32
  store i32 %trunc134, ptr %taddr135, align 4
  %95 = insertvalue %any undef, ptr %taddr135, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %ptradd136 = getelementptr inbounds i8, ptr %varargslots128, i64 16
  store %any %96, ptr %ptradd136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %y, i64 8
  %97 = load i64, ptr %ptradd137, align 8
  %lshrl138 = lshr i64 %97, 63
  %98 = and i64 1, %lshrl138
  %trunc139 = trunc i64 %98 to i8
  store i8 %trunc139, ptr %taddr140, align 1
  %99 = insertvalue %any undef, ptr %taddr140, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %ptradd141 = getelementptr inbounds i8, ptr %varargslots128, i64 32
  store %any %100, ptr %ptradd141, align 16
  %101 = call i64 @std.io.printfn(ptr %retparam142, ptr @.str.4, i64 8, ptr %varargslots128, i64 3)
  %102 = load i8, ptr %b, align 1
  %zext144 = zext i8 %102 to i32
  %ptradd145 = getelementptr inbounds i8, ptr %b, i64 1
  %103 = load i8, ptr %ptradd145, align 1
  %zext146 = zext i8 %103 to i32
  %shl147 = shl i32 %zext146, 8
  %104 = or i32 %shl147, %zext144
  %ptradd148 = getelementptr inbounds i8, ptr %b, i64 2
  %105 = load i8, ptr %ptradd148, align 1
  %zext149 = zext i8 %105 to i32
  %shl150 = shl i32 %zext149, 16
  %106 = or i32 %shl150, %104
  %ptradd151 = getelementptr inbounds i8, ptr %b, i64 3
  %107 = load i8, ptr %ptradd151, align 1
  %zext152 = zext i8 %107 to i32
  %shl153 = shl i32 %zext152, 24
  %108 = or i32 %shl153, %106
  store i32 %108, ptr %taddr154, align 4
  %109 = insertvalue %any undef, ptr %taddr154, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %any %110, ptr %varargslots143, align 16
  %ptradd155 = getelementptr inbounds i8, ptr %b, i64 4
  %111 = load i8, ptr %ptradd155, align 1
  %zext156 = zext i8 %111 to i32
  %ptradd157 = getelementptr inbounds i8, ptr %b, i64 5
  %112 = load i8, ptr %ptradd157, align 1
  %zext158 = zext i8 %112 to i32
  %shl159 = shl i32 %zext158, 8
  %113 = or i32 %shl159, %zext156
  %ptradd160 = getelementptr inbounds i8, ptr %b, i64 6
  %114 = load i8, ptr %ptradd160, align 1
  %zext161 = zext i8 %114 to i32
  %shl162 = shl i32 %zext161, 16
  %115 = or i32 %shl162, %113
  %ptradd163 = getelementptr inbounds i8, ptr %b, i64 7
  %116 = load i8, ptr %ptradd163, align 1
  %zext164 = zext i8 %116 to i32
  %shl165 = shl i32 %zext164, 24
  %117 = or i32 %shl165, %115
  %118 = and i32 2147483647, %117
  store i32 %118, ptr %taddr166, align 4
  %119 = insertvalue %any undef, ptr %taddr166, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  %ptradd167 = getelementptr inbounds i8, ptr %varargslots143, i64 16
  store %any %120, ptr %ptradd167, align 16
  %ptradd168 = getelementptr inbounds i8, ptr %b, i64 7
  %121 = load i8, ptr %ptradd168, align 1
  %lshrl169 = lshr i8 %121, 7
  %122 = trunc i8 %lshrl169 to i1
  %123 = zext i1 %122 to i8
  store i8 %123, ptr %taddr170, align 1
  %124 = insertvalue %any undef, ptr %taddr170, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.bool" to i64), 1
  %ptradd171 = getelementptr inbounds i8, ptr %varargslots143, i64 32
  store %any %125, ptr %ptradd171, align 16
  %126 = call i64 @std.io.printfn(ptr %retparam172, ptr @.str.5, i64 8, ptr %varargslots143, i64 3)
  ret void
}

; Function Attrs: nounwind uwtable
define void @test.main() #0 {
entry:
  call void @test.hello(i32 12)
  ret void
}
