// #target: x64-darwin

module foo;

bitstruct BitField : char
{
  int a : 0..2;
  int b : 4..5;
  int c : 6..7;
}

bitstruct BitFieldI : ushort
{
  int a : 0..4;
  int b : 5..10;
  int c : 11..15;
}


struct Packet
{
  bitstruct : int
  {
    int a : 0..2;
    int b : 3..5;
    int c : 6..10;
  }
  int packet_id;
}

bitstruct BitField3 : char[3]
{
  int a : 0..2;
  int b : 3..8;
  int c : 9..18;
  int d : 19..23;
}

bitstruct BitField3u : char[3]
{
  uint a : 0..2;
  uint b : 3..8;
  uint c : 9..18;
  uint d : 19..23;
}

bitstruct BitField4 : char[3]
{
  int a : 0..2;
  int b : 3..7;
  int c : 8..15;
  int d : 16..19;
}

bitstruct BitFieldCross : char[5]
{
    uint a : 5..22;
}

BitField c = { 2, -1, 1 };

extern fn void printf(char*, ...);

fn void main()
{
    BitField b = { 3, -1, 1 };
    BitFieldI c1 = { 5, 0, 0 };
    BitFieldI c2 = { 0, 3, 0 };
    BitFieldI c3 = { 0, 0, 9 };
    BitFieldI c4 = { -5, 7, 9 };
    BitFieldI c5 = { -5, 0, 0 };
    BitFieldI c6 = { 5, 0, 0 };
    BitFieldI c7 = { 0, 0, 5 };

    BitField3 e1 = { 3, 1, 3, 4 };
    BitField3 e2 = { 1, 1, 3, 4 };
    BitField3 e3 = { 2, 1, 3, 4 };
    BitField d = { };

    printf("%d\n", e1.a);
    printf("%d\n", e2.a);
    printf("%d\n", e3.a);

    BitField3u z1 = { 3, 1, 3, 4 };
    BitField3u z2 = { 4, 1, 3, 4 };
    BitField3u z3 = { 7, 1, 3, 4 };
    printf("%u\n", z1.a);
    printf("%u\n", z2.a);
    printf("%u\n", z3.a);
    BitFieldCross xx = { 0x1238 };
    printf("%x\n", xx.a);
}

/* #expect: foo.ll

define void @foo.main() #0 {
entry:
  %b = alloca i8, align 1
  %c1 = alloca i16, align 2
  %c2 = alloca i16, align 2
  %c3 = alloca i16, align 2
  %c4 = alloca i16, align 2
  %c5 = alloca i16, align 2
  %c6 = alloca i16, align 2
  %c7 = alloca i16, align 2
  %e1 = alloca [3 x i8], align 1
  %e2 = alloca [3 x i8], align 1
  %e3 = alloca [3 x i8], align 1
  %d = alloca i8, align 1
  %z1 = alloca [3 x i8], align 1
  %z2 = alloca [3 x i8], align 1
  %z3 = alloca [3 x i8], align 1
  %xx = alloca [5 x i8], align 1
  store i8 115, i8* %b, align 1
  store i16 5, i16* %c1, align 2
  store i16 96, i16* %c2, align 2
  store i16 18432, i16* %c3, align 2
  store i16 18683, i16* %c4, align 2
  store i16 27, i16* %c5, align 2
  store i16 5, i16* %c6, align 2
  store i16 10240, i16* %c7, align 2
  store [3 x i8] c"\0B\06 ", [3 x i8]* %e1, align 1
  store [3 x i8] c"\09\06 ", [3 x i8]* %e2, align 1
  store [3 x i8] c"\0A\06 ", [3 x i8]* %e3, align 1
  store i8 0, i8* %d, align 1
  %0 = getelementptr inbounds [3 x i8], [3 x i8]* %e1, i64 0, i64 0
  %1 = load i8, i8* %0, align 1
  %2 = zext i8 %1 to i32
  %3 = shl i32 %2, 29
  %4 = ashr i32 %3, 29
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %4)
  %5 = getelementptr inbounds [3 x i8], [3 x i8]* %e2, i64 0, i64 0
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl i32 %7, 29
  %9 = ashr i32 %8, 29
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %9)
  %10 = getelementptr inbounds [3 x i8], [3 x i8]* %e3, i64 0, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl i32 %12, 29
  %14 = ashr i32 %13, 29
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %14)
  store [3 x i8] c"\0B\06 ", [3 x i8]* %z1, align 1
  store [3 x i8] c"\0C\06 ", [3 x i8]* %z2, align 1
  store [3 x i8] c"\0F\06 ", [3 x i8]* %z3, align 1
  %15 = getelementptr inbounds [3 x i8], [3 x i8]* %z1, i64 0, i64 0
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = and i32 7, %17
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %18)
  %19 = getelementptr inbounds [3 x i8], [3 x i8]* %z2, i64 0, i64 0
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = and i32 7, %21
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i32 %22)
  %23 = getelementptr inbounds [3 x i8], [3 x i8]* %z3, i64 0, i64 0
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = and i32 7, %25
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %26)
  store [5 x i8] c"\00G\02\00\00", [5 x i8]* %xx, align 1
  %27 = getelementptr inbounds [5 x i8], [5 x i8]* %xx, i64 0, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = lshr i32 %29, 5
  %31 = getelementptr inbounds [5 x i8], [5 x i8]* %xx, i64 0, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl i32 %33, 3
  %35 = or i32 %34, %30
  %36 = getelementptr inbounds [5 x i8], [5 x i8]* %xx, i64 0, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl i32 %38, 11
  %40 = or i32 %39, %35
  %41 = and i32 262143, %40
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %41)
  ret void
}