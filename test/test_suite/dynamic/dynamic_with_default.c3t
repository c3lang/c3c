// #target: macos-x64
module test;

interface Abc
{
	fn int[<2>] test() @optional;
	fn int bye();
}

fn int[<2>] Abc.test(&self) @default
{
	return { 5, 7 };
}

struct Hello (Abc)
{
	int y;
}

fn int[<2>] Hello.test(&self) @dynamic { return { 5, 10 }; }
fn int Hello.bye(&self) @dynamic { return 7; }
fn void main()
{
	Hello z = { 32 };
	Abc* x = &z;
	int[<2>] z2 = x.test();
	int w = x.bye();
}
/* #expect: test.ll

define double @test.Abc.test(i64 %0, ptr %1) #0 {
define double @test.Hello.test(ptr %0) #0 {
define i32 @test.Hello.bye(ptr %0) #0 {

; Function Attrs:
define void @test.main() #0 {
entry:
  %z = alloca %Hello, align 4
  %x = alloca %"any*", align 8
  %z2 = alloca <2 x i32>, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %result = alloca <2 x i32>, align 8
  %result3 = alloca <2 x i32>, align 8
  %w = alloca i32, align 4
  %.inlinecache6 = alloca ptr, align 8
  %.cachedtype7 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype7, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %z, ptr align 4 @.__const, i32 4, i1 false)
  %0 = insertvalue %"any*" undef, ptr %z, 0
  %1 = insertvalue %"any*" %0, i64 ptrtoint (ptr @"$ct.test.Hello" to i64), 1
  store %"any*" %1, ptr %x, align 8
  %ptradd = getelementptr inbounds i8, ptr %x, i64 8
  %2 = load i64, ptr %ptradd, align 8
  %3 = inttoptr i64 %2 to ptr
  %type = load ptr, ptr %.cachedtype, align 8
  %4 = icmp eq ptr %3, %type
  br i1 %4, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %entry
  %ptradd1 = getelementptr inbounds i8, ptr %3, i64 16
  %5 = load ptr, ptr %ptradd1, align 8
  %6 = call ptr @.dyn_search(ptr %5, ptr @"$sel.test")
  store ptr %6, ptr %.inlinecache, align 8
  store ptr %3, ptr %.cachedtype, align 8
  br label %7

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %7

7:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %6, %cache_miss ]
  %8 = icmp eq ptr %fn_phi, null
  br i1 %8, label %missing_function, label %match

missing_function:                                 ; preds = %7
  %lo = load i64, ptr %x, align 8
  %ptradd2 = getelementptr inbounds i8, ptr %x, i64 8
  %hi = load ptr, ptr %ptradd2, align 8
  %9 = call double @test.Abc.test(i64 %lo, ptr %hi)
  store double %9, ptr %result, align 8
  %10 = load <2 x i32>, ptr %result, align 8
  br label %after_call

match:                                            ; preds = %7
  %11 = load ptr, ptr %x, align 8
  %12 = call double %fn_phi(ptr %11)
  store double %12, ptr %result3, align 8
  %13 = load <2 x i32>, ptr %result3, align 8
  br label %after_call

after_call:                                       ; preds = %match, %missing_function
  %result4 = phi <2 x i32> [ %10, %missing_function ], [ %13, %match ]
  store <2 x i32> %result4, ptr %z2, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %x, i64 8
  %14 = load i64, ptr %ptradd5, align 8
  %15 = inttoptr i64 %14 to ptr
  %type8 = load ptr, ptr %.cachedtype7, align 8
  %16 = icmp eq ptr %15, %type8
  br i1 %16, label %cache_hit11, label %cache_miss9

cache_miss9:                                      ; preds = %after_call
  %ptradd10 = getelementptr inbounds i8, ptr %15, i64 16
  %17 = load ptr, ptr %ptradd10, align 8
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.bye")
  store ptr %18, ptr %.inlinecache6, align 8
  store ptr %15, ptr %.cachedtype7, align 8
  br label %19

cache_hit11:                                      ; preds = %after_call
  %cache_hit_fn12 = load ptr, ptr %.inlinecache6, align 8
  br label %19

19:                                               ; preds = %cache_hit11, %cache_miss9
  %fn_phi13 = phi ptr [ %cache_hit_fn12, %cache_hit11 ], [ %18, %cache_miss9 ]
  %20 = icmp eq ptr %fn_phi13, null
  br i1 %20, label %missing_function14, label %match15

missing_function14:                               ; preds = %19
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr @.panic_msg, i64 40, ptr @.file, i64 23, ptr @.func, i64 4, i32 26)
  unreachable

match15:                                          ; preds = %19
  %22 = load ptr, ptr %x, align 8
  %23 = call i32 %fn_phi13(ptr %22)
  store i32 %23, ptr %w, align 4
  ret void
}