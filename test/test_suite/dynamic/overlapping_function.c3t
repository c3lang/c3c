// #target: macos-x64
module overlap;
import std::io;

interface TestProto
{
	fn void tesT();
}

interface TestProto2
{
	fn void tesT();
}

fn void Test.tesT(&self) @dynamic
{
}

fn void Test.foo(&self) @dynamic {}

struct Test (TestProto, TestProto2)
{
	void* abc;
}

fn void main()
{
	TestProto* z = mem::new(Test);
	z.tesT();
	TestProto2* w = (TestProto2*)z;
	w.tesT();
}

/* #expect: overlap.ll

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%"any*" = type { ptr, i64 }
%"any*[]" = type { ptr, i64 }

@"$ct.overlap.Test" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@std.core.mem.thread_allocator = external thread_local global %"any*", align 8
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", align 1
@.panic_msg = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [5 x i8] c"main\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.1 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$sel.tesT" = linkonce_odr constant [5 x i8] c"tesT\00", align 1
@.panic_msg.2 = internal constant [42 x i8] c"No method 'tesT' could be found on target\00", align 1
@.file.3 = internal constant [24 x i8] c"overlapping_function.c3\00", align 1
@"$ct.dyn.overlap.Test.tesT" = global { ptr, ptr, ptr } { ptr @overlap.Test.tesT, ptr @"$sel.tesT", ptr null }, align 8
@"$ct.dyn.overlap.Test.foo" = global { ptr, ptr, ptr } { ptr @overlap.Test.foo, ptr @"$sel.foo", ptr null }, align 8
@"$sel.foo" = linkonce_odr constant [4 x i8] c"foo\00", align 1
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.static_initialize.0, ptr null }]

; Function Attrs: nounwind uwtable
define void @overlap.Test.tesT(ptr %0) #0 {
entry:
  ret void
}

; Function Attrs:
define void @overlap.Test.foo(ptr %0) #0 {
entry:
  ret void
}

; Function Attrs:
define void @overlap.main() #0 {
entry:
  %z = alloca %"any*", align 8
  %self = alloca %"any*", align 8
  %error_var = alloca i64, align 8
  %self1 = alloca %"any*", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %"any*"], align 16
  %indirectarg = alloca %"any*[]", align 8
  %.inlinecache4 = alloca ptr, align 8
  %.cachedtype5 = alloca ptr, align 8
  %w = alloca %"any*", align 8
  %.inlinecache15 = alloca ptr, align 8
  %.cachedtype16 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype16, align 8
  store ptr null, ptr %.cachedtype5, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 @std.core.mem.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self1, ptr align 8 %self, i32 16, i1 false)
  %ptradd = getelementptr inbounds i8, ptr %self1, i64 8
  %0 = load i64, ptr %ptradd, align 8
  %1 = inttoptr i64 %0 to ptr
  %type = load ptr, ptr %.cachedtype, align 8
  %2 = icmp eq ptr %1, %type
  br i1 %2, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 16
  %3 = load ptr, ptr %ptradd2, align 8
  %4 = call ptr @.dyn_search(ptr %3, ptr @"$sel.acquire")
  store ptr %4, ptr %.inlinecache, align 8
  store ptr %1, ptr %.cachedtype, align 8
  br label %5

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %5

5:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %4, %cache_miss ]
  %6 = icmp eq ptr %fn_phi, null
  br i1 %6, label %missing_function, label %match

missing_function:                                 ; preds = %5
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr @.panic_msg, i64 44, ptr @.file, i64 16, ptr @.func, i64 4, i32 117)
  unreachable

match:                                            ; preds = %5
  %8 = load ptr, ptr %self1, align 8
  %9 = call i64 %fn_phi(ptr %retparam, ptr %8, i64 8, i8 zeroext 0, i64 0, i64 0)
  %not_err = icmp eq i64 %9, 0
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %10, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %match
  store i64 %9, ptr %error_var, align 8
  br label %panic_block

after_check:                                      ; preds = %match
  %11 = load ptr, ptr %retparam, align 8
  br label %noerr_block

panic_block:                                      ; preds = %assign_optional
  %12 = insertvalue %"any*" undef, ptr %error_var, 0
  %13 = insertvalue %"any*" %12, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  store %"any*" %13, ptr %varargslots, align 16
  %14 = insertvalue %"any*[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any*[]" %14, i64 1, 1
  store %"any*[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.1, i64 36, ptr @.file, i64 16, ptr @.func, i64 4, i32 152, ptr byval(%"any*[]") align 8 %indirectarg)
  unreachable

noerr_block:                                      ; preds = %after_check
  %15 = insertvalue %"any*" undef, ptr %11, 0
  %16 = insertvalue %"any*" %15, i64 ptrtoint (ptr @"$ct.overlap.Test" to i64), 1
  store %"any*" %16, ptr %z, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %z, i64 8
  %17 = load i64, ptr %ptradd3, align 8
  %18 = inttoptr i64 %17 to ptr
  %type6 = load ptr, ptr %.cachedtype5, align 8
  %19 = icmp eq ptr %18, %type6
  br i1 %19, label %cache_hit9, label %cache_miss7

cache_miss7:                                      ; preds = %noerr_block
  %ptradd8 = getelementptr inbounds i8, ptr %18, i64 16
  %20 = load ptr, ptr %ptradd8, align 8
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.tesT")
  store ptr %21, ptr %.inlinecache4, align 8
  store ptr %18, ptr %.cachedtype5, align 8
  br label %22

cache_hit9:                                       ; preds = %noerr_block
  %cache_hit_fn10 = load ptr, ptr %.inlinecache4, align 8
  br label %22

22:                                               ; preds = %cache_hit9, %cache_miss7
  %fn_phi11 = phi ptr [ %cache_hit_fn10, %cache_hit9 ], [ %21, %cache_miss7 ]
  %23 = icmp eq ptr %fn_phi11, null
  br i1 %23, label %missing_function12, label %match13

missing_function12:                               ; preds = %22
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr @.panic_msg.2, i64 41, ptr @.file.3, i64 23, ptr @.func, i64 4, i32 28)
  unreachable

match13:                                          ; preds = %22
  %25 = load ptr, ptr %z, align 8
  call void %fn_phi11(ptr %25)
  %26 = load %"any*", ptr %z, align 8
  store %"any*" %26, ptr %w, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %w, i64 8
  %27 = load i64, ptr %ptradd14, align 8
  %28 = inttoptr i64 %27 to ptr
  %type17 = load ptr, ptr %.cachedtype16, align 8
  %29 = icmp eq ptr %28, %type17
  br i1 %29, label %cache_hit20, label %cache_miss18

cache_miss18:                                     ; preds = %match13
  %ptradd19 = getelementptr inbounds i8, ptr %28, i64 16
  %30 = load ptr, ptr %ptradd19, align 8
  %31 = call ptr @.dyn_search(ptr %30, ptr @"$sel.tesT")
  store ptr %31, ptr %.inlinecache15, align 8
  store ptr %28, ptr %.cachedtype16, align 8
  br label %32

cache_hit20:                                      ; preds = %match13
  %cache_hit_fn21 = load ptr, ptr %.inlinecache15, align 8
  br label %32

32:                                               ; preds = %cache_hit20, %cache_miss18
  %fn_phi22 = phi ptr [ %cache_hit_fn21, %cache_hit20 ], [ %31, %cache_miss18 ]
  %33 = icmp eq ptr %fn_phi22, null
  br i1 %33, label %missing_function23, label %match24

missing_function23:                               ; preds = %32
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr @.panic_msg.2, i64 41, ptr @.file.3, i64 23, ptr @.func, i64 4, i32 30)
  unreachable

match24:                                          ; preds = %32
  %35 = load ptr, ptr %w, align 8
  call void %fn_phi22(ptr %35)
  ret void
}

; Function Attrs:
define i32 @main(i32 %0, ptr %1) #0 {
entry:
  call void @overlap.main()
  ret i32 0
}

define weak_odr ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}


; Function Attrs:
declare void @std.core.builtin.panicf(ptr, i64, ptr, i64, ptr, i64, i32, ptr byval(%"any*[]") align 8) #0

define internal void @.static_initialize.0() {
entry:
  br label %dtable_check

dtable_check:                                     ; preds = %dtable_next, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.overlap.Test", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_next ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %0 = icmp eq ptr %dtable_ptr, null
  br i1 %0, label %dtable_found, label %dtable_next

dtable_next:                                      ; preds = %dtable_check
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.overlap.Test.tesT", ptr %dtable_ref, align 8
  br label %dtable_check1

dtable_check1:                                    ; preds = %dtable_next4, %dtable_found
  %dtable_ref2 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.overlap.Test", i32 0, i32 2), %dtable_found ], [ %next_dtable_ref5, %dtable_next4 ]
  %dtable_ptr3 = load ptr, ptr %dtable_ref2, align 8
  %1 = icmp eq ptr %dtable_ptr3, null
  br i1 %1, label %dtable_found6, label %dtable_next4

dtable_next4:                                     ; preds = %dtable_check1
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr3, i32 0, i32 2
  br label %dtable_check1

dtable_found6:                                    ; preds = %dtable_check1
  store ptr @"$ct.dyn.overlap.Test.foo", ptr %dtable_ref2, align 8
  ret void
}
