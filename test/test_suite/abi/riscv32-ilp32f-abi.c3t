// #target: linux-riscv32
// #opt: --riscvfloat=float
module test;
// Doubles are still passed in GPRs, so the 'e' argument will be anyext as
// GPRs are exhausted.
fn void f_fpr_tracking(double a, double b, double c, double d, ichar e) {}

// Lowering for doubles is unnmodified, as 64 > FLEN.
struct Double_s { double d; }

fn void f_double_s_arg(Double_s a) {}

fn Double_s f_ret_double_s() {
  return {1.0};
}

struct Double_double_s { double d; double e; }

fn void f_double_double_s_arg(Double_double_s a) {}

fn Double_double_s f_ret_double_double_s() {
  return {1.0, 2.0};
}

struct Double_int8_s { double d; long i; }

struct Int_double_s { int a; double b; }

fn void f_int_double_s_arg(Int_double_s a) {}

fn Int_double_s f_ret_int_double_s() {
  return {1, 2.0};
}

/* #expect: test.ll

define void @test_f_fpr_tracking(double %0, double %1, double %2, double %3, i8 %4)

define void @test_f_double_s_arg(i64 %0)

define i64 @test_f_ret_double_s()

define void @test_f_double_double_s_arg(ptr align 8 %0)

define void @test_f_ret_double_double_s(ptr noalias sret(%Double_double_s) align 8 %0)

define void @test_f_int_double_s_arg(ptr align 8 %0) #0 {

define void @test_f_ret_int_double_s(ptr noalias sret(%Int_double_s) align 8 %0) #0 {

