// #target: linux-riscv64
// #opt: --riscvfloat=double
module test;

// Verify that the tracking of used GPRs and FPRs works correctly by checking
// that small integers are sign/zero extended when passed in registers.

// Doubles are passed in FPRs, so argument 'i' will be passed zero-extended
// because it will be passed in a GPR.

fn void f_fpr_tracking(double a, double b, double c, double d, double e, double f,
                    double g, double h, char i) {}

// Check that fp, fp+fp, and int+fp structs are lowered correctly. These will
// be passed in FPR, FPR+FPR, or GPR+FPR regs if sufficient registers are
// available the widths are <= XLEN and FLEN, and should be expanded to
// separate arguments in IR. They are passed by the same rules for returns,
// but will be lowered to simple two-element structs if necessary (as LLVM IR
// functions cannot return multiple values).

// A struct containing just one floating-point real is passed as though it
// were a standalone floating-point real.

struct Double_s { double f; }

fn void f_double_s_arg(Double_s a) {}

fn Double_s f_ret_double_s() {
  return {1.0};
}

// A struct containing a double and any number of zero-width bitfields is
// passed as though it were a standalone floating-point real.

// Check that structs containing two floating point values (FLEN <= width) are
// expanded provided sufficient FPRs are available.

struct Double_double_s { double f; double g; }
struct Double_float_s { double f; float g; }

fn void f_double_double_s_arg(Double_double_s a) {}

fn Double_double_s f_ret_double_double_s() {
  return {1.0, 2.0};
}

fn void f_double_float_s_arg(Double_float_s a) {}
fn Double_float_s f_ret_double_float_s() {
  return {1.0, 2.0};
}

fn void f_double_double_s_arg_insufficient_fprs(float a, double b, double c, double d,
    double e, double f, double g, Double_double_s h) {}

// Check that structs containing int+double values are expanded, provided
// sufficient FPRs and GPRs are available. The integer components are neither
// sign or zero-extended.

struct Double_int8_s { double f; ichar i; }
struct Double_uint8_s { double f; char i; }
struct Double_int32_s { double f; int i; }
struct Double_int64_s { double f; long i; }

fn void f_double_int8_s_arg(Double_int8_s a) {}

fn Double_int8_s f_ret_double_int8_s() {
  return {1.0, 2};
}

fn void f_double_uint8_s_arg(Double_uint8_s a) {}

fn Double_uint8_s f_ret_double_uint8_s() {
  return {1.0, 2};
}

fn void f_double_int32_s_arg(Double_int32_s a) {}

fn Double_int32_s f_ret_double_int32_s() {
  return {1.0, 2};
}

fn void f_double_int64_s_arg(Double_int64_s a) {}

fn Double_int64_s f_ret_double_int64_s() {
  return {1.0, 2};
}


fn void f_double_int8_s_arg_insufficient_gprs(int a, int b, int c, int d, int e,
                                          int f, int g, int h, Double_int8_s i) {}

fn void f_struct_double_int8_insufficient_fprs(float a, double b, double c, double d,
                                           double e, double f, double g, double h, Double_int8_s i) {}


// Test single or two-element structs that need flattening. e.g. those
// containing nested structs, doubles in small arrays, zero-length structs etc.

struct Doublearr1_s { double[1] a; }

fn void f_doublearr1_s_arg(Doublearr1_s a) {}

fn Doublearr1_s f_ret_doublearr1_s() {
  return {{1.0}};
}

struct Doublearr2_s { double[2] a; }

fn void f_doublearr2_s_arg(Doublearr2_s a) {}

fn Doublearr2_s f_ret_doublearr2_s() {
  return {{1.0, 2.0}};
}

struct Inner { double[1] f; }
struct Doublearr2_tricky1_s { Inner[2] g; }

fn void f_doublearr2_tricky1_s_arg(Doublearr2_tricky1_s a) {}

fn Doublearr2_tricky1_s f_ret_doublearr2_tricky1_s() {
  return {{{{1.0}}, {{2.0}}}};
}

// Test structs that should be passed according to the normal integer calling
// convention.

struct Int_double_int_s { int a; double b; int c; }

fn void f_int_double_int_s_arg(Int_double_int_s a) {}

fn Int_double_int_s f_ret_int_double_int_s() {
  return {1, 2.0, 3};
}

struct Char_char_double_s { char a; char b; double c; }

fn void f_char_char_double_s_arg(Char_char_double_s a) {}

fn Char_char_double_s f_ret_char_char_double_s() {
  return {1, 2, 3.0};
}

// Unions are always passed according to the integer calling convention, even
// if they can only contain a double.

union Double_u { double a; }

fn void f_double_u_arg(Double_u a) {}

fn Double_u f_ret_double_u() {
  return {1.0};
}

/* #expect: test.ll

define void @test_f_fpr_tracking(double %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, i8 zeroext %8) #0 {
entry:
  ret void
}


define void @test_f_double_s_arg(double %0) #0 {
entry:
  %a = alloca %Double_s, align 8
  store double %0, ptr %a, align 8
  ret void
}


define double @test_f_ret_double_s() #0 {
entry:
  %literal = alloca %Double_s, align 8
  %0 = getelementptr inbounds %Double_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = load double, ptr %literal, align 8
  ret double %1
}


define void @test_f_double_double_s_arg(double %0, double %1) #0 {
entry:
  %a = alloca %Double_double_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds double, ptr %a, i64 1
  store double %1, ptr %a, align 8
  ret void
}


define { double, double } @test_f_ret_double_double_s() #0 {
entry:
  %literal = alloca %Double_double_s, align 8
  %0 = getelementptr inbounds %Double_double_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Double_double_s, ptr %literal, i32 0, i32 1
  store double 2.000000e+00, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds double, ptr %literal, i64 1
  %3 = load double, ptr %literal, align 8
  %4 = insertvalue { double, double } undef, double %2, 0
  %5 = insertvalue { double, double } %4, double %3, 1
  ret { double, double } %5
}


define void @test_f_double_float_s_arg(double %0, float %1) #0 {
entry:
  %a = alloca %Double_float_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds float, ptr %a, i64 2
  store float %1, ptr %a, align 8
  ret void
}


define { double, float } @test_f_ret_double_float_s() #0 {
entry:
  %literal = alloca %Double_float_s, align 8
  %0 = getelementptr inbounds %Double_float_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Double_float_s, ptr %literal, i32 0, i32 1
  store float 2.000000e+00, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds float, ptr %literal, i64 2
  %3 = load float, ptr %literal, align 8
  %4 = insertvalue { double, float } undef, double %2, 0
  %5 = insertvalue { double, float } %4, float %3, 1
  ret { double, float } %5
}


define void @test_f_double_double_s_arg_insufficient_fprs(float %0, double %1, double %2, double %3, double %4, double %5, double %6, [2 x i64] %7) #0 {
entry:
  %h = alloca %Double_double_s, align 8
  store [2 x i64] %7, ptr %h, align 8
  ret void
}


define void @test_f_double_int8_s_arg(double %0, i8 %1) #0 {
entry:
  %a = alloca %Double_int8_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds i8, ptr %a, i64 8
  store i8 %1, ptr %a, align 8
  ret void
}


define { double, i8 } @test_f_ret_double_int8_s() #0 {
entry:
  %literal = alloca %Double_int8_s, align 8
  %0 = getelementptr inbounds %Double_int8_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Double_int8_s, ptr %literal, i32 0, i32 1
  store i8 2, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds i8, ptr %literal, i64 8
  %3 = load i8, ptr %literal, align 8
  %4 = insertvalue { double, i8 } undef, double %2, 0
  %5 = insertvalue { double, i8 } %4, i8 %3, 1
  ret { double, i8 } %5
}


define void @test_f_double_uint8_s_arg(double %0, i8 %1) #0 {
entry:
  %a = alloca %Double_uint8_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds i8, ptr %a, i64 8
  store i8 %1, ptr %a, align 8
  ret void
}


define { double, i8 } @test_f_ret_double_uint8_s() #0 {
entry:
  %literal = alloca %Double_uint8_s, align 8
  %0 = getelementptr inbounds %Double_uint8_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Double_uint8_s, ptr %literal, i32 0, i32 1
  store i8 2, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds i8, ptr %literal, i64 8
  %3 = load i8, ptr %literal, align 8
  %4 = insertvalue { double, i8 } undef, double %2, 0
  %5 = insertvalue { double, i8 } %4, i8 %3, 1
  ret { double, i8 } %5
}


define void @test_f_double_int32_s_arg(double %0, i32 %1) #0 {
entry:
  %a = alloca %Double_int32_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds i32, ptr %a, i64 2
  store i32 %1, ptr %a, align 8
  ret void
}


define { double, i32 } @test_f_ret_double_int32_s() #0 {
entry:
  %literal = alloca %Double_int32_s, align 8
  %0 = getelementptr inbounds %Double_int32_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Double_int32_s, ptr %literal, i32 0, i32 1
  store i32 2, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds i32, ptr %literal, i64 2
  %3 = load i32, ptr %literal, align 8
  %4 = insertvalue { double, i32 } undef, double %2, 0
  %5 = insertvalue { double, i32 } %4, i32 %3, 1
  ret { double, i32 } %5
}


define void @test_f_double_int64_s_arg(double %0, i64 %1) #0 {
entry:
  %a = alloca %Double_int64_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds i64, ptr %a, i64 1
  store i64 %1, ptr %a, align 8
  ret void
}


define { double, i64 } @test_f_ret_double_int64_s() #0 {
entry:
  %literal = alloca %Double_int64_s, align 8
  %0 = getelementptr inbounds %Double_int64_s, ptr %literal, i32 0, i32 0
  store double 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Double_int64_s, ptr %literal, i32 0, i32 1
  store i64 2, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds i64, ptr %literal, i64 1
  %3 = load i64, ptr %literal, align 8
  %4 = insertvalue { double, i64 } undef, double %2, 0
  %5 = insertvalue { double, i64 } %4, i64 %3, 1
  ret { double, i64 } %5
}


define void @test_f_double_int8_s_arg_insufficient_gprs(i32 signext %0, i32 signext %1, i32 signext %2, i32 signext %3, i32 signext %4, i32 signext %5, i32 signext %6, i32 signext %7, [2 x i64] %8) #0 {
entry:
  %i = alloca %Double_int8_s, align 8
  store [2 x i64] %8, ptr %i, align 8
  ret void
}


define void @test_f_struct_double_int8_insufficient_fprs(float %0, double %1, double %2, double %3, double %4, double %5, double %6, double %7, [2 x i64] %8) #0 {
entry:
  %i = alloca %Double_int8_s, align 8
  store [2 x i64] %8, ptr %i, align 8
  ret void
}


define void @test_f_doublearr1_s_arg(double %0) #0 {
entry:
  %a = alloca %Doublearr1_s, align 8
  store double %0, ptr %a, align 8
  ret void
}


define double @test_f_ret_doublearr1_s() #0 {
entry:
  %literal = alloca %Doublearr1_s, align 8
  %0 = getelementptr inbounds %Doublearr1_s, ptr %literal, i32 0, i32 0
  %1 = getelementptr inbounds [1 x double], ptr %0, i64 0, i64 0
  store double 1.000000e+00, ptr %1, align 8
  %2 = load double, ptr %literal, align 8
  ret double %2
}


define void @test_f_doublearr2_s_arg(double %0, double %1) #0 {
entry:
  %a = alloca %Doublearr2_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds double, ptr %a, i64 1
  store double %1, ptr %a, align 8
  ret void
}


define { double, double } @test_f_ret_doublearr2_s() #0 {
entry:
  %literal = alloca %Doublearr2_s, align 8
  %0 = getelementptr inbounds %Doublearr2_s, ptr %literal, i32 0, i32 0
  %1 = getelementptr inbounds [2 x double], ptr %0, i64 0, i64 0
  store double 1.000000e+00, ptr %1, align 8
  %2 = getelementptr inbounds [2 x double], ptr %0, i64 0, i64 1
  store double 2.000000e+00, ptr %2, align 8
  %3 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds double, ptr %literal, i64 1
  %4 = load double, ptr %literal, align 8
  %5 = insertvalue { double, double } undef, double %3, 0
  %6 = insertvalue { double, double } %5, double %4, 1
  ret { double, double } %6
}


define void @test_f_doublearr2_tricky1_s_arg(double %0, double %1) #0 {
entry:
  %a = alloca %Doublearr2_tricky1_s, align 8
  store double %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds double, ptr %a, i64 1
  store double %1, ptr %a, align 8
  ret void
}


define { double, double } @test_f_ret_doublearr2_tricky1_s() #0 {
entry:
  %literal = alloca %Doublearr2_tricky1_s, align 8
  %0 = getelementptr inbounds %Doublearr2_tricky1_s, ptr %literal, i32 0, i32 0
  %1 = getelementptr inbounds [2 x %Inner], ptr %0, i64 0, i64 0
  %2 = getelementptr inbounds %Inner, ptr %1, i32 0, i32 0
  %3 = getelementptr inbounds [1 x double], ptr %2, i64 0, i64 0
  store double 1.000000e+00, ptr %3, align 8
  %4 = getelementptr inbounds [2 x %Inner], ptr %0, i64 0, i64 1
  %5 = getelementptr inbounds %Inner, ptr %4, i32 0, i32 0
  %6 = getelementptr inbounds [1 x double], ptr %5, i64 0, i64 0
  store double 2.000000e+00, ptr %6, align 8
  %7 = load double, ptr %literal, align 8
  %ptroffset = getelementptr inbounds double, ptr %literal, i64 1
  %8 = load double, ptr %literal, align 8
  %9 = insertvalue { double, double } undef, double %7, 0
  %10 = insertvalue { double, double } %9, double %8, 1
  ret { double, double } %10
}


define void @test_f_int_double_int_s_arg(ptr align 8 %0) #0 {
entry:
  ret void
}


define void @test_f_ret_int_double_int_s(ptr noalias sret(%Int_double_int_s) align 8 %0) #0 {
entry:
  %literal = alloca %Int_double_int_s, align 8
  %1 = getelementptr inbounds %Int_double_int_s, ptr %literal, i32 0, i32 0
  store i32 1, ptr %1, align 8
  %2 = getelementptr inbounds %Int_double_int_s, ptr %literal, i32 0, i32 1
  store double 2.000000e+00, ptr %2, align 8
  %3 = getelementptr inbounds %Int_double_int_s, ptr %literal, i32 0, i32 2
  store i32 3, ptr %3, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false)
  ret void
}


define void @test_f_char_char_double_s_arg([2 x i64] %0) #0 {
entry:
  %a = alloca %Char_char_double_s, align 8
  store [2 x i64] %0, ptr %a, align 8
  ret void
}


define [2 x i64] @test_f_ret_char_char_double_s() #0 {
entry:
  %literal = alloca %Char_char_double_s, align 8
  %0 = getelementptr inbounds %Char_char_double_s, ptr %literal, i32 0, i32 0
  store i8 1, ptr %0, align 8
  %1 = getelementptr inbounds %Char_char_double_s, ptr %literal, i32 0, i32 1
  store i8 2, ptr %1, align 1
  %2 = getelementptr inbounds %Char_char_double_s, ptr %literal, i32 0, i32 2
  store double 3.000000e+00, ptr %2, align 8
  %3 = load [2 x i64], ptr %literal, align 8
  ret [2 x i64] %3
}


define void @test_f_double_u_arg(i64 %0) #0 {
entry:
  %a = alloca %Double_u, align 8
  store i64 %0, ptr %a, align 8
  ret void
}


define i64 @test_f_ret_double_u() #0 {
entry:
  %literal = alloca %Double_u, align 8
  store double 1.000000e+00, ptr %literal, align 8
  %0 = load i64, ptr %literal, align 8
  ret i64 %0
}

