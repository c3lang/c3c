// #target: linux-riscv64
// #opt: --riscvfloat=double
module test;

// Verify that the tracking of used GPRs and FPRs works correctly by checking
// that small integers are sign/zero extended when passed in registers.

// Floats are passed in FPRs, so argument 'i' will be passed zero-extended
// because it will be passed in a GPR.

fn void f_fpr_tracking(float a, float b, float c, float d, float e, float f,
                    float g, float h, char i) {}

// Check that fp, fp+fp, and int+fp structs are lowered correctly. These will
// be passed in FPR, FPR+FPR, or GPR+FPR regs if sufficient registers are
// available the widths are <= XLEN and FLEN, and should be expanded to
// separate arguments in IR. They are passed by the same rules for returns,
// but will be lowered to simple two-element structs if necessary (as LLVM IR
// functions cannot return multiple values).

// A struct containing just one floating-point real is passed as though it
// were a standalone floating-point real.

struct Float_s { float f; }

fn void f_float_s_arg(Float_s a) {}
fn Float_s f_ret_float_s() {
  return {1.0};
}


// Check that structs containing two float values (FLEN <= width) are expanded
// provided sufficient FPRs are available.

struct Float_float_s { float f; float g; }

fn void f_float_float_s_arg(Float_float_s a) {}

fn Float_float_s f_ret_float_float_s() {
  return {1.0, 2.0};
}

fn void f_float_float_s_arg_insufficient_fprs(float a, float b, float c, float d,
    float e, float f, float g, Float_float_s h) {}

// Check that structs containing int+float values are expanded, provided
// sufficient FPRs and GPRs are available. The integer components are neither
// sign or zero-extended.

struct Float_int8_s { float f; ichar i; }
struct Float_uint8_s { float f; char i; }
struct Float_int32_s { float f; int i; }
struct Float_int64_s { float f; long i; }

fn void f_float_int8_s_arg(Float_int8_s a) {}
fn Float_int8_s f_ret_float_int8_s() {
  return {1.0, 2};
}

fn void f_float_uint8_s_arg(Float_uint8_s a) {}
fn Float_uint8_s f_ret_float_uint8_s() {
  return {1.0, 2};
}

fn void f_float_int32_s_arg(Float_int32_s a) {}
fn Float_int32_s f_ret_float_int32_s() {
  return {1.0, 2};
}

fn void f_float_int64_s_arg(Float_int64_s a) {}
fn Float_int64_s f_ret_float_int64_s() {
  return {1.0, 2};
}


fn void f_float_int8_s_arg_insufficient_gprs(int a, int b, int c, int d, int e,
                                          int f, int g, int h, Float_int8_s i) {}

fn void f_struct_float_int8_insufficient_fprs(float a, float b, float c, float d,
                                           float e, float f, float g, float h, Float_int8_s i) {}

// Test single or two-element structs that need flattening. e.g. those
// containing nested structs, floats in small arrays, zero-length structs etc.

struct Floatarr1_s { float[1] a; }

fn void f_floatarr1_s_arg(Floatarr1_s a) {}
fn Floatarr1_s f_ret_floatarr1_s() {
  return {{1.0}};
}

struct Floatarr2_s { float[2] a; }
fn void f_floatarr2_s_arg(Floatarr2_s a) {}

fn Floatarr2_s f_ret_floatarr2_s() {
  return {{1.0, 2.0}};
}

struct Inner { float[1] f; }
struct Floatarr2_tricky1_s { Inner[2] g; }

fn void f_floatarr2_tricky1_s_arg(Floatarr2_tricky1_s a) {}
fn Floatarr2_tricky1_s f_ret_floatarr2_tricky1_s() {
  return {{{{1.0}}, {{2.0}}}};
}


// Test structs that should be passed according to the normal integer calling
// convention.

struct Int_float_int_s { int a; float b; int c; }

fn void f_int_float_int_s_arg(Int_float_int_s a) {}

fn Int_float_int_s f_ret_int_float_int_s() {
  return {1, 2.0, 3};
}

struct Char_char_float_s { char a; char b; float c; }

fn void f_char_char_float_s_arg(Char_char_float_s a) {}
fn Char_char_float_s f_ret_char_char_float_s() {
  return {1, 2, 3.0};
}

// Unions are always passed according to the integer calling convention, even
// if they can only contain a float.

union Float_u { float a; }

fn void f_float_u_arg(Float_u a) {}
fn Float_u f_ret_float_u() {
  return {1.0};
}

/* #expect: test.ll

define void @test_f_fpr_tracking(float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, i8 zeroext %8) #0 {

define void @test_f_float_s_arg(float %0) #0 {
entry:
  %a = alloca %Float_s, align 4
  store float %0, ptr %a, align 4
  ret void
}

define float @test_f_ret_float_s() #0 {
entry:
  %literal = alloca %Float_s, align 4
  %0 = getelementptr inbounds %Float_s, ptr %literal, i32 0, i32 0
  store float 1.000000e+00, ptr %0, align 4
  %1 = load float, ptr %literal, align 4
  ret float %1
}

define void @test_f_float_float_s_arg(float %0, float %1) #0 {
entry:
  %a = alloca %Float_float_s, align 4
  store float %0, ptr %a, align 4
  %ptroffset = getelementptr inbounds float, ptr %a, i64 1
  store float %1, ptr %a, align 4
  ret void
}

define { float, float } @test_f_ret_float_float_s() #0 {
entry:
  %literal = alloca %Float_float_s, align 4
  %0 = getelementptr inbounds %Float_float_s, ptr %literal, i32 0, i32 0
  store float 1.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Float_float_s, ptr %literal, i32 0, i32 1
  store float 2.000000e+00, ptr %1, align 4
  %2 = load float, ptr %literal, align 4
  %ptroffset = getelementptr inbounds float, ptr %literal, i64 1
  %3 = load float, ptr %literal, align 4
  %4 = insertvalue { float, float } undef, float %2, 0
  %5 = insertvalue { float, float } %4, float %3, 1
  ret { float, float } %5
}

define void @test_f_float_float_s_arg_insufficient_fprs(float %0, float %1, float %2, float %3, float %4, float %5, float %6, i64 %7) #0 {
entry:
  %h = alloca %Float_float_s, align 4
  store i64 %7, ptr %h, align 4
  ret void
}

define void @test_f_float_int8_s_arg(float %0, i8 %1) #0 {
entry:
  %a = alloca %Float_int8_s, align 4
  store float %0, ptr %a, align 4
  %ptroffset = getelementptr inbounds i8, ptr %a, i64 4
  store i8 %1, ptr %a, align 4
  ret void
}

define { float, i8 } @test_f_ret_float_int8_s() #0 {
entry:
  %literal = alloca %Float_int8_s, align 4
  %0 = getelementptr inbounds %Float_int8_s, ptr %literal, i32 0, i32 0
  store float 1.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Float_int8_s, ptr %literal, i32 0, i32 1
  store i8 2, ptr %1, align 4
  %2 = load float, ptr %literal, align 4
  %ptroffset = getelementptr inbounds i8, ptr %literal, i64 4
  %3 = load i8, ptr %literal, align 4
  %4 = insertvalue { float, i8 } undef, float %2, 0
  %5 = insertvalue { float, i8 } %4, i8 %3, 1
  ret { float, i8 } %5
}

define void @test_f_float_uint8_s_arg(float %0, i8 %1) #0 {
entry:
  %a = alloca %Float_uint8_s, align 4
  store float %0, ptr %a, align 4
  %ptroffset = getelementptr inbounds i8, ptr %a, i64 4
  store i8 %1, ptr %a, align 4
  ret void
}

define { float, i8 } @test_f_ret_float_uint8_s() #0 {
entry:
  %literal = alloca %Float_uint8_s, align 4
  %0 = getelementptr inbounds %Float_uint8_s, ptr %literal, i32 0, i32 0
  store float 1.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Float_uint8_s, ptr %literal, i32 0, i32 1
  store i8 2, ptr %1, align 4
  %2 = load float, ptr %literal, align 4
  %ptroffset = getelementptr inbounds i8, ptr %literal, i64 4
  %3 = load i8, ptr %literal, align 4
  %4 = insertvalue { float, i8 } undef, float %2, 0
  %5 = insertvalue { float, i8 } %4, i8 %3, 1
  ret { float, i8 } %5
}

define void @test_f_float_int32_s_arg(float %0, i32 %1) #0 {
entry:
  %a = alloca %Float_int32_s, align 4
  store float %0, ptr %a, align 4
  %ptroffset = getelementptr inbounds i32, ptr %a, i64 1
  store i32 %1, ptr %a, align 4
  ret void
}

define { float, i32 } @test_f_ret_float_int32_s() #0 {
entry:
  %literal = alloca %Float_int32_s, align 4
  %0 = getelementptr inbounds %Float_int32_s, ptr %literal, i32 0, i32 0
  store float 1.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Float_int32_s, ptr %literal, i32 0, i32 1
  store i32 2, ptr %1, align 4
  %2 = load float, ptr %literal, align 4
  %ptroffset = getelementptr inbounds i32, ptr %literal, i64 1
  %3 = load i32, ptr %literal, align 4
  %4 = insertvalue { float, i32 } undef, float %2, 0
  %5 = insertvalue { float, i32 } %4, i32 %3, 1
  ret { float, i32 } %5
}

define void @test_f_float_int64_s_arg(float %0, i64 %1) #0 {
entry:
  %a = alloca %Float_int64_s, align 8
  store float %0, ptr %a, align 8
  %ptroffset = getelementptr inbounds i64, ptr %a, i64 1
  store i64 %1, ptr %a, align 8
  ret void
}

define { float, i64 } @test_f_ret_float_int64_s() #0 {
entry:
  %literal = alloca %Float_int64_s, align 8
  %0 = getelementptr inbounds %Float_int64_s, ptr %literal, i32 0, i32 0
  store float 1.000000e+00, ptr %0, align 8
  %1 = getelementptr inbounds %Float_int64_s, ptr %literal, i32 0, i32 1
  store i64 2, ptr %1, align 8
  %2 = load float, ptr %literal, align 8
  %ptroffset = getelementptr inbounds i64, ptr %literal, i64 1
  %3 = load i64, ptr %literal, align 8
  %4 = insertvalue { float, i64 } undef, float %2, 0
  %5 = insertvalue { float, i64 } %4, i64 %3, 1
  ret { float, i64 } %5
}

define void @test_f_float_int8_s_arg_insufficient_gprs(i32 signext %0, i32 signext %1, i32 signext %2, i32 signext %3, i32 signext %4, i32 signext %5, i32 signext %6, i32 signext %7, i64 %8) #0 {
entry:
  %i = alloca %Float_int8_s, align 4
  store i64 %8, ptr %i, align 4
  ret void
}

define void @test_f_struct_float_int8_insufficient_fprs(float %0, float %1, float %2, float %3, float %4, float %5, float %6, float %7, i64 %8) #0 {
entry:
  %i = alloca %Float_int8_s, align 4
  store i64 %8, ptr %i, align 4
  ret void
}

define void @test_f_floatarr1_s_arg(float %0) #0 {
entry:
  %a = alloca %Floatarr1_s, align 4
  store float %0, ptr %a, align 4
  ret void
}

define float @test_f_ret_floatarr1_s() #0 {
entry:
  %literal = alloca %Floatarr1_s, align 4
  %0 = getelementptr inbounds %Floatarr1_s, ptr %literal, i32 0, i32 0
  %1 = getelementptr inbounds [1 x float], ptr %0, i64 0, i64 0
  store float 1.000000e+00, ptr %1, align 4
  %2 = load float, ptr %literal, align 4
  ret float %2
}

define void @test_f_floatarr2_s_arg(float %0, float %1) #0 {
entry:
  %a = alloca %Floatarr2_s, align 4
  store float %0, ptr %a, align 4
  %ptroffset = getelementptr inbounds float, ptr %a, i64 1
  store float %1, ptr %a, align 4
  ret void
}

define { float, float } @test_f_ret_floatarr2_s() #0 {
entry:
  %literal = alloca %Floatarr2_s, align 4
  %0 = getelementptr inbounds %Floatarr2_s, ptr %literal, i32 0, i32 0
  %1 = getelementptr inbounds [2 x float], ptr %0, i64 0, i64 0
  store float 1.000000e+00, ptr %1, align 4
  %2 = getelementptr inbounds [2 x float], ptr %0, i64 0, i64 1
  store float 2.000000e+00, ptr %2, align 4
  %3 = load float, ptr %literal, align 4
  %ptroffset = getelementptr inbounds float, ptr %literal, i64 1
  %4 = load float, ptr %literal, align 4
  %5 = insertvalue { float, float } undef, float %3, 0
  %6 = insertvalue { float, float } %5, float %4, 1
  ret { float, float } %6
}

define void @test_f_floatarr2_tricky1_s_arg(float %0, float %1) #0 {
entry:
  %a = alloca %Floatarr2_tricky1_s, align 4
  store float %0, ptr %a, align 4
  %ptroffset = getelementptr inbounds float, ptr %a, i64 1
  store float %1, ptr %a, align 4
  ret void
}

define { float, float } @test_f_ret_floatarr2_tricky1_s() #0 {
entry:
  %literal = alloca %Floatarr2_tricky1_s, align 4
  %0 = getelementptr inbounds %Floatarr2_tricky1_s, ptr %literal, i32 0, i32 0
  %1 = getelementptr inbounds [2 x %Inner], ptr %0, i64 0, i64 0
  %2 = getelementptr inbounds %Inner, ptr %1, i32 0, i32 0
  %3 = getelementptr inbounds [1 x float], ptr %2, i64 0, i64 0
  store float 1.000000e+00, ptr %3, align 4
  %4 = getelementptr inbounds [2 x %Inner], ptr %0, i64 0, i64 1
  %5 = getelementptr inbounds %Inner, ptr %4, i32 0, i32 0
  %6 = getelementptr inbounds [1 x float], ptr %5, i64 0, i64 0
  store float 2.000000e+00, ptr %6, align 4
  %7 = load float, ptr %literal, align 4
  %ptroffset = getelementptr inbounds float, ptr %literal, i64 1
  %8 = load float, ptr %literal, align 4
  %9 = insertvalue { float, float } undef, float %7, 0
  %10 = insertvalue { float, float } %9, float %8, 1
  ret { float, float } %10
}

define void @test_f_int_float_int_s_arg([2 x i64] %0) #0 {
entry:
  %a = alloca %Int_float_int_s, align 4
  %tempcoerce = alloca [2 x i64], align 8
  store [2 x i64] %0, ptr %tempcoerce, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a, ptr align 8 %tempcoerce, i32 12, i1 false)
  ret void
}

define [2 x i64] @test_f_ret_int_float_int_s() #0 {
entry:
  %literal = alloca %Int_float_int_s, align 4
  %tempcoerce = alloca [2 x i64], align 8
  %0 = getelementptr inbounds %Int_float_int_s, ptr %literal, i32 0, i32 0
  store i32 1, ptr %0, align 4
  %1 = getelementptr inbounds %Int_float_int_s, ptr %literal, i32 0, i32 1
  store float 2.000000e+00, ptr %1, align 4
  %2 = getelementptr inbounds %Int_float_int_s, ptr %literal, i32 0, i32 2
  store i32 3, ptr %2, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 12, i1 false)
  %3 = load [2 x i64], ptr %tempcoerce, align 8
  ret [2 x i64] %3
}

define void @test_f_char_char_float_s_arg(i64 %0) #0 {
entry:
  %a = alloca %Char_char_float_s, align 4
  store i64 %0, ptr %a, align 4
  ret void
}

define i64 @test_f_ret_char_char_float_s() #0 {
entry:
  %literal = alloca %Char_char_float_s, align 4
  %0 = getelementptr inbounds %Char_char_float_s, ptr %literal, i32 0, i32 0
  store i8 1, ptr %0, align 4
  %1 = getelementptr inbounds %Char_char_float_s, ptr %literal, i32 0, i32 1
  store i8 2, ptr %1, align 1
  %2 = getelementptr inbounds %Char_char_float_s, ptr %literal, i32 0, i32 2
  store float 3.000000e+00, ptr %2, align 4
  %3 = load i64, ptr %literal, align 4
  ret i64 %3
}

define void @test_f_float_u_arg(i64 %0) #0 {
entry:
  %a = alloca %Float_u, align 4
  %tempcoerce = alloca i64, align 8
  store i64 %0, ptr %tempcoerce, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a, ptr align 8 %tempcoerce, i32 4, i1 false)
  ret void
}

define i64 @test_f_ret_float_u() #0 {
entry:
  %literal = alloca %Float_u, align 4
  %tempcoerce = alloca i64, align 8
  store float 1.000000e+00, ptr %literal, align 4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %tempcoerce, ptr align 4 %literal, i32 4, i1 false)
  %0 = load i64, ptr %tempcoerce, align 8
  ret i64 %0
}
