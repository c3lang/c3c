// #target: macos-x64
module test;
import std::io;

fn void test(int x)
{
	$typeof($$FUNCPTR) ptr = $$FUNCPTR;
	io::printfln("%d", x);
	if (x > 0) ptr(x - 1);
}

fn void main()
{
	test(10);
}

/* #expect: test.ll

define void @test_test(i32 %0) #0 {
entry:
  %ptr = alloca void (i32)*, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr1 = alloca i32, align 4
  store void (i32)* @test_test, void (i32)** %ptr, align 8
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2 }, %"char[]"* %taddr, align 8
  %1 = bitcast %"char[]"* %taddr to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %lo = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %hi = load i64, i64* %3, align 8
  store i32 %0, i32* %taddr1, align 4
  %4 = bitcast i32* %taddr1 to i8*
  %5 = insertvalue %variant undef, i8* %4, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %7 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %6, %variant* %7, align 16
  %8 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 1, i64* %8, align 8
  %9 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %10 = bitcast [1 x %variant]* %varargslots to %variant*
  store %variant* %10, %variant** %9, align 8
  %11 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %lo2 = load i8*, i8** %12, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %hi3 = load i64, i64* %13, align 8
  %14 = call i64 @std_io_printfln(i64* %retparam, i8* %lo, i64 %hi, i8* %lo2, i64 %hi3)
  %not_err = icmp eq i64 %14, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit

if.then:                                          ; preds = %voiderr
  %15 = load void (i32)*, void (i32)** %ptr, align 8
  %sub = sub i32 %0, 1
  call void %15(i32 %sub)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %voiderr
  ret void
}
