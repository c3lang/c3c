// #target: macos-x64
module test;
import std::io;
struct Foo
{
	int a; int b;
}
fn void test(int[2] a, int[] b, int[<2>] c)
{
	io::printfln("%s %s %s", a, b, c);
}
fn void main()
{
	var $x = { { 1, 2 } };
	Foo[1] abc = (Foo[1])$x;
	Foo def = (Foo)$x[0];
	int[2][1] y = (int[2][1])$x;
	double[2][1] y2 = $x;
	io::printfln("%s %s {%s, %s}", y, y2, def.a, def.b);
	test({ 1, 2 }, { 3, 4}, { 5, 6 });
	var $a = { 2, 7 };
	test($a, $a, $a);
}

/* #expect: test.ll

entry:
  %abc = alloca [1 x %Foo], align 4
  %def = alloca %Foo, align 4
  %y = alloca [1 x [2 x i32]], align 4
  %y2 = alloca [1 x [2 x double]], align 16
  %retparam = alloca i64, align 8
  %varargslots = alloca [4 x %variant], align 16
  %taddr = alloca %"variant[]", align 8
  %literal = alloca [2 x i32], align 4
  %literal1 = alloca [2 x i32], align 4
  %taddr2 = alloca %"int[]", align 8
  %taddr5 = alloca <2 x i32>, align 8
  %literal6 = alloca [2 x i32], align 4
  %literal7 = alloca [2 x i32], align 4
  %taddr8 = alloca %"int[]", align 8
  %taddr11 = alloca <2 x i32>, align 8
  %0 = bitcast [1 x %Foo]* %abc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([1 x %Foo]* @.__const to i8*), i32 8, i1 false)
  %1 = bitcast %Foo* %def to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast (%Foo* @.__const.1 to i8*), i32 8, i1 false)
  %2 = bitcast [1 x [2 x i32]]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([1 x [2 x i32]]* @.__const.2 to i8*), i32 8, i1 false)
  %3 = bitcast [1 x [2 x double]]* %y2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([1 x [2 x double]]* @.__const.3 to i8*), i32 16, i1 false)
  %4 = bitcast [1 x [2 x i32]]* %y to i8*
  %5 = insertvalue %variant undef, i8* %4, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (%.introspect* @"ct$a1$a2$int" to i64), 1
  %7 = getelementptr inbounds [4 x %variant], [4 x %variant]* %varargslots, i64 0, i64 0
  store %variant %6, %variant* %7, align 16
  %8 = bitcast [1 x [2 x double]]* %y2 to i8*
  %9 = insertvalue %variant undef, i8* %8, 0
  %10 = insertvalue %variant %9, i64 ptrtoint (%.introspect* @"ct$a1$a2$double" to i64), 1
  %11 = getelementptr inbounds [4 x %variant], [4 x %variant]* %varargslots, i64 0, i64 1
  store %variant %10, %variant* %11, align 16
  %12 = getelementptr inbounds %Foo, %Foo* %def, i32 0, i32 0
  %13 = bitcast i32* %12 to i8*
  %14 = insertvalue %variant undef, i8* %13, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %16 = getelementptr inbounds [4 x %variant], [4 x %variant]* %varargslots, i64 0, i64 2
  store %variant %15, %variant* %16, align 16
  %17 = getelementptr inbounds %Foo, %Foo* %def, i32 0, i32 1
  %18 = bitcast i32* %17 to i8*
  %19 = insertvalue %variant undef, i8* %18, 0
  %20 = insertvalue %variant %19, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %21 = getelementptr inbounds [4 x %variant], [4 x %variant]* %varargslots, i64 0, i64 3
  store %variant %20, %variant* %21, align 16
  %22 = bitcast [4 x %variant]* %varargslots to %variant*
  %23 = insertvalue %"variant[]" undef, %variant* %22, 0
  %24 = insertvalue %"variant[]" %23, i64 4, 1
  store %"variant[]" %24, %"variant[]"* %taddr, align 8
  %25 = bitcast %"variant[]"* %taddr to { i8*, i64 }*
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  %lo = load i8*, i8** %26, align 8
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  %hi = load i64, i64* %27, align 8
  %28 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i64 14, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %28, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %29 = getelementptr inbounds [2 x i32], [2 x i32]* %literal, i64 0, i64 0
  store i32 1, i32* %29, align 4
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* %literal, i64 0, i64 1
  store i32 2, i32* %30, align 4
  %31 = bitcast [2 x i32]* %literal to i64*
  %32 = load i64, i64* %31, align 4
  %33 = getelementptr inbounds [2 x i32], [2 x i32]* %literal1, i64 0, i64 0
  store i32 3, i32* %33, align 4
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %literal1, i64 0, i64 1
  store i32 4, i32* %34, align 4
  %35 = bitcast [2 x i32]* %literal1 to i32*
  %36 = insertvalue %"int[]" undef, i32* %35, 0
  %37 = insertvalue %"int[]" %36, i64 2, 1
  store %"int[]" %37, %"int[]"* %taddr2, align 8
  %38 = bitcast %"int[]"* %taddr2 to { i8*, i64 }*
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 0
  %lo3 = load i8*, i8** %39, align 8
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 1
  %hi4 = load i64, i64* %40, align 8
  store <2 x i32> <i32 5, i32 6>, <2 x i32>* %taddr5, align 8
  %41 = bitcast <2 x i32>* %taddr5 to double*
  %42 = load double, double* %41, align 8
  call void @test_test(i64 %32, i8* %lo3, i64 %hi4, double %42)
  %43 = getelementptr inbounds [2 x i32], [2 x i32]* %literal6, i64 0, i64 0
  store i32 2, i32* %43, align 4
  %44 = getelementptr inbounds [2 x i32], [2 x i32]* %literal6, i64 0, i64 1
  store i32 7, i32* %44, align 4
  %45 = bitcast [2 x i32]* %literal6 to i64*
  %46 = load i64, i64* %45, align 4
  %47 = getelementptr inbounds [2 x i32], [2 x i32]* %literal7, i64 0, i64 0
  store i32 2, i32* %47, align 4
  %48 = getelementptr inbounds [2 x i32], [2 x i32]* %literal7, i64 0, i64 1
  store i32 7, i32* %48, align 4
  %49 = bitcast [2 x i32]* %literal7 to i32*
  %50 = insertvalue %"int[]" undef, i32* %49, 0
  %51 = insertvalue %"int[]" %50, i64 2, 1
  store %"int[]" %51, %"int[]"* %taddr8, align 8
  %52 = bitcast %"int[]"* %taddr8 to { i8*, i64 }*
  %53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %52, i32 0, i32 0
  %lo9 = load i8*, i8** %53, align 8
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %52, i32 0, i32 1
  %hi10 = load i64, i64* %54, align 8
  store <2 x i32> <i32 2, i32 7>, <2 x i32>* %taddr11, align 8
  %55 = bitcast <2 x i32>* %taddr11 to double*
  %56 = load double, double* %55, align 8
  call void @test_test(i64 %46, i8* %lo9, i64 %hi10, double %56)
  ret void
}