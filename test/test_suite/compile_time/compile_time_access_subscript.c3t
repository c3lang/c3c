// #target: macos-x64
module test;
import std::io;
struct Abc
{
	float m00, m01, m10, m11;
}

Abc a = flip(Abc { 1, 2, 3, 4 });

macro flip($init)
{
	return Abc { $init.m01, $init.m10, $init.m11, $init.m00 };
}

macro check_type($Type)
{
	var $b = $Type[4][4] {};
	$Type z = $b[2][2];
	return z;
}

enum Blurb { FOO }

typedef Bdd = distinct Abc;
fn void main()
{
	var $i = int[4] { 1, 2, 3, 4 };
	var $b = Abc[2] { Abc {}, Abc { 11, 22, 33, 44 }};
	var $c = any[4] {};
	check_type(int);
	check_type(Abc);
	check_type(anyfault);
	check_type(Blurb);
	check_type(int*);
	check_type(bool);
	check_type(typeid);
	check_type(int[<3>]);
	check_type(Bdd);
	check_type(int[2]);
	check_type(int[]);
	io::printfn("%d", $b[0].m11);
}

/* #expect: test.ll

  %z = alloca i32, align 4
  %z1 = alloca %Abc, align 4
  %z2 = alloca i64, align 8
  %z3 = alloca i32, align 4
  %z4 = alloca ptr, align 8
  %z5 = alloca i8, align 1
  %z6 = alloca i64, align 8
  %z7 = alloca <3 x i32>, align 16
  %z8 = alloca %Abc, align 4
  %z9 = alloca [2 x i32], align 4
  %z10 = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %literal = alloca %Abc, align 4
  store i32 0, ptr %z, align 4
  %0 = getelementptr inbounds %Abc, ptr %z1, i32 0, i32 0
  store float 0.000000e+00, ptr %0, align 4
  %1 = getelementptr inbounds %Abc, ptr %z1, i32 0, i32 1
  store float 0.000000e+00, ptr %1, align 4
  %2 = getelementptr inbounds %Abc, ptr %z1, i32 0, i32 2
  store float 0.000000e+00, ptr %2, align 4
  %3 = getelementptr inbounds %Abc, ptr %z1, i32 0, i32 3
  store float 0.000000e+00, ptr %3, align 4
  store i64 0, ptr %z2, align 8
  store i32 0, ptr %z3, align 4
  store ptr null, ptr %z4, align 8
  store i8 0, ptr %z5, align 1
  store i64 0, ptr %z6, align 8
  store <3 x i32> zeroinitializer, ptr %z7, align 16
  %4 = getelementptr inbounds %Abc, ptr %z8, i32 0, i32 0
  store float 0.000000e+00, ptr %4, align 4
  %5 = getelementptr inbounds %Abc, ptr %z8, i32 0, i32 1
  store float 0.000000e+00, ptr %5, align 4
  %6 = getelementptr inbounds %Abc, ptr %z8, i32 0, i32 2
  store float 0.000000e+00, ptr %6, align 4
  %7 = getelementptr inbounds %Abc, ptr %z8, i32 0, i32 3
  store float 0.000000e+00, ptr %7, align 4
  %8 = getelementptr inbounds [2 x i32], ptr %z9, i64 0, i64 0
  store i32 0, ptr %8, align 4
  %9 = getelementptr inbounds [2 x i32], ptr %z9, i64 0, i64 1
  store i32 0, ptr %9, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %z10, i8 0, i64 16, i1 false)
  %10 = getelementptr inbounds %Abc, ptr %literal, i32 0, i32 0
  store float 0.000000e+00, ptr %10, align 4
  %11 = getelementptr inbounds %Abc, ptr %literal, i32 0, i32 1
  store float 0.000000e+00, ptr %11, align 4
  %12 = getelementptr inbounds %Abc, ptr %literal, i32 0, i32 2
  store float 0.000000e+00, ptr %12, align 4
  %13 = getelementptr inbounds %Abc, ptr %literal, i32 0, i32 3
  store float 0.000000e+00, ptr %13, align 4
  %14 = insertvalue %any undef, ptr %literal, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.test.Abc" to i64), 1
  %16 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %15, ptr %16, align 16
  %17 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  ret void
}
