// #target: macos-x64
module test;
import std::io;

macro printline()
{
	io::printfn("%d", $$LINE); io::printfn("%d", $$LINE_RAW);
}
fn void test(int x)
{
	io::printfn("%d", x);
	if (x > 0) $$FUNCTION(x - 1);
	io::printn($$TIME);
	io::printn($$DATE);
	printline();
	io::printn($$FILE);
	io::printn($$MODULE);
}

bool is_def = $defined($$FUNCTION);
fn void main()
{
	bool is_def2 = $defined($$FUNCTION);
	test(10);
}

/* #expect: test.ll

define void @test.test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %taddr = alloca i32, align 4
  %x = alloca %"char[]", align 8
  %retparam1 = alloca i64, align 8
  %result = alloca %File, align 8
  %x2 = alloca %"char[]", align 8
  %retparam3 = alloca i64, align 8
  %result4 = alloca %File, align 8
  %retparam7 = alloca i64, align 8
  %varargslots8 = alloca [1 x %any], align 16
  %taddr9 = alloca i64, align 8
  %retparam10 = alloca i64, align 8
  %varargslots11 = alloca [1 x %any], align 16
  %taddr12 = alloca i64, align 8
  %x13 = alloca %"char[]", align 8
  %retparam14 = alloca i64, align 8
  %result15 = alloca %File, align 8
  %x18 = alloca %"char[]", align 8
  %retparam19 = alloca i64, align 8
  %result20 = alloca %File, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %any undef, ptr %taddr, 0
  %2 = insertvalue %any %1, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %3 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %2, ptr %3, align 16
  %4 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit
if.then:                                          ; preds = %entry
  %sub = sub i32 %0, 1
  call void @test.test(i32 %sub)
  br label %if.exit
if.exit:                                          ; preds = %if.then, %entry
  store %"char[]" { ptr @.str.1, i64 8 }, ptr %x, align 8
  %5 = call ptr @std.io.stdout()
  store ptr %5, ptr %result, align 8
  %6 = load ptr, ptr %result, align 8
  %7 = getelementptr inbounds %"char[]", ptr %x, i32 0, i32 0
  %lo = load ptr, ptr %7, align 8
  %8 = getelementptr inbounds %"char[]", ptr %x, i32 0, i32 1
  %hi = load i64, ptr %8, align 8
  %9 = call i64 @std.io.File.printn(ptr %retparam1, ptr %6, ptr %lo, i64 %hi)
  store %"char[]" { ptr @.str.2, i64 10 }, ptr %x2, align 8
  %10 = call ptr @std.io.stdout()
  store ptr %10, ptr %result4, align 8
  %11 = load ptr, ptr %result4, align 8
  %12 = getelementptr inbounds %"char[]", ptr %x2, i32 0, i32 0
  %lo5 = load ptr, ptr %12, align 8
  %13 = getelementptr inbounds %"char[]", ptr %x2, i32 0, i32 1
  %hi6 = load i64, ptr %13, align 8
  %14 = call i64 @std.io.File.printn(ptr %retparam3, ptr %11, ptr %lo5, i64 %hi6)
  store i64 14, ptr %taddr9, align 8
  %15 = insertvalue %any undef, ptr %taddr9, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  %17 = getelementptr inbounds [1 x %any], ptr %varargslots8, i64 0, i64 0
  store %any %16, ptr %17, align 16
  %18 = call i64 @std.io.printfn(ptr %retparam7, ptr @.str.3, i64 2, ptr %varargslots8, i64 1)
  store i64 6, ptr %taddr12, align 8
  %19 = insertvalue %any undef, ptr %taddr12, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  %21 = getelementptr inbounds [1 x %any], ptr %varargslots11, i64 0, i64 0
  store %any %20, ptr %21, align 16
  %22 = call i64 @std.io.printfn(ptr %retparam10, ptr @.str.4, i64 2, ptr %varargslots11, i64 1)
  store %"char[]" { ptr @.str.5, i64 23 }, ptr %x13, align 8
  %23 = call ptr @std.io.stdout()
  store ptr %23, ptr %result15, align 8
  %24 = load ptr, ptr %result15, align 8
  %25 = getelementptr inbounds %"char[]", ptr %x13, i32 0, i32 0
  %lo16 = load ptr, ptr %25, align 8
  %26 = getelementptr inbounds %"char[]", ptr %x13, i32 0, i32 1
  %hi17 = load i64, ptr %26, align 8
  %27 = call i64 @std.io.File.printn(ptr %retparam14, ptr %24, ptr %lo16, i64 %hi17)
  store %"char[]" { ptr @.str.6, i64 4 }, ptr %x18, align 8
  %28 = call ptr @std.io.stdout()
  store ptr %28, ptr %result20, align 8
  %29 = load ptr, ptr %result20, align 8
  %30 = getelementptr inbounds %"char[]", ptr %x18, i32 0, i32 0
  %lo21 = load ptr, ptr %30, align 8
  %31 = getelementptr inbounds %"char[]", ptr %x18, i32 0, i32 1
  %hi22 = load i64, ptr %31, align 8
  %32 = call i64 @std.io.File.printn(ptr %retparam19, ptr %29, ptr %lo21, i64 %hi22)
  ret void
}
; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %is_def2 = alloca i8, align 1
  store i8 1, ptr %is_def2, align 1
  call void @test.test(i32 10)
  ret void
}