// #target: macos-x64
module test;
import std::io;

macro printline()
{
	io::printfn("%d", $$LINE); io::printfn("%d", $$LINE_RAW);
}
fn void test(int x)
{
	io::printfn("%d", x);
	if (x > 0) $$FUNCTION(x - 1);
	io::printn($$TIME);
	io::printn($$DATE);
	printline();
	io::printn($$FILE);
	io::printn($$MODULE);
}

bool is_def = $defined($$FUNCTION);
fn void main()
{
	bool is_def2 = $defined($$FUNCTION);
	test(10);
}

/* #expect: test.ll

define void @test.test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %taddr = alloca i32, align 4
  %retparam1 = alloca i64, align 8
  %retparam2 = alloca i64, align 8
  %retparam3 = alloca i64, align 8
  %varargslots4 = alloca [1 x %any], align 16
  %taddr5 = alloca i64, align 8
  %retparam6 = alloca i64, align 8
  %varargslots7 = alloca [1 x %any], align 16
  %taddr8 = alloca i64, align 8
  %retparam9 = alloca i64, align 8
  %retparam10 = alloca i64, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %any undef, ptr %taddr, 0
  %2 = insertvalue %any %1, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %3 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %2, ptr %3, align 16
  %4 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit
if.then:                                          ; preds = %entry
  %sub = sub i32 %0, 1
  call void @test.test(i32 %sub)
  br label %if.exit
if.exit:                                          ; preds = %if.then, %entry
  %5 = call ptr @std.io.stdout()
  %6 = call i64 @std.io.File.printn(ptr %retparam1, ptr %5, ptr @.str.1, i64 8)
  %7 = call ptr @std.io.stdout()
  %8 = call i64 @std.io.File.printn(ptr %retparam2, ptr %7, ptr @.str.2, i64 10)
  store i64 14, ptr %taddr5, align 8
  %9 = insertvalue %any undef, ptr %taddr5, 0
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  %11 = getelementptr inbounds [1 x %any], ptr %varargslots4, i64 0, i64 0
  store %any %10, ptr %11, align 16
  %12 = call i64 @std.io.printfn(ptr %retparam3, ptr @.str.3, i64 2, ptr %varargslots4, i64 1)
  store i64 6, ptr %taddr8, align 8
  %13 = insertvalue %any undef, ptr %taddr8, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  %15 = getelementptr inbounds [1 x %any], ptr %varargslots7, i64 0, i64 0
  store %any %14, ptr %15, align 16
  %16 = call i64 @std.io.printfn(ptr %retparam6, ptr @.str.4, i64 2, ptr %varargslots7, i64 1)
  %17 = call ptr @std.io.stdout()
  %18 = call i64 @std.io.File.printn(ptr %retparam9, ptr %17, ptr @.str.5, i64 23)
  %19 = call ptr @std.io.stdout()
  %20 = call i64 @std.io.File.printn(ptr %retparam10, ptr %19, ptr @.str.6, i64 4)
  ret void
}
; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %is_def2 = alloca i8, align 1
  store i8 1, ptr %is_def2, align 1
  call void @test.test(i32 10)
  ret void
}