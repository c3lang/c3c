// #target: macos-x64
module test;
import std::io;

macro printline()
{
	io::printfn("%d", $$LINE); io::printfn("%d", $$LINE_RAW);
}
fn void test(int x)
{
	io::printfn("%d", x);
	if (x > 0) $$FUNCTION(x - 1);
	io::println($$TIME);
	io::println($$DATE);
	printline();
	io::println($$FILE);
	io::println($$MODULE);
}

bool is_def = $defined($$FUNCTION);
fn void main()
{
	bool is_def2 = $defined($$FUNCTION);
	test(10);
}

/* #expect: test.ll


define void @test_test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %taddr3 = alloca i64, align 8
  %retparam7 = alloca i64, align 8
  %varargslots8 = alloca [1 x %variant], align 16
  %taddr9 = alloca i64, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %variant undef, ptr %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %4, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit

if.then:                                          ; preds = %voiderr
  %sub = sub i32 %0, 1
  call void @test_test(i32 %sub)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %voiderr
  %5 = call i32 @std_io_println(ptr @.str.1) #1
  %6 = call i32 @std_io_println(ptr @.str.2) #1
  store i64 14, ptr %taddr3, align 8
  %7 = insertvalue %variant undef, ptr %taddr3, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %9 = getelementptr inbounds [1 x %variant], ptr %varargslots2, i64 0, i64 0
  store %variant %8, ptr %9, align 16
  %10 = call i64 @std_io_printfn(ptr %retparam1, ptr @.str.3, i64 2, ptr %varargslots2, i64 1)
  %not_err4 = icmp eq i64 %10, 0
  br i1 %not_err4, label %after_check5, label %voiderr6

after_check5:                                     ; preds = %if.exit
  br label %voiderr6

voiderr6:                                         ; preds = %after_check5, %if.exit
  store i64 6, ptr %taddr9, align 8
  %11 = insertvalue %variant undef, ptr %taddr9, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], ptr %varargslots8, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = call i64 @std_io_printfn(ptr %retparam7, ptr @.str.4, i64 2, ptr %varargslots8, i64 1)
  %not_err10 = icmp eq i64 %14, 0
  br i1 %not_err10, label %after_check11, label %voiderr12

after_check11:                                    ; preds = %voiderr6
  br label %voiderr12

voiderr12:                                        ; preds = %after_check11, %voiderr6
  %15 = call i32 @std_io_println(ptr @.str.5) #1
  %16 = call i32 @std_io_println(ptr @.str.6) #1
  ret void
}
