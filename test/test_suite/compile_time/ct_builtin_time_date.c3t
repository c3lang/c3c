// #target: macos-x64
module test;
import std::io;

macro printline()
{
	io::printfn("%d", $$LINE); io::printfn("%d", $$LINE_RAW);
}
fn void test(int x)
{
	io::printfn("%d", x);
	if (x > 0) $$FUNCTION(x - 1);
	io::printn($$TIME);
	io::printn($$DATE);
	printline();
	io::printn($$FILE);
	io::printn($$MODULE);
}

bool is_def = $defined($$FUNCTION);
fn void main()
{
	bool is_def2 = $defined($$FUNCTION);
	test(10);
}

/* #expect: test.ll


define void @test_test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %x = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %retparam1 = alloca i64, align 8
  %result = alloca %File, align 8
  %x5 = alloca ptr, align 8
  %error_var6 = alloca i64, align 8
  %retparam7 = alloca i64, align 8
  %result8 = alloca %File, align 8
  %retparam14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %variant], align 16
  %taddr16 = alloca i64, align 8
  %retparam20 = alloca i64, align 8
  %varargslots21 = alloca [1 x %variant], align 16
  %taddr22 = alloca i64, align 8
  %x26 = alloca ptr, align 8
  %error_var27 = alloca i64, align 8
  %retparam28 = alloca i64, align 8
  %result29 = alloca %File, align 8
  %x35 = alloca ptr, align 8
  %error_var36 = alloca i64, align 8
  %retparam37 = alloca i64, align 8
  %result38 = alloca %File, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %variant undef, ptr %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %4, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit

if.then:                                          ; preds = %voiderr
  %sub = sub i32 %0, 1
  call void @test_test(i32 %sub)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %voiderr
  store ptr @.str.1, ptr %x, align 8
  store i64 0, ptr %error_var, align 8
  %5 = call ptr @std_io_stdout()
  store ptr %5, ptr %result, align 8
  %6 = load ptr, ptr %x, align 8
  %7 = call i64 @std_io_File_printn(ptr %retparam1, ptr %result, ptr %6, i64 8)
  %not_err2 = icmp eq i64 %7, 0
  br i1 %not_err2, label %after_check3, label %assign_optional

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %error_var, align 8
  br label %noerr_block

after_check3:                                     ; preds = %if.exit
  br label %noerr_block

noerr_block:                                      ; preds = %after_check3, %assign_optional
  br label %voiderr4

voiderr4:                                         ; preds = %noerr_block
  store ptr @.str.2, ptr %x5, align 8
  store i64 0, ptr %error_var6, align 8
  %8 = call ptr @std_io_stdout()
  store ptr %8, ptr %result8, align 8
  %9 = load ptr, ptr %x5, align 8
  %10 = call i64 @std_io_File_printn(ptr %retparam7, ptr %result8, ptr %9, i64 10)
  %not_err9 = icmp eq i64 %10, 0
  br i1 %not_err9, label %after_check11, label %assign_optional10

assign_optional10:                                ; preds = %voiderr4
  store i64 %10, ptr %error_var6, align 8
  br label %noerr_block12

after_check11:                                    ; preds = %voiderr4
  br label %noerr_block12

noerr_block12:                                    ; preds = %after_check11, %assign_optional10
  br label %voiderr13

voiderr13:                                        ; preds = %noerr_block12
  store i64 14, ptr %taddr16, align 8
  %11 = insertvalue %variant undef, ptr %taddr16, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], ptr %varargslots15, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = call i64 @std_io_printfn(ptr %retparam14, ptr @.str.3, i64 2, ptr %varargslots15, i64 1)
  %not_err17 = icmp eq i64 %14, 0
  br i1 %not_err17, label %after_check18, label %voiderr19

after_check18:                                    ; preds = %voiderr13
  br label %voiderr19

voiderr19:                                        ; preds = %after_check18, %voiderr13
  store i64 6, ptr %taddr22, align 8
  %15 = insertvalue %variant undef, ptr %taddr22, 0
  %16 = insertvalue %variant %15, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %17 = getelementptr inbounds [1 x %variant], ptr %varargslots21, i64 0, i64 0
  store %variant %16, ptr %17, align 16
  %18 = call i64 @std_io_printfn(ptr %retparam20, ptr @.str.4, i64 2, ptr %varargslots21, i64 1)
  %not_err23 = icmp eq i64 %18, 0
  br i1 %not_err23, label %after_check24, label %voiderr25

after_check24:                                    ; preds = %voiderr19
  br label %voiderr25

voiderr25:                                        ; preds = %after_check24, %voiderr19
  store ptr @.str.5, ptr %x26, align 8
  store i64 0, ptr %error_var27, align 8
  %19 = call ptr @std_io_stdout()
  store ptr %19, ptr %result29, align 8
  %20 = load ptr, ptr %x26, align 8
  %21 = call i64 @std_io_File_printn(ptr %retparam28, ptr %result29, ptr %20, i64 23)
  %not_err30 = icmp eq i64 %21, 0
  br i1 %not_err30, label %after_check32, label %assign_optional31

assign_optional31:                                ; preds = %voiderr25
  store i64 %21, ptr %error_var27, align 8
  br label %noerr_block33

after_check32:                                    ; preds = %voiderr25
  br label %noerr_block33

noerr_block33:                                    ; preds = %after_check32, %assign_optional31
  br label %voiderr34

voiderr34:                                        ; preds = %noerr_block33
  store ptr @.str.6, ptr %x35, align 8
  store i64 0, ptr %error_var36, align 8
  %22 = call ptr @std_io_stdout()
  store ptr %22, ptr %result38, align 8
  %23 = load ptr, ptr %x35, align 8
  %24 = call i64 @std_io_File_printn(ptr %retparam37, ptr %result38, ptr %23, i64 4)
  %not_err39 = icmp eq i64 %24, 0
  br i1 %not_err39, label %after_check41, label %assign_optional40

assign_optional40:                                ; preds = %voiderr34
  store i64 %24, ptr %error_var36, align 8
  br label %noerr_block42

after_check41:                                    ; preds = %voiderr34
  br label %noerr_block42

noerr_block42:                                    ; preds = %after_check41, %assign_optional40
  br label %voiderr43

voiderr43:                                        ; preds = %noerr_block42
  ret void
}