// #target: macos-x64
module test;
import std::io;

macro printline()
{
	io::printfn("%d", $$LINE); io::printfn("%d", $$LINE_RAW);
}
fn void test(int x)
{
	io::printfn("%d", x);
	if (x > 0) $$FUNCTION(x - 1);
	io::printn($$TIME);
	io::printn($$DATE);
	printline();
	io::printn($$FILE);
	io::printn($$MODULE);
}

bool is_def = $defined($$FUNCTION);
fn void main()
{
	bool is_def2 = $defined($$FUNCTION);
	test(10);
}

/* #expect: test.ll


define void @test_test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %x = alloca ptr, align 8
  %retparam1 = alloca i64, align 8
  %result = alloca %File, align 8
  %x2 = alloca ptr, align 8
  %retparam3 = alloca i64, align 8
  %result4 = alloca %File, align 8
  %retparam5 = alloca i64, align 8
  %varargslots6 = alloca [1 x %variant], align 16
  %taddr7 = alloca i64, align 8
  %retparam8 = alloca i64, align 8
  %varargslots9 = alloca [1 x %variant], align 16
  %taddr10 = alloca i64, align 8
  %x11 = alloca ptr, align 8
  %retparam12 = alloca i64, align 8
  %result13 = alloca %File, align 8
  %x14 = alloca ptr, align 8
  %retparam15 = alloca i64, align 8
  %result16 = alloca %File, align 8
  store i32 %0, ptr %taddr, align 4
  %1 = insertvalue %variant undef, ptr %taddr, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  %sub = sub i32 %0, 1
  call void @test_test(i32 %sub)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  store ptr @.str.1, ptr %x, align 8
  %5 = call ptr @std_io_stdout()
  store ptr %5, ptr %result, align 8
  %6 = load ptr, ptr %x, align 8
  %7 = call i64 @std_io_File_printn(ptr %retparam1, ptr %result, ptr %6, i64 8)
  store ptr @.str.2, ptr %x2, align 8
  %8 = call ptr @std_io_stdout()
  store ptr %8, ptr %result4, align 8
  %9 = load ptr, ptr %x2, align 8
  %10 = call i64 @std_io_File_printn(ptr %retparam3, ptr %result4, ptr %9, i64 10)
  store i64 14, ptr %taddr7, align 8
  %11 = insertvalue %variant undef, ptr %taddr7, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], ptr %varargslots6, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = call i64 @std_io_printfn(ptr %retparam5, ptr @.str.3, i64 2, ptr %varargslots6, i64 1)
  store i64 6, ptr %taddr10, align 8
  %15 = insertvalue %variant undef, ptr %taddr10, 0
  %16 = insertvalue %variant %15, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %17 = getelementptr inbounds [1 x %variant], ptr %varargslots9, i64 0, i64 0
  store %variant %16, ptr %17, align 16
  %18 = call i64 @std_io_printfn(ptr %retparam8, ptr @.str.4, i64 2, ptr %varargslots9, i64 1)
  store ptr @.str.5, ptr %x11, align 8
  %19 = call ptr @std_io_stdout()
  store ptr %19, ptr %result13, align 8
  %20 = load ptr, ptr %x11, align 8
  %21 = call i64 @std_io_File_printn(ptr %retparam12, ptr %result13, ptr %20, i64 23)
  store ptr @.str.6, ptr %x14, align 8
  %22 = call ptr @std_io_stdout()
  store ptr %22, ptr %result16, align 8
  %23 = load ptr, ptr %x14, align 8
  %24 = call i64 @std_io_File_printn(ptr %retparam15, ptr %result16, ptr %23, i64 4)
  ret void
}