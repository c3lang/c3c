// #target: macos-x64
module test;
import std::io;

macro printline()
{
	io::printfln("%d", $$LINE); io::printfln("%d", $$LINE_RAW);
}
fn void test(int x)
{
	io::printfln("%d", x);
	if (x > 0) $$FUNCTION(x - 1);
	io::println($$TIME);
	io::println($$DATE);
	printline();
	io::println($$FILE);
	io::println($$MODULE);
}

bool is_def = $defined($$FUNCTION);
fn void main()
{
	bool is_def2 = $defined($$FUNCTION);
	test(10);
}

/* #expect: test.ll

define void @test_test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr1 = alloca i32, align 4
  %retparam4 = alloca i64, align 8
  %taddr5 = alloca %"char[]", align 8
  %vararg8 = alloca %"variant[]", align 8
  %varargslots9 = alloca [1 x %variant], align 16
  %taddr10 = alloca i64, align 8
  %retparam16 = alloca i64, align 8
  %taddr17 = alloca %"char[]", align 8
  %vararg20 = alloca %"variant[]", align 8
  %varargslots21 = alloca [1 x %variant], align 16
  %taddr22 = alloca i64, align 8
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2 }, %"char[]"* %taddr, align 8
  %1 = bitcast %"char[]"* %taddr to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %lo = load i8*, i8** %2, align 8
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %hi = load i64, i64* %3, align 8
  store i32 %0, i32* %taddr1, align 4
  %4 = bitcast i32* %taddr1 to i8*
  %5 = insertvalue %variant undef, i8* %4, 0
  %6 = insertvalue %variant %5, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %7 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %6, %variant* %7, align 16
  %8 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 1, i64* %8, align 8
  %9 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %10 = bitcast [1 x %variant]* %varargslots to %variant*
  store %variant* %10, %variant** %9, align 8
  %11 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %lo2 = load i8*, i8** %12, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %hi3 = load i64, i64* %13, align 8
  %14 = call i64 @std_io_printfln(i64* %retparam, i8* %lo, i64 %hi, i8* %lo2, i64 %hi3)
  %not_err = icmp eq i64 %14, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %gt = icmp sgt i32 %0, 0
  br i1 %gt, label %if.then, label %if.exit

if.then:                                          ; preds = %voiderr
  %sub = sub i32 %0, 1
  call void @test_test(i32 %sub)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %voiderr
  %15 = call i32 @std_io_println(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0)) #1
  %16 = call i32 @std_io_println(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0)) #1
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2 }, %"char[]"* %taddr5, align 8
  %17 = bitcast %"char[]"* %taddr5 to { i8*, i64 }*
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 0
  %lo6 = load i8*, i8** %18, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %17, i32 0, i32 1
  %hi7 = load i64, i64* %19, align 8
  store i64 14, i64* %taddr10, align 8
  %20 = bitcast i64* %taddr10 to i8*
  %21 = insertvalue %variant undef, i8* %20, 0
  %22 = insertvalue %variant %21, i64 ptrtoint (%.introspect* @"ct$long" to i64), 1
  %23 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots9, i64 0, i64 0
  store %variant %22, %variant* %23, align 16
  %24 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg8, i32 0, i32 1
  store i64 1, i64* %24, align 8
  %25 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg8, i32 0, i32 0
  %26 = bitcast [1 x %variant]* %varargslots9 to %variant*
  store %variant* %26, %variant** %25, align 8
  %27 = bitcast %"variant[]"* %vararg8 to { i8*, i64 }*
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 0
  %lo11 = load i8*, i8** %28, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 1
  %hi12 = load i64, i64* %29, align 8
  %30 = call i64 @std_io_printfln(i64* %retparam4, i8* %lo6, i64 %hi7, i8* %lo11, i64 %hi12)
  %not_err13 = icmp eq i64 %30, 0
  br i1 %not_err13, label %after_check14, label %voiderr15

after_check14:                                    ; preds = %if.exit
  br label %voiderr15

voiderr15:                                        ; preds = %after_check14, %if.exit
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i64 2 }, %"char[]"* %taddr17, align 8
  %31 = bitcast %"char[]"* %taddr17 to { i8*, i64 }*
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 0
  %lo18 = load i8*, i8** %32, align 8
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 1
  %hi19 = load i64, i64* %33, align 8
  store i64 6, i64* %taddr22, align 8
  %34 = bitcast i64* %taddr22 to i8*
  %35 = insertvalue %variant undef, i8* %34, 0
  %36 = insertvalue %variant %35, i64 ptrtoint (%.introspect* @"ct$long" to i64), 1
  %37 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots21, i64 0, i64 0
  store %variant %36, %variant* %37, align 16
  %38 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg20, i32 0, i32 1
  store i64 1, i64* %38, align 8
  %39 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg20, i32 0, i32 0
  %40 = bitcast [1 x %variant]* %varargslots21 to %variant*
  store %variant* %40, %variant** %39, align 8
  %41 = bitcast %"variant[]"* %vararg20 to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %lo23 = load i8*, i8** %42, align 8
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %hi24 = load i64, i64* %43, align 8
  %44 = call i64 @std_io_printfln(i64* %retparam16, i8* %lo18, i64 %hi19, i8* %lo23, i64 %hi24)
  %not_err25 = icmp eq i64 %44, 0
  br i1 %not_err25, label %after_check26, label %voiderr27

after_check26:                                    ; preds = %voiderr15
  br label %voiderr27

voiderr27:                                        ; preds = %after_check26, %voiderr15
  %45 = call i32 @std_io_println(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i32 0, i32 0)) #1
  %46 = call i32 @std_io_println(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)) #1
  ret void
}
