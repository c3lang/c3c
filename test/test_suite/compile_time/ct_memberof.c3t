// #target: macos-x64
module test;
import std::io;

fn int hell() { return 1; }

macro print_args($Type)
{
	var $params = $Type.params;
	$foreach ($param : $params)
		io::printn($param.nameof);
	$endforeach;
}

bitstruct Bark : ulong
{
	int x : 1..4;
	short y : 6..10;
}

struct Foo
{
	int x;
	union test {
		int y;
		double z;
	}
	struct {
		int abc;
		int bcd;
	 }
	 double q;
}
macro print_fields($Type)
{
	io::printfn("Type: %s", $Type.nameof);
	var $params = $Type.membersof;
	$foreach ($param : $params)
		io::printfn("%s: %s", $param.nameof, $param.typeid.nameof);
	$endforeach;
}

fn void hello(int a, double b, int[4] d, args...) {}
fn void test(int x)
{
	print_args($typeof(&test));
	print_args($typeof(&hell));
	print_args($typeof(&hello));
	io::printn($typeof(&test).returns.nameof);
	io::printn($typeof(&hell).returns.nameof);
	print_fields(Foo);
	print_fields(Bar);
	print_fields(Bark);
}

struct BarInner
{
	char a;
	char b;
}

struct Bar
{
	char a;
	short b;
	struct
	{
		union
		{
			BarInner y;
			char z;
			struct {
				char z1;
				char z2;
			}
		}
	}
	struct baz
	{
		int foo;
	}
}
fn void main()
{
	var $x = Bar.a;

	io::printfn("len: %d", Bar.membersof.len);
	io::printfn("len: %d", Bar.baz.membersof.len);
	io::printfn("a: %d %d", Bar.a.offsetof, Bar.a.alignof);
	io::printfn("b: %d %d", Bar.b.offsetof, Bar.b.alignof);
	io::printfn("y: %d %d", Bar.y.offsetof, Bar.y.alignof);
	io::printfn("z: %d %d", Bar.z.offsetof, Bar.z.alignof);
	io::printfn("z1: %d %d", Bar.z1.offsetof, Bar.z1.alignof);
	io::printfn("z2: %d %d", Bar.z2.offsetof, Bar.z2.alignof);
	io::printfn("baz: %d %d", Bar.baz.offsetof, Bar.baz.alignof);
	io::printfn("Bar: %d", $x.alignof);
	io::printfn("foo: %d %d", Bar.baz.foo.offsetof, Bar.baz.foo.alignof);

	test(10);
}

/* #expect: test.ll

define void @test.hello(i32 %0, double %1, i64 %2, i64 %3, ptr %4, i64 %5) #0 {
entry:
  %d = alloca [4 x i32], align 8
  %args = alloca %"any[]", align 8
  store i64 %2, ptr %d, align 8
  %ptroffset = getelementptr inbounds i64, ptr %d, i64 1
  store i64 %3, ptr %ptroffset, align 8
  store ptr %4, ptr %args, align 8
  %ptroffset1 = getelementptr inbounds i64, ptr %args, i64 1
  store i64 %5, ptr %ptroffset1, align 8
  ret void
}
; Function Attrs: nounwind
define void @test.test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %retparam1 = alloca i64, align 8
  %retparam2 = alloca i64, align 8
  %retparam3 = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %retparam5 = alloca i64, align 8
  %retparam6 = alloca i64, align 8
  %retparam7 = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %taddr = alloca %"char[]", align 8
  %retparam8 = alloca i64, align 8
  %varargslots9 = alloca [2 x %any], align 16
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %retparam12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %retparam16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %retparam20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %retparam24 = alloca i64, align 8
  %varargslots25 = alloca [1 x %any], align 16
  %taddr26 = alloca %"char[]", align 8
  %retparam27 = alloca i64, align 8
  %varargslots28 = alloca [2 x %any], align 16
  %taddr29 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %retparam31 = alloca i64, align 8
  %varargslots32 = alloca [2 x %any], align 16
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %retparam35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %retparam39 = alloca i64, align 8
  %varargslots40 = alloca [2 x %any], align 16
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %retparam43 = alloca i64, align 8
  %varargslots44 = alloca [1 x %any], align 16
  %taddr45 = alloca %"char[]", align 8
  %retparam46 = alloca i64, align 8
  %varargslots47 = alloca [2 x %any], align 16
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %retparam50 = alloca i64, align 8
  %varargslots51 = alloca [2 x %any], align 16
  %taddr52 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %1 = call ptr @std.io.stdout()
  %2 = call i64 @std.io.File.printn(ptr %retparam, ptr %1, ptr @.str, i64 3)
  %3 = call ptr @std.io.stdout()
  %4 = call i64 @std.io.File.printn(ptr %retparam1, ptr %3, ptr @.str.10, i64 3)
  %5 = call ptr @std.io.stdout()
  %6 = call i64 @std.io.File.printn(ptr %retparam2, ptr %5, ptr @.str.11, i64 6)
  %7 = call ptr @std.io.stdout()
  %8 = call i64 @std.io.File.printn(ptr %retparam3, ptr %7, ptr @.str.12, i64 6)
  %9 = call ptr @std.io.stdout()
  %10 = call i64 @std.io.File.printn(ptr %retparam4, ptr %9, ptr @.str.13, i64 5)
  %11 = call ptr @std.io.stdout()
  %12 = call i64 @std.io.File.printn(ptr %retparam5, ptr %11, ptr @.str.14, i64 4)
  %13 = call ptr @std.io.stdout()
  %14 = call i64 @std.io.File.printn(ptr %retparam6, ptr %13, ptr @.str.15, i64 3)
  store %"char[]" { ptr @.str.17, i64 3 }, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %17 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %16, ptr %17, align 16
  %18 = call i64 @std.io.printfn(ptr %retparam7, ptr @.str.16, i64 8, ptr %varargslots, i64 1)
  store %"char[]" { ptr @.str.19, i64 1 }, ptr %taddr10, align 8
  %19 = insertvalue %any undef, ptr %taddr10, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %21 = getelementptr inbounds [2 x %any], ptr %varargslots9, i64 0, i64 0
  store %any %20, ptr %21, align 16
  store %"char[]" { ptr @.str.20, i64 3 }, ptr %taddr11, align 8
  %22 = insertvalue %any undef, ptr %taddr11, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %24 = getelementptr inbounds [2 x %any], ptr %varargslots9, i64 0, i64 1
  store %any %23, ptr %24, align 16
  %25 = call i64 @std.io.printfn(ptr %retparam8, ptr @.str.18, i64 6, ptr %varargslots9, i64 2)
  store %"char[]" { ptr @.str.22, i64 4 }, ptr %taddr14, align 8
  %26 = insertvalue %any undef, ptr %taddr14, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %28 = getelementptr inbounds [2 x %any], ptr %varargslots13, i64 0, i64 0
  store %any %27, ptr %28, align 16
  store %"char[]" { ptr @.str.23, i64 4 }, ptr %taddr15, align 8
  %29 = insertvalue %any undef, ptr %taddr15, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %31 = getelementptr inbounds [2 x %any], ptr %varargslots13, i64 0, i64 1
  store %any %30, ptr %31, align 16
  %32 = call i64 @std.io.printfn(ptr %retparam12, ptr @.str.21, i64 6, ptr %varargslots13, i64 2)
  store %"char[]" zeroinitializer, ptr %taddr18, align 8
  %33 = insertvalue %any undef, ptr %taddr18, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %35 = getelementptr inbounds [2 x %any], ptr %varargslots17, i64 0, i64 0
  store %any %34, ptr %35, align 16
  store %"char[]" { ptr @.str.25, i64 5 }, ptr %taddr19, align 8
  %36 = insertvalue %any undef, ptr %taddr19, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %38 = getelementptr inbounds [2 x %any], ptr %varargslots17, i64 0, i64 1
  store %any %37, ptr %38, align 16
  %39 = call i64 @std.io.printfn(ptr %retparam16, ptr @.str.24, i64 6, ptr %varargslots17, i64 2)
  store %"char[]" { ptr @.str.27, i64 1 }, ptr %taddr22, align 8
  %40 = insertvalue %any undef, ptr %taddr22, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %42 = getelementptr inbounds [2 x %any], ptr %varargslots21, i64 0, i64 0
  store %any %41, ptr %42, align 16
  store %"char[]" { ptr @.str.28, i64 6 }, ptr %taddr23, align 8
  %43 = insertvalue %any undef, ptr %taddr23, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %45 = getelementptr inbounds [2 x %any], ptr %varargslots21, i64 0, i64 1
  store %any %44, ptr %45, align 16
  %46 = call i64 @std.io.printfn(ptr %retparam20, ptr @.str.26, i64 6, ptr %varargslots21, i64 2)
  store %"char[]" { ptr @.str.30, i64 3 }, ptr %taddr26, align 8
  %47 = insertvalue %any undef, ptr %taddr26, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %49 = getelementptr inbounds [1 x %any], ptr %varargslots25, i64 0, i64 0
  store %any %48, ptr %49, align 16
  %50 = call i64 @std.io.printfn(ptr %retparam24, ptr @.str.29, i64 8, ptr %varargslots25, i64 1)
  store %"char[]" { ptr @.str.32, i64 1 }, ptr %taddr29, align 8
  %51 = insertvalue %any undef, ptr %taddr29, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %53 = getelementptr inbounds [2 x %any], ptr %varargslots28, i64 0, i64 0
  store %any %52, ptr %53, align 16
  store %"char[]" { ptr @.str.33, i64 4 }, ptr %taddr30, align 8
  %54 = insertvalue %any undef, ptr %taddr30, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %56 = getelementptr inbounds [2 x %any], ptr %varargslots28, i64 0, i64 1
  store %any %55, ptr %56, align 16
  %57 = call i64 @std.io.printfn(ptr %retparam27, ptr @.str.31, i64 6, ptr %varargslots28, i64 2)
  store %"char[]" { ptr @.str.35, i64 1 }, ptr %taddr33, align 8
  %58 = insertvalue %any undef, ptr %taddr33, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %60 = getelementptr inbounds [2 x %any], ptr %varargslots32, i64 0, i64 0
  store %any %59, ptr %60, align 16
  store %"char[]" { ptr @.str.36, i64 5 }, ptr %taddr34, align 8
  %61 = insertvalue %any undef, ptr %taddr34, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %63 = getelementptr inbounds [2 x %any], ptr %varargslots32, i64 0, i64 1
  store %any %62, ptr %63, align 16
  %64 = call i64 @std.io.printfn(ptr %retparam31, ptr @.str.34, i64 6, ptr %varargslots32, i64 2)
  store %"char[]" zeroinitializer, ptr %taddr37, align 8
  %65 = insertvalue %any undef, ptr %taddr37, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %67 = getelementptr inbounds [2 x %any], ptr %varargslots36, i64 0, i64 0
  store %any %66, ptr %67, align 16
  store %"char[]" { ptr @.str.38, i64 5 }, ptr %taddr38, align 8
  %68 = insertvalue %any undef, ptr %taddr38, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %70 = getelementptr inbounds [2 x %any], ptr %varargslots36, i64 0, i64 1
  store %any %69, ptr %70, align 16
  %71 = call i64 @std.io.printfn(ptr %retparam35, ptr @.str.37, i64 6, ptr %varargslots36, i64 2)
  store %"char[]" { ptr @.str.40, i64 3 }, ptr %taddr41, align 8
  %72 = insertvalue %any undef, ptr %taddr41, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %74 = getelementptr inbounds [2 x %any], ptr %varargslots40, i64 0, i64 0
  store %any %73, ptr %74, align 16
  store %"char[]" { ptr @.str.41, i64 3 }, ptr %taddr42, align 8
  %75 = insertvalue %any undef, ptr %taddr42, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %77 = getelementptr inbounds [2 x %any], ptr %varargslots40, i64 0, i64 1
  store %any %76, ptr %77, align 16
  %78 = call i64 @std.io.printfn(ptr %retparam39, ptr @.str.39, i64 6, ptr %varargslots40, i64 2)
  store %"char[]" { ptr @.str.43, i64 4 }, ptr %taddr45, align 8
  %79 = insertvalue %any undef, ptr %taddr45, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %81 = getelementptr inbounds [1 x %any], ptr %varargslots44, i64 0, i64 0
  store %any %80, ptr %81, align 16
  %82 = call i64 @std.io.printfn(ptr %retparam43, ptr @.str.42, i64 8, ptr %varargslots44, i64 1)
  store %"char[]" { ptr @.str.45, i64 1 }, ptr %taddr48, align 8
  %83 = insertvalue %any undef, ptr %taddr48, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %85 = getelementptr inbounds [2 x %any], ptr %varargslots47, i64 0, i64 0
  store %any %84, ptr %85, align 16
  store %"char[]" { ptr @.str.46, i64 3 }, ptr %taddr49, align 8
  %86 = insertvalue %any undef, ptr %taddr49, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %88 = getelementptr inbounds [2 x %any], ptr %varargslots47, i64 0, i64 1
  store %any %87, ptr %88, align 16
  %89 = call i64 @std.io.printfn(ptr %retparam46, ptr @.str.44, i64 6, ptr %varargslots47, i64 2)
  store %"char[]" { ptr @.str.48, i64 1 }, ptr %taddr52, align 8
  %90 = insertvalue %any undef, ptr %taddr52, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %92 = getelementptr inbounds [2 x %any], ptr %varargslots51, i64 0, i64 0
  store %any %91, ptr %92, align 16
  store %"char[]" { ptr @.str.49, i64 5 }, ptr %taddr53, align 8
  %93 = insertvalue %any undef, ptr %taddr53, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.String" to i64), 1
  %95 = getelementptr inbounds [2 x %any], ptr %varargslots51, i64 0, i64 1
  store %any %94, ptr %95, align 16
  %96 = call i64 @std.io.printfn(ptr %retparam50, ptr @.str.47, i64 6, ptr %varargslots51, i64 2)
  ret void
}
; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %taddr = alloca i64, align 8
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %any], align 16
  %taddr3 = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %varargslots5 = alloca [2 x %any], align 16
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %retparam8 = alloca i64, align 8
  %varargslots9 = alloca [2 x %any], align 16
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %retparam12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %retparam16 = alloca i64, align 8
  %varargslots17 = alloca [2 x %any], align 16
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %retparam20 = alloca i64, align 8
  %varargslots21 = alloca [2 x %any], align 16
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %retparam24 = alloca i64, align 8
  %varargslots25 = alloca [2 x %any], align 16
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %retparam28 = alloca i64, align 8
  %varargslots29 = alloca [2 x %any], align 16
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %retparam32 = alloca i64, align 8
  %varargslots33 = alloca [1 x %any], align 16
  %taddr34 = alloca i64, align 8
  %retparam35 = alloca i64, align 8
  %varargslots36 = alloca [2 x %any], align 16
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  store i64 4, ptr %taddr, align 8
  %0 = insertvalue %any undef, ptr %taddr, 0
  %1 = insertvalue %any %0, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  %2 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %1, ptr %2, align 16
  %3 = call i64 @std.io.printfn(ptr %retparam, ptr @.str.50, i64 7, ptr %varargslots, i64 1)
  store i64 1, ptr %taddr3, align 8
  %4 = insertvalue %any undef, ptr %taddr3, 0
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  %6 = getelementptr inbounds [1 x %any], ptr %varargslots2, i64 0, i64 0
  store %any %5, ptr %6, align 16
  %7 = call i64 @std.io.printfn(ptr %retparam1, ptr @.str.51, i64 7, ptr %varargslots2, i64 1)
  store i64 0, ptr %taddr6, align 8
  %8 = insertvalue %any undef, ptr %taddr6, 0
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %10 = getelementptr inbounds [2 x %any], ptr %varargslots5, i64 0, i64 0
  store %any %9, ptr %10, align 16
  store i64 4, ptr %taddr7, align 8
  %11 = insertvalue %any undef, ptr %taddr7, 0
  %12 = insertvalue %any %11, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %13 = getelementptr inbounds [2 x %any], ptr %varargslots5, i64 0, i64 1
  store %any %12, ptr %13, align 16
  %14 = call i64 @std.io.printfn(ptr %retparam4, ptr @.str.52, i64 8, ptr %varargslots5, i64 2)
  store i64 2, ptr %taddr10, align 8
  %15 = insertvalue %any undef, ptr %taddr10, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %17 = getelementptr inbounds [2 x %any], ptr %varargslots9, i64 0, i64 0
  store %any %16, ptr %17, align 16
  store i64 2, ptr %taddr11, align 8
  %18 = insertvalue %any undef, ptr %taddr11, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %20 = getelementptr inbounds [2 x %any], ptr %varargslots9, i64 0, i64 1
  store %any %19, ptr %20, align 16
  %21 = call i64 @std.io.printfn(ptr %retparam8, ptr @.str.53, i64 8, ptr %varargslots9, i64 2)
  store i64 4, ptr %taddr14, align 8
  %22 = insertvalue %any undef, ptr %taddr14, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %24 = getelementptr inbounds [2 x %any], ptr %varargslots13, i64 0, i64 0
  store %any %23, ptr %24, align 16
  store i64 4, ptr %taddr15, align 8
  %25 = insertvalue %any undef, ptr %taddr15, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %27 = getelementptr inbounds [2 x %any], ptr %varargslots13, i64 0, i64 1
  store %any %26, ptr %27, align 16
  %28 = call i64 @std.io.printfn(ptr %retparam12, ptr @.str.54, i64 8, ptr %varargslots13, i64 2)
  store i64 4, ptr %taddr18, align 8
  %29 = insertvalue %any undef, ptr %taddr18, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %31 = getelementptr inbounds [2 x %any], ptr %varargslots17, i64 0, i64 0
  store %any %30, ptr %31, align 16
  store i64 4, ptr %taddr19, align 8
  %32 = insertvalue %any undef, ptr %taddr19, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %34 = getelementptr inbounds [2 x %any], ptr %varargslots17, i64 0, i64 1
  store %any %33, ptr %34, align 16
  %35 = call i64 @std.io.printfn(ptr %retparam16, ptr @.str.55, i64 8, ptr %varargslots17, i64 2)
  store i64 4, ptr %taddr22, align 8
  %36 = insertvalue %any undef, ptr %taddr22, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %38 = getelementptr inbounds [2 x %any], ptr %varargslots21, i64 0, i64 0
  store %any %37, ptr %38, align 16
  store i64 4, ptr %taddr23, align 8
  %39 = insertvalue %any undef, ptr %taddr23, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %41 = getelementptr inbounds [2 x %any], ptr %varargslots21, i64 0, i64 1
  store %any %40, ptr %41, align 16
  %42 = call i64 @std.io.printfn(ptr %retparam20, ptr @.str.56, i64 9, ptr %varargslots21, i64 2)
  store i64 5, ptr %taddr26, align 8
  %43 = insertvalue %any undef, ptr %taddr26, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %45 = getelementptr inbounds [2 x %any], ptr %varargslots25, i64 0, i64 0
  store %any %44, ptr %45, align 16
  store i64 1, ptr %taddr27, align 8
  %46 = insertvalue %any undef, ptr %taddr27, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %48 = getelementptr inbounds [2 x %any], ptr %varargslots25, i64 0, i64 1
  store %any %47, ptr %48, align 16
  %49 = call i64 @std.io.printfn(ptr %retparam24, ptr @.str.57, i64 9, ptr %varargslots25, i64 2)
  store i64 8, ptr %taddr30, align 8
  %50 = insertvalue %any undef, ptr %taddr30, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %52 = getelementptr inbounds [2 x %any], ptr %varargslots29, i64 0, i64 0
  store %any %51, ptr %52, align 16
  store i64 4, ptr %taddr31, align 8
  %53 = insertvalue %any undef, ptr %taddr31, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %55 = getelementptr inbounds [2 x %any], ptr %varargslots29, i64 0, i64 1
  store %any %54, ptr %55, align 16
  %56 = call i64 @std.io.printfn(ptr %retparam28, ptr @.str.58, i64 10, ptr %varargslots29, i64 2)
  store i64 4, ptr %taddr34, align 8
  %57 = insertvalue %any undef, ptr %taddr34, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %59 = getelementptr inbounds [1 x %any], ptr %varargslots33, i64 0, i64 0
  store %any %58, ptr %59, align 16
  %60 = call i64 @std.io.printfn(ptr %retparam32, ptr @.str.59, i64 7, ptr %varargslots33, i64 1)
  store i64 8, ptr %taddr37, align 8
  %61 = insertvalue %any undef, ptr %taddr37, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %63 = getelementptr inbounds [2 x %any], ptr %varargslots36, i64 0, i64 0
  store %any %62, ptr %63, align 16
  store i64 4, ptr %taddr38, align 8
  %64 = insertvalue %any undef, ptr %taddr38, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  %66 = getelementptr inbounds [2 x %any], ptr %varargslots36, i64 0, i64 1
  store %any %65, ptr %66, align 16
  %67 = call i64 @std.io.printfn(ptr %retparam35, ptr @.str.60, i64 10, ptr %varargslots36, i64 2)
  call void @test.test(i32 10)
  ret void
}