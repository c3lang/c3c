// #target: macos-x64

fault MyErr
{
    TEST
}

macro foo(int x)
{
    if (x) return x;
    return MyErr.TEST?;
}

extern fn void printf(char*, ...);

fn int main()
{
    int! a = foo(1);

    int! b = foo((a + 3) ?? 2);
    int! c = foo(0);
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    printf("c = %d\n", c);
    if (@catchof(c)) printf("c had error\n");
    c = 3;
    printf("c = %d\n", c);
    return 0;
}

/* #expect: failable_catch.ll

define i32 @main() #0 {
entry:
  %a = alloca i32, align 4
  %a.f = alloca i64, align 8
  %blockret = alloca i32, align 4
  %b = alloca i32, align 4
  %b.f = alloca i64, align 8
  %blockret1 = alloca i32, align 4
  %c = alloca i32, align 4
  %c.f = alloca i64, align 8
  %blockret19 = alloca i64, align 8
  %f = alloca i64, align 8
  br label %if.then

if.then:                                          ; preds = %entry
  store i32 1, ptr %blockret, align 4
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %if.then
  %0 = load i32, ptr %blockret, align 4
  store i32 %0, ptr %a, align 4
  store i64 0, ptr %a.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %expr_block.exit
  %optval = load i64, ptr %a.f, align 8
  %not_err = icmp eq i64 %optval, 0
  %1 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %1, label %after_check, label %else_block

after_check:                                      ; preds = %after_assign
  %2 = load i32, ptr %a, align 4
  %add = add i32 %2, 3
  br label %phi_block

else_block:                                       ; preds = %after_assign
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check
  %val = phi i32 [ %add, %after_check ], [ 2, %else_block ]
  %intbool = icmp ne i32 %val, 0
  br i1 %intbool, label %if.then2, label %if.exit

if.then2:                                         ; preds = %phi_block
  store i32 %val, ptr %blockret1, align 4
  br label %expr_block.exit3

if.exit:                                          ; preds = %phi_block
  store i64 ptrtoint (ptr @"failable_catch.MyErr$TEST" to i64), ptr %b.f, align 8
  br label %after_assign4

expr_block.exit3:                                 ; preds = %if.then2
  %3 = load i32, ptr %blockret1, align 4
  store i32 %3, ptr %b, align 4
  store i64 0, ptr %b.f, align 8
  br label %after_assign4

after_assign4:                                    ; preds = %expr_block.exit3, %if.exit
  br label %if.exit6

if.exit6:                                         ; preds = %after_assign4
  store i64 ptrtoint (ptr @"failable_catch.MyErr$TEST" to i64), ptr %c.f, align 8
  br label %after_assign7

after_assign7:                                    ; preds = %if.exit6
  %optval8 = load i64, ptr %a.f, align 8
  %not_err9 = icmp eq i64 %optval8, 0
  %4 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true)
  br i1 %4, label %after_check10, label %voiderr

after_check10:                                    ; preds = %after_assign7
  %5 = load i32, ptr %a, align 4
  call void (ptr, ...) @printf(ptr @.str, i32 %5)
  br label %voiderr

voiderr:                                          ; preds = %after_check10, %after_assign7
  %optval11 = load i64, ptr %b.f, align 8
  %not_err12 = icmp eq i64 %optval11, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err12, i1 true)
  br i1 %6, label %after_check13, label %voiderr14

after_check13:                                    ; preds = %voiderr
  %7 = load i32, ptr %b, align 4
  call void (ptr, ...) @printf(ptr @.str.1, i32 %7)
  br label %voiderr14

voiderr14:                                        ; preds = %after_check13, %voiderr
  %optval15 = load i64, ptr %c.f, align 8
  %not_err16 = icmp eq i64 %optval15, 0
  %8 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true)
  br i1 %8, label %after_check17, label %voiderr18

after_check17:                                    ; preds = %voiderr14
  %9 = load i32, ptr %c, align 4
  call void (ptr, ...) @printf(ptr @.str.2, i32 %9)
  br label %voiderr18

voiderr18:                                        ; preds = %after_check17, %voiderr14
  br label %testblock

testblock:                                        ; preds = %voiderr18
  %optval20 = load i64, ptr %c.f, align 8
  %not_err21 = icmp eq i64 %optval20, 0
  %10 = call i1 @llvm.expect.i1(i1 %not_err21, i1 true)
  br i1 %10, label %after_check22, label %assign_optional

assign_optional:                                  ; preds = %testblock
  store i64 %optval20, ptr %f, align 8
  br label %end_block

after_check22:                                    ; preds = %testblock
  store i64 0, ptr %f, align 8
  br label %end_block

end_block:                                        ; preds = %after_check22, %assign_optional
  %11 = load i64, ptr %f, align 8
  %neq = icmp ne i64 %11, 0
  br i1 %neq, label %if.then23, label %if.exit24

if.then23:                                        ; preds = %end_block
  %12 = load i64, ptr %f, align 8
  store i64 %12, ptr %blockret19, align 8
  br label %expr_block.exit25

if.exit24:                                        ; preds = %end_block
  store i64 0, ptr %blockret19, align 8
  br label %expr_block.exit25

expr_block.exit25:                                ; preds = %if.exit24, %if.then23
  %13 = load i64, ptr %blockret19, align 8
  %neq26 = icmp ne i64 %13, 0
  br i1 %neq26, label %if.then27, label %if.exit28

if.then27:                                        ; preds = %expr_block.exit25
  call void (ptr, ...) @printf(ptr @.str.3)
  br label %if.exit28

if.exit28:                                        ; preds = %if.then27, %expr_block.exit25
  store i32 3, ptr %c, align 4
  store i64 0, ptr %c.f, align 8
  %optval29 = load i64, ptr %c.f, align 8
  %not_err30 = icmp eq i64 %optval29, 0
  %14 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true)
  br i1 %14, label %after_check31, label %voiderr32

after_check31:                                    ; preds = %if.exit28
  %15 = load i32, ptr %c, align 4
  call void (ptr, ...) @printf(ptr @.str.4, i32 %15)
  br label %voiderr32

voiderr32:                                        ; preds = %after_check31, %if.exit28
  ret i32 0
}
