// #target: macos-x64
module foo;
import std::io;

fault Foo
{
    BAR,
    BAZ
}

fn void main()
{
  char[][] x = Foo.names;
  io::printfln("Foo.names: %s", x);
  io::printfln("Foo.values: %s", Foo.values);
  io::printfln("Foo.elements: %s", Foo.elements);
}

/* #expect: foo.ll

@"foo_Foo$BAR" = linkonce constant %.fault { i64 ptrtoint (%.introspect* @"ct$foo_Foo" to i64), %"char[]" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fault, i64 0, i64 0), i64 3 } }, align 8
@.fault = internal constant [4 x i8] c"BAR\00", align 1
@"foo_Foo$BAZ" = linkonce constant %.fault { i64 ptrtoint (%.introspect* @"ct$foo_Foo" to i64), %"char[]" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.fault.1, i64 0, i64 0), i64 3 } }, align 8
@.fault.1 = internal constant [4 x i8] c"BAZ\00", align 1
@"ct$foo_Foo" = linkonce constant %.introspect { i8 9, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [4 x i8] c"BAR\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"BAZ\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Foo.names: %s\00", align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$sa$char" = linkonce constant %.introspect { i8 16, i64 16, i64 ptrtoint (%.introspect* @"ct$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$sa$sa$char" = linkonce constant %.introspect { i8 16, i64 16, i64 ptrtoint (%.introspect* @"ct$sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.4 = private unnamed_addr constant [15 x i8] c"Foo.values: %s\00", align 1
@"ct$a2$foo_Foo" = linkonce constant %.introspect { i8 15, i64 16, i64 ptrtoint (%.introspect* @"ct$foo_Foo" to i64), i64 2, [0 x i64] zeroinitializer }, align 8
@.str.5 = private unnamed_addr constant [17 x i8] c"Foo.elements: %s\00", align 1
@"ct$long" = linkonce constant %.introspect { i8 2, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8

  %x = alloca %"char[][]", align 8
  %literal = alloca [2 x %"char[]"], align 16
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca %"variant[]", align 8
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %literal3 = alloca [2 x i64], align 16
  %taddr4 = alloca %"variant[]", align 8
  %retparam10 = alloca i64, align 8
  %varargslots11 = alloca [1 x %variant], align 16
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"variant[]", align 8
  %0 = getelementptr inbounds [2 x %"char[]"], [2 x %"char[]"]* %literal, i64 0, i64 0
  store %"char[]" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i64 3 }, %"char[]"* %0, align 8
  %1 = getelementptr inbounds [2 x %"char[]"], [2 x %"char[]"]* %literal, i64 0, i64 1
  store %"char[]" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i64 3 }, %"char[]"* %1, align 8
  %2 = bitcast [2 x %"char[]"]* %literal to %"char[]"*
  %3 = insertvalue %"char[][]" undef, %"char[]"* %2, 0
  %4 = insertvalue %"char[][]" %3, i64 2, 1
  store %"char[][]" %4, %"char[][]"* %x, align 8
  %5 = bitcast %"char[][]"* %x to i8*
  %6 = insertvalue %variant undef, i8* %5, 0
  %7 = insertvalue %variant %6, i64 ptrtoint (%.introspect* @"ct$sa$sa$char" to i64), 1
  %8 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %7, %variant* %8, align 16
  %9 = bitcast [1 x %variant]* %varargslots to %variant*
  %10 = insertvalue %"variant[]" undef, %variant* %9, 0
  %11 = insertvalue %"variant[]" %10, i64 1, 1
  store %"variant[]" %11, %"variant[]"* %taddr, align 8
  %12 = bitcast %"variant[]"* %taddr to { i8*, i64 }*
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  %lo = load i8*, i8** %13, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  %hi = load i64, i64* %14, align 8
  %15 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0), i64 13, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %15, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %16 = getelementptr inbounds [2 x i64], [2 x i64]* %literal3, i64 0, i64 0
  store i64 ptrtoint (%.fault* @"foo_Foo$BAR" to i64), i64* %16, align 8
  %17 = getelementptr inbounds [2 x i64], [2 x i64]* %literal3, i64 0, i64 1
  store i64 ptrtoint (%.fault* @"foo_Foo$BAZ" to i64), i64* %17, align 8
  %18 = bitcast [2 x i64]* %literal3 to i8*
  %19 = insertvalue %variant undef, i8* %18, 0
  %20 = insertvalue %variant %19, i64 ptrtoint (%.introspect* @"ct$a2$foo_Foo" to i64), 1
  %21 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots2, i64 0, i64 0
  store %variant %20, %variant* %21, align 16
  %22 = bitcast [1 x %variant]* %varargslots2 to %variant*
  %23 = insertvalue %"variant[]" undef, %variant* %22, 0
  %24 = insertvalue %"variant[]" %23, i64 1, 1
  store %"variant[]" %24, %"variant[]"* %taddr4, align 8
  %25 = bitcast %"variant[]"* %taddr4 to { i8*, i64 }*
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  %lo5 = load i8*, i8** %26, align 8
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  %hi6 = load i64, i64* %27, align 8
  %28 = call i64 @std_io_printfln(i64* %retparam1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i64 14, i8* %lo5, i64 %hi6)
  %not_err7 = icmp eq i64 %28, 0
  br i1 %not_err7, label %after_check8, label %voiderr9

after_check8:                                     ; preds = %voiderr
  br label %voiderr9

voiderr9:                                         ; preds = %after_check8, %voiderr
  store i64 2, i64* %taddr12, align 8
  %29 = bitcast i64* %taddr12 to i8*
  %30 = insertvalue %variant undef, i8* %29, 0
  %31 = insertvalue %variant %30, i64 ptrtoint (%.introspect* @"ct$long" to i64), 1
  %32 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots11, i64 0, i64 0
  store %variant %31, %variant* %32, align 16
  %33 = bitcast [1 x %variant]* %varargslots11 to %variant*
  %34 = insertvalue %"variant[]" undef, %variant* %33, 0
  %35 = insertvalue %"variant[]" %34, i64 1, 1
  store %"variant[]" %35, %"variant[]"* %taddr13, align 8
  %36 = bitcast %"variant[]"* %taddr13 to { i8*, i64 }*
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 0
  %lo14 = load i8*, i8** %37, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 1
  %hi15 = load i64, i64* %38, align 8
  %39 = call i64 @std_io_printfln(i64* %retparam10, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i32 0, i32 0), i64 16, i8* %lo14, i64 %hi15)
  %not_err16 = icmp eq i64 %39, 0
  br i1 %not_err16, label %after_check17, label %voiderr18

after_check17:                                    ; preds = %voiderr9
  br label %voiderr18

voiderr18:                                        ; preds = %after_check17, %voiderr9
  ret void
}
