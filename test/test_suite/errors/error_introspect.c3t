// #target: macos-x64
module foo;
import std::io;

fault Foo
{
    BAR,
    BAZ
}

fn void main()
{
  char[][] x = Foo.names;
  io::printfn("Foo.names: %s", x);
  io::printfn("Foo.values: %s", Foo.values);
  io::printfn("Foo.elements: %s", Foo.elements);
}

/* #expect: foo.ll

@"foo_Foo$BAR" = linkonce constant %.fault { i64 ptrtoint (ptr @"ct$foo_Foo" to i64), %"char[]" { ptr @.fault, i64 3 } }, align 8
@.fault = internal constant [4 x i8] c"BAR\00", align 1
@"foo_Foo$BAZ" = linkonce constant %.fault { i64 ptrtoint (ptr @"ct$foo_Foo" to i64), %"char[]" { ptr @.fault.1, i64 3 } }, align 8
@.fault.1 = internal constant [4 x i8] c"BAZ\00", align 1
@"ct$foo_Foo" = linkonce constant %.introspect { i8 9, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [4 x i8] c"BAR\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"BAZ\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Foo.names: %s\00", align 1
@"ct$char" = linkonce constant %.introspect { i8 3, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$sa$char" = linkonce constant %.introspect { i8 16, i64 16, i64 ptrtoint (ptr @"ct$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"ct$sa$sa$char" = linkonce constant %.introspect { i8 16, i64 16, i64 ptrtoint (ptr @"ct$sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.str.4 = private unnamed_addr constant [15 x i8] c"Foo.values: %s\00", align 1
@"ct$a2$foo_Foo" = linkonce constant %.introspect { i8 15, i64 16, i64 ptrtoint (ptr @"ct$foo_Foo" to i64), i64 2, [0 x i64] zeroinitializer }, align 8
@.str.5 = private unnamed_addr constant [17 x i8] c"Foo.elements: %s\00", align 1
@"ct$long" = linkonce constant %.introspect { i8 2, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8

entry:
  %x = alloca %"char[][]", align 8
  %literal = alloca [2 x %"char[]"], align 16
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %retparam1 = alloca i64, align 8
  %varargslots2 = alloca [1 x %variant], align 16
  %literal3 = alloca [2 x i64], align 16
  %retparam4 = alloca i64, align 8
  %varargslots5 = alloca [1 x %variant], align 16
  %taddr = alloca i64, align 8
  %0 = getelementptr inbounds [2 x %"char[]"], ptr %literal, i64 0, i64 0
  store %"char[]" { ptr @.str, i64 3 }, ptr %0, align 8
  %1 = getelementptr inbounds [2 x %"char[]"], ptr %literal, i64 0, i64 1
  store %"char[]" { ptr @.str.2, i64 3 }, ptr %1, align 8
  %2 = insertvalue %"char[][]" undef, ptr %literal, 0
  %3 = insertvalue %"char[][]" %2, i64 2, 1
  store %"char[][]" %3, ptr %x, align 8
  %4 = insertvalue %variant undef, ptr %x, 0
  %5 = insertvalue %variant %4, i64 ptrtoint (ptr @"ct$sa$sa$char" to i64), 1
  %6 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %5, ptr %6, align 16
  %7 = call i64 @std_io_printfn(ptr %retparam, ptr @.str.3, i64 13, ptr %varargslots, i64 1)
  %8 = getelementptr inbounds [2 x i64], ptr %literal3, i64 0, i64 0
  store i64 ptrtoint (ptr @"foo_Foo$BAR" to i64), ptr %8, align 8
  %9 = getelementptr inbounds [2 x i64], ptr %literal3, i64 0, i64 1
  store i64 ptrtoint (ptr @"foo_Foo$BAZ" to i64), ptr %9, align 8
  %10 = insertvalue %variant undef, ptr %literal3, 0
  %11 = insertvalue %variant %10, i64 ptrtoint (ptr @"ct$a2$foo_Foo" to i64), 1
  %12 = getelementptr inbounds [1 x %variant], ptr %varargslots2, i64 0, i64 0
  store %variant %11, ptr %12, align 16
  %13 = call i64 @std_io_printfn(ptr %retparam1, ptr @.str.4, i64 14, ptr %varargslots2, i64 1)
  store i64 2, ptr %taddr, align 8
  %14 = insertvalue %variant undef, ptr %taddr, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (ptr @"ct$long" to i64), 1
  %16 = getelementptr inbounds [1 x %variant], ptr %varargslots5, i64 0, i64 0
  store %variant %15, ptr %16, align 16
  %17 = call i64 @std_io_printfn(ptr %retparam4, ptr @.str.5, i64 16, ptr %varargslots5, i64 1)
  ret void
}
