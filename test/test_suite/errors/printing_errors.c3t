// #target: macos-x64
module test;
import std::io;

fault Cde
{
	HELLO,
	WORLD,
}
fn void main()
{
	anyfault x = Cde.WORLD;
	io::printf("%s %s\n", Cde.HELLO.nameof, x.nameof);
}

/* #expect: test.ll

 define void @test.main() #0 {
 entry:
   %x = alloca i64, align 8
   %varargslots = alloca [2 x %"any*"], align 16
   %taddr = alloca %"char[]", align 8
   %faultname_zero = alloca %"char[]", align 8
   %retparam = alloca i64, align 8
   store i64 ptrtoint (ptr @"test.Cde$WORLD" to i64), ptr %x, align 8
   store %"char[]" { ptr @.str.2, i64 5 }, ptr %taddr, align 8
   %0 = insertvalue %"any*" undef, ptr %taddr, 0
   %1 = insertvalue %"any*" %0, i64 ptrtoint (ptr @"$ct.String" to i64), 1
   %2 = getelementptr inbounds [2 x %"any*"], ptr %varargslots, i64 0, i64 0
   store %"any*" %1, ptr %2, align 16
   %3 = load i64, ptr %x, align 8
   %eq = icmp eq i64 %3, 0
   br i1 %eq, label %faultname_no, label %faultname_ok

 faultname_no:                                     ; preds = %entry
   call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
   br label %faultname_exit

 faultname_ok:                                     ; preds = %entry
   %4 = inttoptr i64 %3 to ptr
   %5 = getelementptr inbounds %.fault, ptr %4, i32 0, i32 1
   br label %faultname_exit

 faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
   %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %5, %faultname_ok ]
   %6 = insertvalue %"any*" undef, ptr %faultname, 0
   %7 = insertvalue %"any*" %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1
   %8 = getelementptr inbounds [2 x %"any*"], ptr %varargslots, i64 0, i64 1
   store %"any*" %7, ptr %8, align 16
   %9 = call i64 @std.io.printf(ptr %retparam, ptr @.str, i64 6, ptr %varargslots, i64 2)
   ret void
 }


 define i32 @main(i32 %0, ptr %1) #0 {
 entry:
   call void @test.main()
   ret i32 0
 }

