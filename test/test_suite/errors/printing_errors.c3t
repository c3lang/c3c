// #target: macos-x64
module test;
import std::io;

fault Cde
{
	HELLO,
	WORLD,
}
fn void main()
{
	anyerr x = Cde.WORLD;
	io::printf("%s %s\n", Cde.HELLO.nameof, x.nameof);
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %x = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr1 = alloca [5 x i8]*, align 8
  %faultname_zero = alloca %"char[]", align 8
  store i64 ptrtoint (%.fault* @"test_Cde$WORLD" to i64), i64* %x, align 8
  store %"char[]" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i64 6 }, %"char[]"* %taddr, align 8
  %0 = bitcast %"char[]"* %taddr to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  %lo = load i8*, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  %hi = load i64, i64* %2, align 8
  store [5 x i8]* bitcast ([6 x i8]* @.str.2 to [5 x i8]*), [5 x i8]** %taddr1, align 8
  %3 = bitcast [5 x i8]** %taddr1 to i8*
  %4 = insertvalue %variant undef, i8* %3, 0
  %5 = insertvalue %variant %4, i64 ptrtoint (%.introspect* @"ct$p$a5$char" to i64), 1
  %6 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 0
  store %variant %5, %variant* %6, align 16
  %7 = load i64, i64* %x, align 8
  %eq = icmp eq i64 %7, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %entry
  %8 = bitcast %"char[]"* %faultname_zero to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %entry
  %9 = inttoptr i64 %7 to %.fault*
  %10 = getelementptr inbounds %.fault, %.fault* %9, i32 0, i32 1
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi %"char[]"* [ %faultname_zero, %faultname_no ], [ %10, %faultname_ok ]
  %11 = bitcast %"char[]"* %faultname to i8*
  %12 = insertvalue %variant undef, i8* %11, 0
  %13 = insertvalue %variant %12, i64 ptrtoint (%.introspect* @"ct$sa$char" to i64), 1
  %14 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 1
  store %variant %13, %variant* %14, align 16
  %15 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 2, i64* %15, align 8
  %16 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %17 = bitcast [2 x %variant]* %varargslots to %variant*
  store %variant* %17, %variant** %16, align 8
  %18 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %lo2 = load i8*, i8** %19, align 8
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %hi3 = load i64, i64* %20, align 8
  %21 = call i64 @std_io_printf(i64* %retparam, i8* %lo, i64 %hi, i8* %lo2, i64 %hi3)
  %not_err = icmp eq i64 %21, 0
  br i1 %not_err, label %after.errcheck, label %voiderr

after.errcheck:                                   ; preds = %faultname_exit
  br label %voiderr

voiderr:                                          ; preds = %after.errcheck, %faultname_exit
  ret void
}
