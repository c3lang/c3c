// #target: macos-x64
module test;
import std;
import libc;

struct Doc { Head *head; }
struct Head { char[]* title; }

struct Summary
{
	char[]* title;
	bool ok;
}

fn void Summary.print(Summary *s, CFile out)
{
	// We don't have a native printf in C3 yet, so use libc,
	// which is not all that nice for the strings but...
	char[] title = s.title ? *s.title : "missing";
	libc::fprintf(out, "Summary({ .title = %.*s, .ok = %s})", (int)title.len, title.ptr, s.ok ? (char*)"true" : (char*)"false");
}

fn bool contains(char[] haystack, char[] needle)
{
	usz len = haystack.len;
	usz needle_len = needle.len;
	if (len < needle_len) return false;
	if (!needle_len) return true;
	len -= needle_len - 1;
	for (usz i = 0; i < len; i++)
	{
		if (libc::memcmp(&haystack[i], needle.ptr, needle_len) == 0)
		{
			return true;
		}
	}
	return false;
}

macro dupe(value)
{
	$typeof(&value) temp = malloc($sizeof(value));
	if (!temp) return ReadError.OUT_OF_MEMORY?;
	*temp = value;
	return temp;
}

fault ReadError
{
	BAD_READ,
	OUT_OF_MEMORY
}

fn Doc! readDoc(char[] url)
{
	if (contains(url, "fail")) return ReadError.BAD_READ?;
	if (contains(url, "head-missing")) return { .head = null };
	if (contains(url, "title-missing")) return { dupe(Head { .title = null })! };
	if (contains(url, "title-empty")) return { dupe(Head { .title = dupe((char[])"")! })! };
	// Not particularly elegant due to missing string functions.
	isz len = libc::snprintf(null, 0, "Title of %.*s", (int)url.len, url.ptr);
	char* str = malloc(len + 1);
	if (!str) return ReadError.OUT_OF_MEMORY?;
	libc::snprintf(str, len + 1, "Title of %.*s", (int)url.len, url.ptr);
	return { dupe(Head { .title = dupe(str[..len - 1])! })! };
}

fn Summary buildSummary(Doc doc)
{
    return Summary {
        .title = doc.head ? doc.head.title : null,
        .ok = true,
    };
}

fn Summary readAndBuildSummary(char[] url)
{
	return buildSummary(readDoc(url)) ?? Summary { .title = null, .ok = false };
	/*
	// or
	Summary summary = buildSummary(readDoc(url));
	if (catch summary) return Summary { .title = null, .ok = false };
	return summary;
	// or
	Summary summary = buildSummary(readDoc(url));
	if (try summary) return summary;
	return Summary { .title = null, .ok = false };
	*/
}


fault TitleResult
{
	TITLE_MISSING
}

fn bool! isTitleNonEmpty(Doc doc)
{
	if (!doc.head) return TitleResult.TITLE_MISSING?;
	char[]* head = doc.head.title;
	if (!head) return TitleResult.TITLE_MISSING?;
	return (*head).len > 0;
}


fn bool! readWhetherTitleNonEmpty(char[] url)
{
    return isTitleNonEmpty(readDoc(url));
}

fn char* bool_to_string(bool b)
{
	return b ? "true" : "false";
}
fn char* nameFromError(anyfault e)
{
	switch (e)
	{
		case TitleResult.TITLE_MISSING:
			return "no title";
		case ReadError.BAD_READ:
			return "bad read";
		case ReadError.OUT_OF_MEMORY:
			return "out of memory";
		default:
			return "unknown error";
	}
}


fn void main()
{
    const char[][] URLS = { "good", "title-empty", "title-missing", "head-missing", "fail" };
    foreach (char[] url : URLS)
    {
        // Yes, it's pretty onerous to print strings for the moment in C3
        libc::printf(`Checking "https://%.*s/":` "\n", (int)url.len, url.ptr);
        Summary summary = readAndBuildSummary(url);
        libc::printf("  Summary: ");
        summary.print(libc::stdout());
        libc::printf("\n");
        char[] title_sure = summary.title ? *summary.title : "";
        libc::printf("  Title: %.*s\n", (int)title_sure.len, title_sure.ptr);
        bool! has_title = readWhetherTitleNonEmpty(url);
        // This looks a bit less than elegant, but as you see it's mostly due to having to
        // use printf here.
        libc::printf("  Has title: %s vs %s\n", bool_to_string(has_title) ?? nameFromError(@catch(has_title)), (has_title ?? false) ? (char*)"true" : (char*)"false");
    }
}

/* #expect: test.ll

define void @test.Summary.print(ptr %0, ptr %1) #0 {
entry:
  %title = alloca %"char[]", align 8
  %2 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %ptrbool = icmp ne ptr %3, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %4 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = load %"char[]", ptr %5, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %6, %cond.lhs ], [ { ptr @.str.28, i64 7 }, %cond.rhs ]
  store %"char[]" %val, ptr %title, align 8
  %7 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  %trunc = trunc i64 %8 to i32
  %9 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 0
  %10 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 1
  %11 = load i8, ptr %10, align 8
  %12 = trunc i8 %11 to i1
  %ternary = select i1 %12, ptr @.str.30, ptr @.str.31
  %13 = load ptr, ptr %9, align 8
  %14 = call i32 (ptr, ptr, ...) @fprintf(ptr %1, ptr @.str.29, i32 %trunc, ptr %13, ptr %ternary)
  ret void
}


define zeroext i8 @test.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 {
entry:
  %haystack = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %needle_len = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %haystack, align 8
  %ptroffset = getelementptr inbounds i64, ptr %haystack, i64 1
  store i64 %1, ptr %ptroffset, align 8
  store ptr %2, ptr %needle, align 8
  %ptroffset1 = getelementptr inbounds i64, ptr %needle, i64 1
  store i64 %3, ptr %ptroffset1, align 8
  %4 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  store i64 %5, ptr %len, align 8
  %6 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 1
  %7 = load i64, ptr %6, align 8
  store i64 %7, ptr %needle_len, align 8
  %8 = load i64, ptr %len, align 8
  %9 = load i64, ptr %needle_len, align 8
  %lt = icmp ult i64 %8, %9
  br i1 %lt, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i8 0

if.exit:                                          ; preds = %entry
  %10 = load i64, ptr %needle_len, align 8
  %not = icmp eq i64 %10, 0
  br i1 %not, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i8 1

if.exit3:                                         ; preds = %if.exit
  %11 = load i64, ptr %len, align 8
  %12 = load i64, ptr %needle_len, align 8
  %sub = sub i64 %12, 1
  %sub4 = sub i64 %11, %sub
  store i64 %sub4, ptr %len, align 8
  store i64 0, ptr %i, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %if.exit8, %if.exit3
  %13 = load i64, ptr %i, align 8
  %14 = load i64, ptr %len, align 8
  %lt5 = icmp ult i64 %13, %14
  br i1 %lt5, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %15 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = load i64, ptr %i, align 8
  %ptroffset6 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = load i64, ptr %needle_len, align 8
  %21 = call i32 @memcmp(ptr %ptroffset6, ptr %19, i64 %20)
  %eq = icmp eq i32 %21, 0
  br i1 %eq, label %if.then7, label %if.exit8

if.then7:                                         ; preds = %loop.body
  ret i8 1

if.exit8:                                         ; preds = %loop.body
  %22 = load i64, ptr %i, align 8
  %add = add i64 %22, 1
  store i64 %add, ptr %i, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret i8 0
}


define i64 @test.readDoc(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %literal = alloca %Doc, align 8
  %reterr8 = alloca i64, align 8
  %literal9 = alloca %Doc, align 8
  %error_var = alloca i64, align 8
  %literal10 = alloca %Head, align 8
  %value = alloca %Head, align 8
  %temp = alloca ptr, align 8
  %reterr17 = alloca i64, align 8
  %literal18 = alloca %Doc, align 8
  %error_var19 = alloca i64, align 8
  %literal20 = alloca %Head, align 8
  %error_var21 = alloca i64, align 8
  %value22 = alloca %"char[]", align 8
  %temp23 = alloca ptr, align 8
  %value29 = alloca %Head, align 8
  %temp30 = alloca ptr, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %reterr42 = alloca i64, align 8
  %literal43 = alloca %Doc, align 8
  %error_var44 = alloca i64, align 8
  %literal45 = alloca %Head, align 8
  %error_var46 = alloca i64, align 8
  %value48 = alloca %"char[]", align 8
  %temp49 = alloca ptr, align 8
  %value55 = alloca %Head, align 8
  %temp56 = alloca ptr, align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i8 @test.contains(ptr %lo, i64 %hi, ptr @.str, i64 4)
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64)

if.exit:                                          ; preds = %entry
  %7 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo1 = load ptr, ptr %7, align 8
  %8 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi2 = load i64, ptr %8, align 8
  %9 = call i8 @test.contains(ptr %lo1, i64 %hi2, ptr @.str.3, i64 12)
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then3, label %if.exit4

if.then3:                                         ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 @.__const, i32 8, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 8, i1 false)
  ret i64 0

if.exit4:                                         ; preds = %if.exit
  %11 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo5 = load ptr, ptr %11, align 8
  %12 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi6 = load i64, ptr %12, align 8
  %13 = call i8 @test.contains(ptr %lo5, i64 %hi6, ptr @.str.4, i64 13)
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then7, label %if.exit13

if.then7:                                         ; preds = %if.exit4
  %15 = getelementptr inbounds %Doc, ptr %literal9, i32 0, i32 0
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal10, ptr align 8 @.__const.5, i32 8, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %literal10, i32 8, i1 false)
  %16 = call ptr @std.core.mem.malloc(i64 8) #3
  store ptr %16, ptr %temp, align 8
  %17 = load ptr, ptr %temp, align 8
  %not = icmp eq ptr %17, null
  br i1 %not, label %if.then11, label %if.exit12

if.then11:                                        ; preds = %if.then7
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var, align 8
  br label %guard_block

if.exit12:                                        ; preds = %if.then7
  %18 = load ptr, ptr %temp, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %18, ptr align 8 %value, i32 8, i1 false)
  br label %noerr_block

guard_block:                                      ; preds = %if.then11
  %19 = load i64, ptr %error_var, align 8
  ret i64 %19

noerr_block:                                      ; preds = %if.exit12
  %20 = load ptr, ptr %temp, align 8
  store ptr %20, ptr %15, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal9, i32 8, i1 false)
  ret i64 0

if.exit13:                                        ; preds = %if.exit4
  %21 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo14 = load ptr, ptr %21, align 8
  %22 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi15 = load i64, ptr %22, align 8
  %23 = call i8 @test.contains(ptr %lo14, i64 %hi15, ptr @.str.6, i64 11)
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then16, label %if.exit36

if.then16:                                        ; preds = %if.exit13
  %25 = getelementptr inbounds %Doc, ptr %literal18, i32 0, i32 0
  store ptr null, ptr %literal20, align 8
  %26 = getelementptr inbounds %Head, ptr %literal20, i32 0, i32 0
  store %"char[]" zeroinitializer, ptr %value22, align 8
  %27 = call ptr @std.core.mem.malloc(i64 16) #3
  store ptr %27, ptr %temp23, align 8
  %28 = load ptr, ptr %temp23, align 8
  %not24 = icmp eq ptr %28, null
  br i1 %not24, label %if.then25, label %if.exit26

if.then25:                                        ; preds = %if.then16
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var21, align 8
  br label %guard_block27

if.exit26:                                        ; preds = %if.then16
  %29 = load ptr, ptr %temp23, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %29, ptr align 8 %value22, i32 16, i1 false)
  br label %noerr_block28

guard_block27:                                    ; preds = %if.then25
  %30 = load i64, ptr %error_var21, align 8
  ret i64 %30

noerr_block28:                                    ; preds = %if.exit26
  %31 = load ptr, ptr %temp23, align 8
  store ptr %31, ptr %26, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value29, ptr align 8 %literal20, i32 8, i1 false)
  %32 = call ptr @std.core.mem.malloc(i64 8) #3
  store ptr %32, ptr %temp30, align 8
  %33 = load ptr, ptr %temp30, align 8
  %not31 = icmp eq ptr %33, null
  br i1 %not31, label %if.then32, label %if.exit33

if.then32:                                        ; preds = %noerr_block28
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var19, align 8
  br label %guard_block34

if.exit33:                                        ; preds = %noerr_block28
  %34 = load ptr, ptr %temp30, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %34, ptr align 8 %value29, i32 8, i1 false)
  br label %noerr_block35

guard_block34:                                    ; preds = %if.then32
  %35 = load i64, ptr %error_var19, align 8
  ret i64 %35

noerr_block35:                                    ; preds = %if.exit33
  %36 = load ptr, ptr %temp30, align 8
  store ptr %36, ptr %25, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal18, i32 8, i1 false)
  ret i64 0

if.exit36:                                        ; preds = %if.exit13
  %37 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %38 = load i64, ptr %37, align 8
  %trunc = trunc i64 %38 to i32
  %39 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr null, i64 0, ptr @.str.7, i32 %trunc, ptr %40)
  %sext = sext i32 %41 to i64
  store i64 %sext, ptr %len, align 8
  %42 = load i64, ptr %len, align 8
  %add = add i64 %42, 1
  %43 = call ptr @std.core.mem.malloc(i64 %add) #3
  store ptr %43, ptr %str, align 8
  %44 = load ptr, ptr %str, align 8
  %not37 = icmp eq ptr %44, null
  br i1 %not37, label %if.then38, label %if.exit39

if.then38:                                        ; preds = %if.exit36
  ret i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64)

if.exit39:                                        ; preds = %if.exit36
  %45 = load i64, ptr %len, align 8
  %add40 = add i64 %45, 1
  %46 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %47 = load i64, ptr %46, align 8
  %trunc41 = trunc i64 %47 to i32
  %48 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %49 = load ptr, ptr %str, align 8
  %50 = load ptr, ptr %48, align 8
  %51 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr %49, i64 %add40, ptr @.str.8, i32 %trunc41, ptr %50)
  %52 = getelementptr inbounds %Doc, ptr %literal43, i32 0, i32 0
  store ptr null, ptr %literal45, align 8
  %53 = getelementptr inbounds %Head, ptr %literal45, i32 0, i32 0
  %54 = load ptr, ptr %str, align 8
  %55 = load i64, ptr %len, align 8
  %sub = sub i64 %55, 1
  %56 = add i64 %sub, 1
  %size = sub i64 %56, 0
  %ptroffset47 = getelementptr inbounds i8, ptr %54, i64 0
  %57 = insertvalue %"char[]" undef, ptr %ptroffset47, 0
  %58 = insertvalue %"char[]" %57, i64 %size, 1
  store %"char[]" %58, ptr %value48, align 8
  %59 = call ptr @std.core.mem.malloc(i64 16) #3
  store ptr %59, ptr %temp49, align 8
  %60 = load ptr, ptr %temp49, align 8
  %not50 = icmp eq ptr %60, null
  br i1 %not50, label %if.then51, label %if.exit52

if.then51:                                        ; preds = %if.exit39
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var46, align 8
  br label %guard_block53

if.exit52:                                        ; preds = %if.exit39
  %61 = load ptr, ptr %temp49, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %61, ptr align 8 %value48, i32 16, i1 false)
  br label %noerr_block54

guard_block53:                                    ; preds = %if.then51
  %62 = load i64, ptr %error_var46, align 8
  ret i64 %62

noerr_block54:                                    ; preds = %if.exit52
  %63 = load ptr, ptr %temp49, align 8
  store ptr %63, ptr %53, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value55, ptr align 8 %literal45, i32 8, i1 false)
  %64 = call ptr @std.core.mem.malloc(i64 8) #3
  store ptr %64, ptr %temp56, align 8
  %65 = load ptr, ptr %temp56, align 8
  %not57 = icmp eq ptr %65, null
  br i1 %not57, label %if.then58, label %if.exit59

if.then58:                                        ; preds = %noerr_block54
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var44, align 8
  br label %guard_block60

if.exit59:                                        ; preds = %noerr_block54
  %66 = load ptr, ptr %temp56, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %66, ptr align 8 %value55, i32 8, i1 false)
  br label %noerr_block61

guard_block60:                                    ; preds = %if.then58
  %67 = load i64, ptr %error_var44, align 8
  ret i64 %67

noerr_block61:                                    ; preds = %if.exit59
  %68 = load ptr, ptr %temp56, align 8
  store ptr %68, ptr %52, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal43, i32 8, i1 false)
  ret i64 0
}


define { ptr, i8 } @test.buildSummary(ptr %0) #0 {
entry:
  %doc = alloca %Doc, align 8
  %literal = alloca %Summary, align 8
  store ptr %0, ptr %doc, align 8
  %1 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %1, align 8
  %2 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %2, align 8
  %3 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %ptrbool = icmp ne ptr %5, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %6 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %Head, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi ptr [ %9, %cond.lhs ], [ null, %cond.rhs ]
  store ptr %val, ptr %3, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 1, ptr %10, align 8
  %11 = load { ptr, i8 }, ptr %literal, align 8
  ret { ptr, i8 } %11
}


define { ptr, i8 } @test.readAndBuildSummary(ptr %0, i64 %1) #0 {
entry:
  %url = alloca %"char[]", align 8
  %retparam = alloca %Doc, align 8
  %result = alloca %Summary, align 8
  %literal = alloca %Summary, align 8
  %taddr = alloca %Summary, align 8
  store ptr %0, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %3, align 8
  %4 = call i64 @test.readDoc(ptr %retparam, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %4, 0
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %5, label %after_check, label %else_block

after_check:                                      ; preds = %entry
  %6 = load ptr, ptr %retparam, align 8
  %7 = call { ptr, i8 } @test.buildSummary(ptr %6)
  store { ptr, i8 } %7, ptr %result, align 8
  %8 = load %Summary, ptr %result, align 8
  br label %phi_block

else_block:                                       ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 @.__const.9, i32 16, i1 false)
  %9 = load %Summary, ptr %literal, align 8
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check
  %val = phi %Summary [ %8, %after_check ], [ %9, %else_block ]
  store %Summary %val, ptr %taddr, align 8
  %10 = load { ptr, i8 }, ptr %taddr, align 8
  ret { ptr, i8 } %10
}


define i64 @test.isTitleNonEmpty(ptr %0, ptr %1) #0 {
entry:
  %doc = alloca %Doc, align 8
  %head = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %doc, align 8
  %2 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %not = icmp eq ptr %3, null
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit:                                          ; preds = %entry
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %Head, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %head, align 8
  %8 = load ptr, ptr %head, align 8
  %not1 = icmp eq ptr %8, null
  br i1 %not1, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit3:                                         ; preds = %if.exit
  %9 = load ptr, ptr %head, align 8
  %10 = getelementptr inbounds %"char[]", ptr %9, i32 0, i32 1
  %11 = load i64, ptr %10, align 8
  %lt = icmp ult i64 0, %11
  %12 = zext i1 %lt to i8
  store i8 %12, ptr %0, align 1
  ret i64 0
}


define i64 @test.readWhetherTitleNonEmpty(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %Doc, align 8
  %retparam1 = alloca i8, align 1
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i64 @test.readDoc(ptr %retparam, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %5, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %6, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8
  br label %err_retblock

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam, align 8
  %8 = call i64 @test.isTitleNonEmpty(ptr %retparam1, ptr %7)
  %not_err2 = icmp eq i64 %8, 0
  %9 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true)
  br i1 %9, label %after_check4, label %assign_optional3

assign_optional3:                                 ; preds = %after_check
  store i64 %8, ptr %reterr, align 8
  br label %err_retblock

after_check4:                                     ; preds = %after_check
  %10 = load i8, ptr %retparam1, align 1
  store i8 %10, ptr %0, align 1
  ret i64 0

err_retblock:                                     ; preds = %assign_optional3, %assign_optional
  %11 = load i64, ptr %reterr, align 8
  ret i64 %11
}


define ptr @test.bool_to_string(i8 zeroext %0) #0 {
entry:
  %1 = trunc i8 %0 to i1
  %ternary = select i1 %1, %"char[]" { ptr @.str.10, i64 4 }, %"char[]" { ptr @.str.11, i64 5 }
  %2 = extractvalue %"char[]" %ternary, 0
  ret ptr %2
}


define ptr @test.nameFromError(i64 %0) #0 {
entry:
  %switch = alloca i64, align 8
  store i64 %0, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %1 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64), %1
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  ret ptr @.str.12

next_if:                                          ; preds = %switch.entry
  %eq1 = icmp eq i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64), %1
  br i1 %eq1, label %switch.case2, label %next_if3

switch.case2:                                     ; preds = %next_if
  ret ptr @.str.13

next_if3:                                         ; preds = %next_if
  %eq4 = icmp eq i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), %1
  br i1 %eq4, label %switch.case5, label %next_if6

switch.case5:                                     ; preds = %next_if3
  ret ptr @.str.14

next_if6:                                         ; preds = %next_if3
  br label %switch.default

switch.default:                                   ; preds = %next_if6
  ret ptr @.str.15
}


define void @test.main() #0 {
entry:
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %url = alloca %"char[]", align 8
  %summary = alloca %Summary, align 8
  %result = alloca %Summary, align 8
  %title_sure = alloca %"char[]", align 8
  %has_title = alloca i8, align 1
  %has_title.f = alloca i64, align 8
  %retparam = alloca i8, align 1
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %0 = load i64, ptr getelementptr inbounds (%"char[][]", ptr @main.URLS, i32 0, i32 1), align 8
  store i64 %0, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %phi_block16, %entry
  %1 = load i64, ptr %.anon1, align 8
  %2 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %1, %2
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %3 = load ptr, ptr @main.URLS, align 8
  %4 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds %"char[]", ptr %3, i64 %4
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %url, ptr align 8 %ptroffset, i32 16, i1 false)
  %5 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %6 = load i64, ptr %5, align 8
  %trunc = trunc i64 %6 to i32
  %7 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %8 = load ptr, ptr %7, align 8
  %9 = call i32 (ptr, ...) @printf(ptr @.str.21, i32 %trunc, ptr %8)
  %10 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %10, align 8
  %11 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %11, align 8
  %12 = call { ptr, i8 } @test.readAndBuildSummary(ptr %lo, i64 %hi)
  store { ptr, i8 } %12, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %summary, ptr align 8 %result, i32 16, i1 false)
  %13 = call i32 (ptr, ...) @printf(ptr @.str.22)
  %14 = load ptr, ptr @__stdoutp, align 8
  call void @test.Summary.print(ptr %summary, ptr %14)
  %15 = call i32 (ptr, ...) @printf(ptr @.str.23)
  %16 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %ptrbool = icmp ne ptr %17, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %loop.body
  %18 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = load %"char[]", ptr %19, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %loop.body
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %20, %cond.lhs ], [ zeroinitializer, %cond.rhs ]
  store %"char[]" %val, ptr %title_sure, align 8
  %21 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 1
  %22 = load i64, ptr %21, align 8
  %trunc2 = trunc i64 %22 to i32
  %23 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 0
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 (ptr, ...) @printf(ptr @.str.24, i32 %trunc2, ptr %24)
  %26 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo3 = load ptr, ptr %26, align 8
  %27 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi4 = load i64, ptr %27, align 8
  %28 = call i64 @test.readWhetherTitleNonEmpty(ptr %retparam, ptr %lo3, i64 %hi4)
  %not_err = icmp eq i64 %28, 0
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %29, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %cond.phi
  store i64 %28, ptr %has_title.f, align 8
  br label %after_assign

after_check:                                      ; preds = %cond.phi
  %30 = load i8, ptr %retparam, align 1
  store i8 %30, ptr %has_title, align 1
  store i64 0, ptr %has_title.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %assign_optional
  %optval = load i64, ptr %has_title.f, align 8
  %not_err5 = icmp eq i64 %optval, 0
  %31 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %31, label %after_check6, label %else_block

after_check6:                                     ; preds = %after_assign
  %32 = load i8, ptr %has_title, align 1
  %33 = call ptr @test.bool_to_string(i8 zeroext %32)
  br label %phi_block

else_block:                                       ; preds = %after_assign
  br label %testblock

testblock:                                        ; preds = %else_block
  %optval7 = load i64, ptr %has_title.f, align 8
  %not_err8 = icmp eq i64 %optval7, 0
  %34 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true)
  br i1 %34, label %after_check10, label %assign_optional9

assign_optional9:                                 ; preds = %testblock
  store i64 %optval7, ptr %f, align 8
  br label %end_block

after_check10:                                    ; preds = %testblock
  store i64 0, ptr %f, align 8
  br label %end_block

end_block:                                        ; preds = %after_check10, %assign_optional9
  %35 = load i64, ptr %f, align 8
  %neq = icmp ne i64 %35, 0
  br i1 %neq, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  %36 = load i64, ptr %f, align 8
  store i64 %36, ptr %blockret, align 8
  br label %expr_block.exit

if.exit:                                          ; preds = %end_block
  store i64 0, ptr %blockret, align 8
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %37 = load i64, ptr %blockret, align 8
  %38 = call ptr @test.nameFromError(i64 %37)
  br label %phi_block

phi_block:                                        ; preds = %expr_block.exit, %after_check6
  %val11 = phi ptr [ %33, %after_check6 ], [ %38, %expr_block.exit ]
  %optval12 = load i64, ptr %has_title.f, align 8
  %not_err13 = icmp eq i64 %optval12, 0
  %39 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true)
  br i1 %39, label %after_check14, label %else_block15

after_check14:                                    ; preds = %phi_block
  %40 = load i8, ptr %has_title, align 1
  %41 = trunc i8 %40 to i1
  br label %phi_block16

else_block15:                                     ; preds = %phi_block
  br label %phi_block16

phi_block16:                                      ; preds = %else_block15, %after_check14
  %val17 = phi i1 [ %41, %after_check14 ], [ false, %else_block15 ]
  %ternary = select i1 %val17, ptr @.str.26, ptr @.str.27
  %42 = call i32 (ptr, ...) @printf(ptr @.str.25, ptr %val11, ptr %ternary)
  %43 = load i64, ptr %.anon1, align 8
  %add = add i64 %43, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret void
}
