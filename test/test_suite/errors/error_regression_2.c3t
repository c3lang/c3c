// #target: macos-x64
module test;
import std;
import libc;

struct Doc { Head *head; }
struct Head { char[]* title; }

struct Summary
{
	char[]* title;
	bool ok;
}

fn void Summary.print(Summary *s, CFile out)
{
	// We don't have a native printf in C3 yet, so use libc,
	// which is not all that nice for the strings but...
	char[] title = s.title ? *s.title : "missing";
	libc::fprintf(out, "Summary({ .title = %.*s, .ok = %s})", (int)title.len, title.ptr, s.ok ? (char*)"true" : (char*)"false");
}

fn bool contains(char[] haystack, char[] needle)
{
	usz len = haystack.len;
	usz needle_len = needle.len;
	if (len < needle_len) return false;
	if (!needle_len) return true;
	len -= needle_len - 1;
	for (usz i = 0; i < len; i++)
	{
		if (libc::memcmp(&haystack[i], needle.ptr, needle_len) == 0)
		{
			return true;
		}
	}
	return false;
}

macro dupe(value)
{
	$typeof(&value) temp = malloc($sizeof(value));
	if (!temp) return ReadError.OUT_OF_MEMORY?;
	*temp = value;
	return temp;
}

fault ReadError
{
	BAD_READ,
	OUT_OF_MEMORY
}

fn Doc! readDoc(char[] url)
{
	if (contains(url, "fail")) return ReadError.BAD_READ?;
	if (contains(url, "head-missing")) return { .head = null };
	if (contains(url, "title-missing")) return { dupe(Head { .title = null })! };
	if (contains(url, "title-empty")) return { dupe(Head { .title = dupe((char[])"")! })! };
	// Not particularly elegant due to missing string functions.
	int len = libc::snprintf(null, 0, "Title of %.*s", (int)url.len, url.ptr);
	char* str = malloc(len + 1);
	if (!str) return ReadError.OUT_OF_MEMORY?;
	libc::snprintf(str, len + 1, "Title of %.*s", (int)url.len, url.ptr);
	return { dupe(Head { .title = dupe(str[..len - 1])! })! };
}

fn Summary buildSummary(Doc doc)
{
    return Summary {
        .title = doc.head ? doc.head.title : null,
        .ok = true,
    };
}

fn Summary readAndBuildSummary(char[] url)
{
	return buildSummary(readDoc(url)) ?? Summary { .title = null, .ok = false };
	/*
	// or
	Summary summary = buildSummary(readDoc(url));
	if (catch summary) return Summary { .title = null, .ok = false };
	return summary;
	// or
	Summary summary = buildSummary(readDoc(url));
	if (try summary) return summary;
	return Summary { .title = null, .ok = false };
	*/
}


fault TitleResult
{
	TITLE_MISSING
}

fn bool! isTitleNonEmpty(Doc doc)
{
	if (!doc.head) return TitleResult.TITLE_MISSING?;
	char[]* head = doc.head.title;
	if (!head) return TitleResult.TITLE_MISSING?;
	return (*head).len > 0;
}


fn bool! readWhetherTitleNonEmpty(char[] url)
{
    return isTitleNonEmpty(readDoc(url));
}

fn char* bool_to_string(bool b)
{
	return b ? "true" : "false";
}
fn char* nameFromError(anyfault e)
{
	switch (e)
	{
		case TitleResult.TITLE_MISSING:
			return "no title";
		case ReadError.BAD_READ:
			return "bad read";
		case ReadError.OUT_OF_MEMORY:
			return "out of memory";
		default:
			return "unknown error";
	}
}


fn void main()
{
    const char[][] URLS = { "good", "title-empty", "title-missing", "head-missing", "fail" };
    foreach (char[] url : URLS)
    {
        // Yes, it's pretty onerous to print strings for the moment in C3
        libc::printf(`Checking "https://%.*s/":` "\n", (int)url.len, url.ptr);
        Summary summary = readAndBuildSummary(url);
        libc::printf("  Summary: ");
        summary.print(libc::stdout());
        libc::printf("\n");
        char[] title_sure = summary.title ? *summary.title : "";
        libc::printf("  Title: %.*s\n", (int)title_sure.len, title_sure.ptr);
        bool! has_title = readWhetherTitleNonEmpty(url);
        // This looks a bit less than elegant, but as you see it's mostly due to having to
        // use printf here.
        libc::printf("  Has title: %s vs %s\n", bool_to_string(has_title) ?? nameFromError(@catchof(has_title)), (has_title ?? false) ? (char*)"true" : (char*)"false");
    }
}

/* #expect: test.ll

define void @test.Summary.print(ptr %0, ptr %1) #0 {
entry:
  %title = alloca %"char[]", align 8
  %2 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %ptrbool = icmp ne ptr %3, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %4 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = load %"char[]", ptr %5, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %6, %cond.lhs ], [ { ptr @.str.26, i64 7 }, %cond.rhs ]
  store %"char[]" %val, ptr %title, align 8
  %7 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  %trunc = trunc i64 %8 to i32
  %9 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 1
  %12 = load i8, ptr %11, align 8
  %13 = trunc i8 %12 to i1
  %ternary = select i1 %13, ptr @.str.28, ptr @.str.29
  %14 = call i32 (ptr, ptr, ...) @fprintf(ptr %1, ptr @.str.27, i32 %trunc, ptr %10, ptr %ternary)
  ret void
}

; Function Attrs: nounwind
define zeroext i8 @test.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 {
entry:
  %haystack = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %needle_len = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %haystack, align 8
  %ptroffset = getelementptr inbounds i64, ptr %haystack, i64 1
  store i64 %1, ptr %ptroffset, align 8
  store ptr %2, ptr %needle, align 8
  %ptroffset1 = getelementptr inbounds i64, ptr %needle, i64 1
  store i64 %3, ptr %ptroffset1, align 8
  %4 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  store i64 %5, ptr %len, align 8
  %6 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 1
  %7 = load i64, ptr %6, align 8
  store i64 %7, ptr %needle_len, align 8
  %8 = load i64, ptr %len, align 8
  %9 = load i64, ptr %needle_len, align 8
  %lt = icmp ult i64 %8, %9
  br i1 %lt, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i8 0

if.exit:                                          ; preds = %entry
  %10 = load i64, ptr %needle_len, align 8
  %not = icmp eq i64 %10, 0
  br i1 %not, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i8 1

if.exit3:                                         ; preds = %if.exit
  %11 = load i64, ptr %len, align 8
  %12 = load i64, ptr %needle_len, align 8
  %sub = sub i64 %12, 1
  %sub4 = sub i64 %11, %sub
  store i64 %sub4, ptr %len, align 8
  store i64 0, ptr %i, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %if.exit8, %if.exit3
  %13 = load i64, ptr %i, align 8
  %14 = load i64, ptr %len, align 8
  %lt5 = icmp ult i64 %13, %14
  br i1 %lt5, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %15 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = load i64, ptr %i, align 8
  %ptroffset6 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = load i64, ptr %needle_len, align 8
  %21 = call i32 @memcmp(ptr %ptroffset6, ptr %19, i64 %20)
  %eq = icmp eq i32 %21, 0
  br i1 %eq, label %if.then7, label %if.exit8

if.then7:                                         ; preds = %loop.body
  ret i8 1

if.exit8:                                         ; preds = %loop.body
  %22 = load i64, ptr %i, align 8
  %add = add i64 %22, 1
  store i64 %add, ptr %i, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret i8 0
}

; Function Attrs: nounwind
define i64 @test.readDoc(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %literal = alloca %Doc, align 8
  %reterr8 = alloca i64, align 8
  %literal9 = alloca %Doc, align 8
  %error_var = alloca i64, align 8
  %value = alloca %Head, align 8
  %literal10 = alloca %Head, align 8
  %temp = alloca ptr, align 8
  %using = alloca ptr, align 8
  %end_padding = alloca i64, align 8
  %error_var11 = alloca i64, align 8
  %using12 = alloca ptr, align 8
  %end_padding13 = alloca i64, align 8
  %.anon = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %reterr21 = alloca i64, align 8
  %literal22 = alloca %Doc, align 8
  %error_var23 = alloca i64, align 8
  %value24 = alloca %Head, align 8
  %literal25 = alloca %Head, align 8
  %error_var26 = alloca i64, align 8
  %value27 = alloca %"char[]", align 8
  %temp28 = alloca ptr, align 8
  %using29 = alloca ptr, align 8
  %end_padding30 = alloca i64, align 8
  %error_var31 = alloca i64, align 8
  %using32 = alloca ptr, align 8
  %end_padding33 = alloca i64, align 8
  %.anon34 = alloca i64, align 8
  %retparam35 = alloca ptr, align 8
  %varargslots41 = alloca [1 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %temp49 = alloca ptr, align 8
  %using50 = alloca ptr, align 8
  %end_padding51 = alloca i64, align 8
  %error_var52 = alloca i64, align 8
  %using53 = alloca ptr, align 8
  %end_padding54 = alloca i64, align 8
  %.anon55 = alloca i64, align 8
  %retparam56 = alloca ptr, align 8
  %varargslots62 = alloca [1 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %len = alloca i32, align 4
  %str = alloca ptr, align 8
  %using71 = alloca ptr, align 8
  %end_padding72 = alloca i64, align 8
  %error_var73 = alloca i64, align 8
  %using74 = alloca ptr, align 8
  %end_padding75 = alloca i64, align 8
  %.anon76 = alloca i32, align 4
  %retparam78 = alloca ptr, align 8
  %varargslots84 = alloca [1 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %reterr93 = alloca i64, align 8
  %literal94 = alloca %Doc, align 8
  %error_var95 = alloca i64, align 8
  %value96 = alloca %Head, align 8
  %literal97 = alloca %Head, align 8
  %error_var98 = alloca i64, align 8
  %value99 = alloca %"char[]", align 8
  %temp102 = alloca ptr, align 8
  %using103 = alloca ptr, align 8
  %end_padding104 = alloca i64, align 8
  %error_var105 = alloca i64, align 8
  %using106 = alloca ptr, align 8
  %end_padding107 = alloca i64, align 8
  %.anon108 = alloca i64, align 8
  %retparam109 = alloca ptr, align 8
  %varargslots115 = alloca [1 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %temp123 = alloca ptr, align 8
  %using124 = alloca ptr, align 8
  %end_padding125 = alloca i64, align 8
  %error_var126 = alloca i64, align 8
  %using127 = alloca ptr, align 8
  %end_padding128 = alloca i64, align 8
  %.anon129 = alloca i64, align 8
  %retparam130 = alloca ptr, align 8
  %varargslots136 = alloca [1 x %any], align 16
  %indirectarg137 = alloca %"any[]", align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i8 @test.contains(ptr %lo, i64 %hi, ptr @.str, i64 4)
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64)

if.exit:                                          ; preds = %entry
  %7 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo1 = load ptr, ptr %7, align 8
  %8 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi2 = load i64, ptr %8, align 8
  %9 = call i8 @test.contains(ptr %lo1, i64 %hi2, ptr @.str.3, i64 12)
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then3, label %if.exit4

if.then3:                                         ; preds = %if.exit
  %11 = getelementptr inbounds %Doc, ptr %literal, i32 0, i32 0
  store ptr null, ptr %11, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 8, i1 false)
  ret i64 0

if.exit4:                                         ; preds = %if.exit
  %12 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo5 = load ptr, ptr %12, align 8
  %13 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi6 = load i64, ptr %13, align 8
  %14 = call i8 @test.contains(ptr %lo5, i64 %hi6, ptr @.str.4, i64 13)
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then7, label %if.exit17

if.then7:                                         ; preds = %if.exit4
  %16 = getelementptr inbounds %Doc, ptr %literal9, i32 0, i32 0
  %17 = getelementptr inbounds %Head, ptr %literal10, i32 0, i32 0
  store ptr null, ptr %17, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %literal10, i32 8, i1 false)
  %18 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %18, ptr %using, align 8
  store i64 0, ptr %end_padding, align 8
  %19 = load ptr, ptr %using, align 8
  store ptr %19, ptr %using12, align 8
  %20 = load i64, ptr %end_padding, align 8
  store i64 %20, ptr %end_padding13, align 8
  store i64 8, ptr %.anon, align 8
  %21 = load ptr, ptr %using12, align 8
  %22 = load i64, ptr %.anon, align 8
  %23 = load i64, ptr %end_padding13, align 8
  %add = add i64 %22, %23
  %24 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam, ptr %21, i64 %add) #3
  %not_err = icmp eq i64 %24, 0
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %25, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %if.then7
  store i64 %24, ptr %error_var11, align 8
  br label %panic_block

after_check:                                      ; preds = %if.then7
  %26 = load ptr, ptr %retparam, align 8
  br label %noerr_block

panic_block:                                      ; preds = %assign_optional
  %27 = insertvalue %any undef, ptr %error_var11, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  %29 = getelementptr inbounds [1 x %any], ptr %varargslots, i64 0, i64 0
  store %any %28, ptr %29, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %31 = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %31, ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg)
  unreachable

noerr_block:                                      ; preds = %after_check
  store ptr %26, ptr %temp, align 8
  %32 = load ptr, ptr %temp, align 8
  %not = icmp eq ptr %32, null
  br i1 %not, label %if.then14, label %if.exit15

if.then14:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var, align 8
  br label %guard_block

if.exit15:                                        ; preds = %noerr_block
  %33 = load ptr, ptr %temp, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %33, ptr align 8 %value, i32 8, i1 false)
  br label %noerr_block16

guard_block:                                      ; preds = %if.then14
  %34 = load i64, ptr %error_var, align 8
  ret i64 %34

noerr_block16:                                    ; preds = %if.exit15
  %35 = load ptr, ptr %temp, align 8
  store ptr %35, ptr %16, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal9, i32 8, i1 false)
  ret i64 0

if.exit17:                                        ; preds = %if.exit4
  %36 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo18 = load ptr, ptr %36, align 8
  %37 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi19 = load i64, ptr %37, align 8
  %38 = call i8 @test.contains(ptr %lo18, i64 %hi19, ptr @.str.5, i64 11)
  %39 = trunc i8 %38 to i1
  br i1 %39, label %if.then20, label %if.exit70

if.then20:                                        ; preds = %if.exit17
  %40 = getelementptr inbounds %Doc, ptr %literal22, i32 0, i32 0
  store ptr null, ptr %literal25, align 8
  %41 = getelementptr inbounds %Head, ptr %literal25, i32 0, i32 0
  store %"char[]" zeroinitializer, ptr %value27, align 8
  %42 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %42, ptr %using29, align 8
  store i64 0, ptr %end_padding30, align 8
  %43 = load ptr, ptr %using29, align 8
  store ptr %43, ptr %using32, align 8
  %44 = load i64, ptr %end_padding30, align 8
  store i64 %44, ptr %end_padding33, align 8
  store i64 16, ptr %.anon34, align 8
  %45 = load ptr, ptr %using32, align 8
  %46 = load i64, ptr %.anon34, align 8
  %47 = load i64, ptr %end_padding33, align 8
  %add36 = add i64 %46, %47
  %48 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam35, ptr %45, i64 %add36) #3
  %not_err37 = icmp eq i64 %48, 0
  %49 = call i1 @llvm.expect.i1(i1 %not_err37, i1 true)
  br i1 %49, label %after_check39, label %assign_optional38

assign_optional38:                                ; preds = %if.then20
  store i64 %48, ptr %error_var31, align 8
  br label %panic_block40

after_check39:                                    ; preds = %if.then20
  %50 = load ptr, ptr %retparam35, align 8
  br label %noerr_block43

panic_block40:                                    ; preds = %assign_optional38
  %51 = insertvalue %any undef, ptr %error_var31, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  %53 = getelementptr inbounds [1 x %any], ptr %varargslots41, i64 0, i64 0
  store %any %52, ptr %53, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %55 = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %55, ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg42)
  unreachable

noerr_block43:                                    ; preds = %after_check39
  store ptr %50, ptr %temp28, align 8
  %56 = load ptr, ptr %temp28, align 8
  %not44 = icmp eq ptr %56, null
  br i1 %not44, label %if.then45, label %if.exit46

if.then45:                                        ; preds = %noerr_block43
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var26, align 8
  br label %guard_block47

if.exit46:                                        ; preds = %noerr_block43
  %57 = load ptr, ptr %temp28, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %57, ptr align 8 %value27, i32 16, i1 false)
  br label %noerr_block48

guard_block47:                                    ; preds = %if.then45
  %58 = load i64, ptr %error_var26, align 8
  ret i64 %58

noerr_block48:                                    ; preds = %if.exit46
  %59 = load ptr, ptr %temp28, align 8
  store ptr %59, ptr %41, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value24, ptr align 8 %literal25, i32 8, i1 false)
  %60 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %60, ptr %using50, align 8
  store i64 0, ptr %end_padding51, align 8
  %61 = load ptr, ptr %using50, align 8
  store ptr %61, ptr %using53, align 8
  %62 = load i64, ptr %end_padding51, align 8
  store i64 %62, ptr %end_padding54, align 8
  store i64 8, ptr %.anon55, align 8
  %63 = load ptr, ptr %using53, align 8
  %64 = load i64, ptr %.anon55, align 8
  %65 = load i64, ptr %end_padding54, align 8
  %add57 = add i64 %64, %65
  %66 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam56, ptr %63, i64 %add57) #3
  %not_err58 = icmp eq i64 %66, 0
  %67 = call i1 @llvm.expect.i1(i1 %not_err58, i1 true)
  br i1 %67, label %after_check60, label %assign_optional59

assign_optional59:                                ; preds = %noerr_block48
  store i64 %66, ptr %error_var52, align 8
  br label %panic_block61

after_check60:                                    ; preds = %noerr_block48
  %68 = load ptr, ptr %retparam56, align 8
  br label %noerr_block64

panic_block61:                                    ; preds = %assign_optional59
  %69 = insertvalue %any undef, ptr %error_var52, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  %71 = getelementptr inbounds [1 x %any], ptr %varargslots62, i64 0, i64 0
  store %any %70, ptr %71, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %73 = insertvalue %"any[]" %72, i64 1, 1
  store %"any[]" %73, ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg63)
  unreachable

noerr_block64:                                    ; preds = %after_check60
  store ptr %68, ptr %temp49, align 8
  %74 = load ptr, ptr %temp49, align 8
  %not65 = icmp eq ptr %74, null
  br i1 %not65, label %if.then66, label %if.exit67

if.then66:                                        ; preds = %noerr_block64
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var23, align 8
  br label %guard_block68

if.exit67:                                        ; preds = %noerr_block64
  %75 = load ptr, ptr %temp49, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %75, ptr align 8 %value24, i32 8, i1 false)
  br label %noerr_block69

guard_block68:                                    ; preds = %if.then66
  %76 = load i64, ptr %error_var23, align 8
  ret i64 %76

noerr_block69:                                    ; preds = %if.exit67
  %77 = load ptr, ptr %temp49, align 8
  store ptr %77, ptr %40, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal22, i32 8, i1 false)
  ret i64 0

if.exit70:                                        ; preds = %if.exit17
  %78 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %79 = load i64, ptr %78, align 8
  %trunc = trunc i64 %79 to i32
  %80 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %81 = load ptr, ptr %80, align 8
  %82 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr null, i64 0, ptr @.str.6, i32 %trunc, ptr %81)
  store i32 %82, ptr %len, align 4
  %83 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %83, ptr %using71, align 8
  store i64 0, ptr %end_padding72, align 8
  %84 = load ptr, ptr %using71, align 8
  store ptr %84, ptr %using74, align 8
  %85 = load i64, ptr %end_padding72, align 8
  store i64 %85, ptr %end_padding75, align 8
  %86 = load i32, ptr %len, align 4
  %add77 = add i32 %86, 1
  store i32 %add77, ptr %.anon76, align 4
  %87 = load ptr, ptr %using74, align 8
  %88 = load i32, ptr %.anon76, align 4
  %sext = sext i32 %88 to i64
  %89 = load i64, ptr %end_padding75, align 8
  %add79 = add i64 %sext, %89
  %90 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam78, ptr %87, i64 %add79) #3
  %not_err80 = icmp eq i64 %90, 0
  %91 = call i1 @llvm.expect.i1(i1 %not_err80, i1 true)
  br i1 %91, label %after_check82, label %assign_optional81

assign_optional81:                                ; preds = %if.exit70
  store i64 %90, ptr %error_var73, align 8
  br label %panic_block83

after_check82:                                    ; preds = %if.exit70
  %92 = load ptr, ptr %retparam78, align 8
  br label %noerr_block86

panic_block83:                                    ; preds = %assign_optional81
  %93 = insertvalue %any undef, ptr %error_var73, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  %95 = getelementptr inbounds [1 x %any], ptr %varargslots84, i64 0, i64 0
  store %any %94, ptr %95, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %97 = insertvalue %"any[]" %96, i64 1, 1
  store %"any[]" %97, ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg85)
  unreachable

noerr_block86:                                    ; preds = %after_check82
  store ptr %92, ptr %str, align 8
  %98 = load ptr, ptr %str, align 8
  %not87 = icmp eq ptr %98, null
  br i1 %not87, label %if.then88, label %if.exit89

if.then88:                                        ; preds = %noerr_block86
  ret i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64)

if.exit89:                                        ; preds = %noerr_block86
  %99 = load ptr, ptr %str, align 8
  %100 = load i32, ptr %len, align 4
  %sext90 = sext i32 %100 to i64
  %add91 = add i64 %sext90, 1
  %101 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %102 = load i64, ptr %101, align 8
  %trunc92 = trunc i64 %102 to i32
  %103 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %104 = load ptr, ptr %103, align 8
  %105 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr %99, i64 %add91, ptr @.str.7, i32 %trunc92, ptr %104)
  %106 = getelementptr inbounds %Doc, ptr %literal94, i32 0, i32 0
  store ptr null, ptr %literal97, align 8
  %107 = getelementptr inbounds %Head, ptr %literal97, i32 0, i32 0
  %108 = load ptr, ptr %str, align 8
  %109 = load i32, ptr %len, align 4
  %sub = sub i32 %109, 1
  %sext100 = sext i32 %sub to i64
  %110 = add i64 %sext100, 1
  %size = sub i64 %110, 0
  %ptroffset101 = getelementptr inbounds i8, ptr %108, i64 0
  %111 = insertvalue %"char[]" undef, ptr %ptroffset101, 0
  %112 = insertvalue %"char[]" %111, i64 %size, 1
  store %"char[]" %112, ptr %value99, align 8
  %113 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %113, ptr %using103, align 8
  store i64 0, ptr %end_padding104, align 8
  %114 = load ptr, ptr %using103, align 8
  store ptr %114, ptr %using106, align 8
  %115 = load i64, ptr %end_padding104, align 8
  store i64 %115, ptr %end_padding107, align 8
  store i64 16, ptr %.anon108, align 8
  %116 = load ptr, ptr %using106, align 8
  %117 = load i64, ptr %.anon108, align 8
  %118 = load i64, ptr %end_padding107, align 8
  %add110 = add i64 %117, %118
  %119 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam109, ptr %116, i64 %add110) #3
  %not_err111 = icmp eq i64 %119, 0
  %120 = call i1 @llvm.expect.i1(i1 %not_err111, i1 true)
  br i1 %120, label %after_check113, label %assign_optional112

assign_optional112:                               ; preds = %if.exit89
  store i64 %119, ptr %error_var105, align 8
  br label %panic_block114

after_check113:                                   ; preds = %if.exit89
  %121 = load ptr, ptr %retparam109, align 8
  br label %noerr_block117

panic_block114:                                   ; preds = %assign_optional112
  %122 = insertvalue %any undef, ptr %error_var105, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  %124 = getelementptr inbounds [1 x %any], ptr %varargslots115, i64 0, i64 0
  store %any %123, ptr %124, align 16
  %125 = insertvalue %"any[]" undef, ptr %varargslots115, 0
  %126 = insertvalue %"any[]" %125, i64 1, 1
  store %"any[]" %126, ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg116)
  unreachable

noerr_block117:                                   ; preds = %after_check113
  store ptr %121, ptr %temp102, align 8
  %127 = load ptr, ptr %temp102, align 8
  %not118 = icmp eq ptr %127, null
  br i1 %not118, label %if.then119, label %if.exit120

if.then119:                                       ; preds = %noerr_block117
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var98, align 8
  br label %guard_block121

if.exit120:                                       ; preds = %noerr_block117
  %128 = load ptr, ptr %temp102, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %128, ptr align 8 %value99, i32 16, i1 false)
  br label %noerr_block122

guard_block121:                                   ; preds = %if.then119
  %129 = load i64, ptr %error_var98, align 8
  ret i64 %129

noerr_block122:                                   ; preds = %if.exit120
  %130 = load ptr, ptr %temp102, align 8
  store ptr %130, ptr %107, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value96, ptr align 8 %literal97, i32 8, i1 false)
  %131 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %131, ptr %using124, align 8
  store i64 0, ptr %end_padding125, align 8
  %132 = load ptr, ptr %using124, align 8
  store ptr %132, ptr %using127, align 8
  %133 = load i64, ptr %end_padding125, align 8
  store i64 %133, ptr %end_padding128, align 8
  store i64 8, ptr %.anon129, align 8
  %134 = load ptr, ptr %using127, align 8
  %135 = load i64, ptr %.anon129, align 8
  %136 = load i64, ptr %end_padding128, align 8
  %add131 = add i64 %135, %136
  %137 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam130, ptr %134, i64 %add131) #3
  %not_err132 = icmp eq i64 %137, 0
  %138 = call i1 @llvm.expect.i1(i1 %not_err132, i1 true)
  br i1 %138, label %after_check134, label %assign_optional133

assign_optional133:                               ; preds = %noerr_block122
  store i64 %137, ptr %error_var126, align 8
  br label %panic_block135

after_check134:                                   ; preds = %noerr_block122
  %139 = load ptr, ptr %retparam130, align 8
  br label %noerr_block138

panic_block135:                                   ; preds = %assign_optional133
  %140 = insertvalue %any undef, ptr %error_var126, 0
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1
  %142 = getelementptr inbounds [1 x %any], ptr %varargslots136, i64 0, i64 0
  store %any %141, ptr %142, align 16
  %143 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %144 = insertvalue %"any[]" %143, i64 1, 1
  store %"any[]" %144, ptr %indirectarg137, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"any[]") align 8 %indirectarg137)
  unreachable

noerr_block138:                                   ; preds = %after_check134
  store ptr %139, ptr %temp123, align 8
  %145 = load ptr, ptr %temp123, align 8
  %not139 = icmp eq ptr %145, null
  br i1 %not139, label %if.then140, label %if.exit141

if.then140:                                       ; preds = %noerr_block138
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var95, align 8
  br label %guard_block142

if.exit141:                                       ; preds = %noerr_block138
  %146 = load ptr, ptr %temp123, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %146, ptr align 8 %value96, i32 8, i1 false)
  br label %noerr_block143

guard_block142:                                   ; preds = %if.then140
  %147 = load i64, ptr %error_var95, align 8
  ret i64 %147

noerr_block143:                                   ; preds = %if.exit141
  %148 = load ptr, ptr %temp123, align 8
  store ptr %148, ptr %106, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal94, i32 8, i1 false)
  ret i64 0
}

; Function Attrs: nounwind
define { ptr, i8 } @test.buildSummary(ptr %0) #0 {
entry:
  %doc = alloca %Doc, align 8
  %literal = alloca %Summary, align 8
  store ptr %0, ptr %doc, align 8
  %1 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %1, align 8
  %2 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %2, align 8
  %3 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %ptrbool = icmp ne ptr %5, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %6 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %Head, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi ptr [ %9, %cond.lhs ], [ null, %cond.rhs ]
  store ptr %val, ptr %3, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 1, ptr %10, align 8
  %11 = load { ptr, i8 }, ptr %literal, align 8
  ret { ptr, i8 } %11
}

; Function Attrs: nounwind
define { ptr, i8 } @test.readAndBuildSummary(ptr %0, i64 %1) #0 {
entry:
  %url = alloca %"char[]", align 8
  %retparam = alloca %Doc, align 8
  %result = alloca %Summary, align 8
  %literal = alloca %Summary, align 8
  %taddr = alloca %Summary, align 8
  store ptr %0, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %3, align 8
  %4 = call i64 @test.readDoc(ptr %retparam, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %4, 0
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %5, label %after_check, label %else_block

after_check:                                      ; preds = %entry
  %6 = load ptr, ptr %retparam, align 8
  %7 = call { ptr, i8 } @test.buildSummary(ptr %6)
  store { ptr, i8 } %7, ptr %result, align 8
  %8 = load %Summary, ptr %result, align 8
  br label %phi_block

else_block:                                       ; preds = %entry
  %9 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %9, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %10, align 8
  %11 = load %Summary, ptr %literal, align 8
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check
  %val = phi %Summary [ %8, %after_check ], [ %11, %else_block ]
  store %Summary %val, ptr %taddr, align 8
  %12 = load { ptr, i8 }, ptr %taddr, align 8
  ret { ptr, i8 } %12
}

; Function Attrs: nounwind
define i64 @test.isTitleNonEmpty(ptr %0, ptr %1) #0 {
entry:
  %doc = alloca %Doc, align 8
  %head = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %doc, align 8
  %2 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %not = icmp eq ptr %3, null
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit:                                          ; preds = %entry
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %Head, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %head, align 8
  %8 = load ptr, ptr %head, align 8
  %not1 = icmp eq ptr %8, null
  br i1 %not1, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit3:                                         ; preds = %if.exit
  %9 = load ptr, ptr %head, align 8
  %10 = getelementptr inbounds %"char[]", ptr %9, i32 0, i32 1
  %11 = load i64, ptr %10, align 8
  %lt = icmp ult i64 0, %11
  %12 = zext i1 %lt to i8
  store i8 %12, ptr %0, align 1
  ret i64 0
}

; Function Attrs: nounwind
define i64 @test.readWhetherTitleNonEmpty(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i8, align 1
  %retparam1 = alloca %Doc, align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i64 @test.readDoc(ptr %retparam1, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %5, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %6, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8
  br label %err_retblock

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam1, align 8
  %8 = call i64 @test.isTitleNonEmpty(ptr %retparam, ptr %7)
  %not_err2 = icmp eq i64 %8, 0
  %9 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true)
  br i1 %9, label %after_check4, label %assign_optional3

assign_optional3:                                 ; preds = %after_check
  store i64 %8, ptr %reterr, align 8
  br label %err_retblock

after_check4:                                     ; preds = %after_check
  %10 = load i8, ptr %retparam, align 1
  store i8 %10, ptr %0, align 1
  ret i64 0

err_retblock:                                     ; preds = %assign_optional3, %assign_optional
  %11 = load i64, ptr %reterr, align 8
  ret i64 %11
}

; Function Attrs: nounwind
define ptr @test.bool_to_string(i8 zeroext %0) #0 {
entry:
  %1 = trunc i8 %0 to i1
  %ternary = select i1 %1, %"char[]" { ptr @.str.8, i64 4 }, %"char[]" { ptr @.str.9, i64 5 }
  %2 = extractvalue %"char[]" %ternary, 0
  ret ptr %2
}

; Function Attrs: nounwind
define ptr @test.nameFromError(i64 %0) #0 {
entry:
  %switch = alloca i64, align 8
  store i64 %0, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %1 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64), %1
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  ret ptr @.str.10

next_if:                                          ; preds = %switch.entry
  %eq1 = icmp eq i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64), %1
  br i1 %eq1, label %switch.case2, label %next_if3

switch.case2:                                     ; preds = %next_if
  ret ptr @.str.11

next_if3:                                         ; preds = %next_if
  %eq4 = icmp eq i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), %1
  br i1 %eq4, label %switch.case5, label %next_if6

switch.case5:                                     ; preds = %next_if3
  ret ptr @.str.12

next_if6:                                         ; preds = %next_if3
  br label %switch.default

switch.default:                                   ; preds = %next_if6
  ret ptr @.str.13
}

; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %URLS = alloca %"char[][]", align 8
  %literal = alloca [5 x %"char[]"], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %url = alloca %"char[]", align 8
  %summary = alloca %Summary, align 8
  %result = alloca %Summary, align 8
  %title_sure = alloca %"char[]", align 8
  %has_title = alloca i8, align 1
  %has_title.f = alloca i64, align 8
  %retparam = alloca i8, align 1
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %0 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 0
  store %"char[]" { ptr @.str.14, i64 4 }, ptr %0, align 8
  %1 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 1
  store %"char[]" { ptr @.str.15, i64 11 }, ptr %1, align 8
  %2 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 2
  store %"char[]" { ptr @.str.16, i64 13 }, ptr %2, align 8
  %3 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 3
  store %"char[]" { ptr @.str.17, i64 12 }, ptr %3, align 8
  %4 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 4
  store %"char[]" { ptr @.str.18, i64 4 }, ptr %4, align 8
  %5 = insertvalue %"char[][]" undef, ptr %literal, 0
  %6 = insertvalue %"char[][]" %5, i64 5, 1
  store %"char[][]" %6, ptr %URLS, align 8
  %7 = getelementptr inbounds %"char[][]", ptr %URLS, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  store i64 %8, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %phi_block16, %entry
  %9 = load i64, ptr %.anon1, align 8
  %10 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %9, %10
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %11 = getelementptr inbounds %"char[][]", ptr %URLS, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds %"char[]", ptr %12, i64 %13
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %url, ptr align 8 %ptroffset, i32 16, i1 false)
  %14 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %15 = load i64, ptr %14, align 8
  %trunc = trunc i64 %15 to i32
  %16 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 (ptr, ...) @printf(ptr @.str.19, i32 %trunc, ptr %17)
  %19 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %19, align 8
  %20 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %20, align 8
  %21 = call { ptr, i8 } @test.readAndBuildSummary(ptr %lo, i64 %hi)
  store { ptr, i8 } %21, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %summary, ptr align 8 %result, i32 16, i1 false)
  %22 = call i32 (ptr, ...) @printf(ptr @.str.20)
  %23 = load ptr, ptr @__stdoutp, align 8
  call void @test.Summary.print(ptr %summary, ptr %23)
  %24 = call i32 (ptr, ...) @printf(ptr @.str.21)
  %25 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %ptrbool = icmp ne ptr %26, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %loop.body
  %27 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = load %"char[]", ptr %28, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %loop.body
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %29, %cond.lhs ], [ zeroinitializer, %cond.rhs ]
  store %"char[]" %val, ptr %title_sure, align 8
  %30 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 1
  %31 = load i64, ptr %30, align 8
  %trunc2 = trunc i64 %31 to i32
  %32 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @.str.22, i32 %trunc2, ptr %33)
  %35 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo3 = load ptr, ptr %35, align 8
  %36 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi4 = load i64, ptr %36, align 8
  %37 = call i64 @test.readWhetherTitleNonEmpty(ptr %retparam, ptr %lo3, i64 %hi4)
  %not_err = icmp eq i64 %37, 0
  %38 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %38, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %cond.phi
  store i64 %37, ptr %has_title.f, align 8
  br label %after_assign

after_check:                                      ; preds = %cond.phi
  %39 = load i8, ptr %retparam, align 1
  store i8 %39, ptr %has_title, align 1
  store i64 0, ptr %has_title.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %assign_optional
  %optval = load i64, ptr %has_title.f, align 8
  %not_err5 = icmp eq i64 %optval, 0
  %40 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %40, label %after_check6, label %else_block

after_check6:                                     ; preds = %after_assign
  %41 = load i8, ptr %has_title, align 1
  %42 = call ptr @test.bool_to_string(i8 zeroext %41)
  br label %phi_block

else_block:                                       ; preds = %after_assign
  br label %testblock

testblock:                                        ; preds = %else_block
  %optval7 = load i64, ptr %has_title.f, align 8
  %not_err8 = icmp eq i64 %optval7, 0
  %43 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true)
  br i1 %43, label %after_check10, label %assign_optional9

assign_optional9:                                 ; preds = %testblock
  store i64 %optval7, ptr %f, align 8
  br label %end_block

after_check10:                                    ; preds = %testblock
  store i64 0, ptr %f, align 8
  br label %end_block

end_block:                                        ; preds = %after_check10, %assign_optional9
  %44 = load i64, ptr %f, align 8
  %neq = icmp ne i64 %44, 0
  br i1 %neq, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  %45 = load i64, ptr %f, align 8
  store i64 %45, ptr %blockret, align 8
  br label %expr_block.exit

if.exit:                                          ; preds = %end_block
  store i64 0, ptr %blockret, align 8
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %46 = load i64, ptr %blockret, align 8
  %47 = call ptr @test.nameFromError(i64 %46)
  br label %phi_block

phi_block:                                        ; preds = %expr_block.exit, %after_check6
  %val11 = phi ptr [ %42, %after_check6 ], [ %47, %expr_block.exit ]
  %optval12 = load i64, ptr %has_title.f, align 8
  %not_err13 = icmp eq i64 %optval12, 0
  %48 = call i1 @llvm.expect.i1(i1 %not_err13, i1 true)
  br i1 %48, label %after_check14, label %else_block15

after_check14:                                    ; preds = %phi_block
  %49 = load i8, ptr %has_title, align 1
  %50 = trunc i8 %49 to i1
  br label %phi_block16

else_block15:                                     ; preds = %phi_block
  br label %phi_block16

phi_block16:                                      ; preds = %else_block15, %after_check14
  %val17 = phi i1 [ %50, %after_check14 ], [ false, %else_block15 ]
  %ternary = select i1 %val17, ptr @.str.24, ptr @.str.25
  %51 = call i32 (ptr, ...) @printf(ptr @.str.23, ptr %val11, ptr %ternary)
  %52 = load i64, ptr %.anon1, align 8
  %add = add i64 %52, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret void
}
