// #target: macos-x64
module test;
import std;
import libc;

struct Doc { Head *head; }
struct Head { char[]* title; }

struct Summary
{
	char[]* title;
	bool ok;
}

fn void Summary.print(Summary *s, CFile out)
{
	// We don't have a native printf in C3 yet, so use libc,
	// which is not all that nice for the strings but...
	char[] title = s.title ? *s.title : "missing";
	libc::fprintf(out, "Summary({ .title = %.*s, .ok = %s})", (int)title.len, title.ptr, s.ok ? (char*)"true" : (char*)"false");
}

fn bool contains(char[] haystack, char[] needle)
{
	usz len = haystack.len;
	usz needle_len = needle.len;
	if (len < needle_len) return false;
	if (!needle_len) return true;
	len -= needle_len - 1;
	for (usz i = 0; i < len; i++)
	{
		if (libc::memcmp(&haystack[i], needle.ptr, needle_len) == 0)
		{
			return true;
		}
	}
	return false;
}

macro dupe(value)
{
	$typeof(&value) temp = malloc($sizeof(value));
	if (!temp) return ReadError.OUT_OF_MEMORY!;
	*temp = value;
	return temp;
}

fault ReadError
{
	BAD_READ,
	OUT_OF_MEMORY
}

fn Doc! readDoc(char[] url)
{
	if (contains(url, "fail")) return ReadError.BAD_READ!;
	if (contains(url, "head-missing")) return { .head = null };
	if (contains(url, "title-missing")) return { dupe(Head { .title = null })? };
	if (contains(url, "title-empty")) return { dupe(Head { .title = dupe((char[])"")? })? };
	// Not particularly elegant due to missing string functions.
	int len = libc::snprintf(null, 0, "Title of %.*s", (int)url.len, url.ptr);
	char* str = malloc(len + 1);
	if (!str) return ReadError.OUT_OF_MEMORY!;
	libc::snprintf(str, len + 1, "Title of %.*s", (int)url.len, url.ptr);
	return { dupe(Head { .title = dupe(str[..len - 1])? })? };
}

fn Summary buildSummary(Doc doc)
{
    return Summary {
        .title = doc.head ? doc.head.title : null,
        .ok = true,
    };
}

fn Summary readAndBuildSummary(char[] url)
{
	return buildSummary(readDoc(url)) ?? Summary { .title = null, .ok = false };
	/*
	// or
	Summary summary = buildSummary(readDoc(url));
	if (catch summary) return Summary { .title = null, .ok = false };
	return summary;
	// or
	Summary summary = buildSummary(readDoc(url));
	if (try summary) return summary;
	return Summary { .title = null, .ok = false };
	*/
}


fault TitleResult
{
	TITLE_MISSING
}

fn bool! isTitleNonEmpty(Doc doc)
{
	if (!doc.head) return TitleResult.TITLE_MISSING!;
	char[]* head = doc.head.title;
	if (!head) return TitleResult.TITLE_MISSING!;
	return (*head).len > 0;
}


fn bool! readWhetherTitleNonEmpty(char[] url)
{
    return isTitleNonEmpty(readDoc(url));
}

fn char* bool_to_string(bool b)
{
	return b ? "true" : "false";
}
fn char* nameFromError(anyerr e)
{
	switch (e)
	{
		case TitleResult.TITLE_MISSING:
			return "no title";
		case ReadError.BAD_READ:
			return "bad read";
		case ReadError.OUT_OF_MEMORY:
			return "out of memory";
		default:
			return "unknown error";
	}
}


fn void main()
{
    const char[][] URLS = { "good", "title-empty", "title-missing", "head-missing", "fail" };
    foreach (char[] url : URLS)
    {
        // Yes, it's pretty onerous to print strings for the moment in C3
        libc::printf(`Checking "https://%.*s/":` "\n", (int)url.len, url.ptr);
        Summary summary = readAndBuildSummary(url);
        libc::printf("  Summary: ");
        summary.print(libc::stdout());
        libc::printf("\n");
        char[] title_sure = summary.title ? *summary.title : "";
        libc::printf("  Title: %.*s\n", (int)title_sure.len, title_sure.ptr);
        bool! has_title = readWhetherTitleNonEmpty(url);
        // This looks a bit less than elegant, but as you see it's mostly due to having to
        // use printf here.
        libc::printf("  Has title: %s vs %s\n", bool_to_string(has_title) ?? nameFromError(catch(has_title)), (has_title ?? false) ? (char*)"true" : (char*)"false");
    }
}

/* #expect: test.ll

define void @test.Summary.print(ptr %0, ptr %1) #0 {
entry:
  %title = alloca %"char[]", align 8
  %2 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %ptrbool = icmp ne ptr %3, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %4 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = load %"char[]", ptr %5, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %6, %cond.lhs ], [ { ptr @.str.43, i64 7 }, %cond.rhs ]
  store %"char[]" %val, ptr %title, align 8
  %7 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  %uisitrunc = trunc i64 %8 to i32
  %9 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 1
  %12 = load i8, ptr %11, align 8
  %13 = trunc i8 %12 to i1
  %ternary = select i1 %13, ptr @.str.45, ptr @.str.46
  %14 = call i32 (ptr, ptr, ...) @fprintf(ptr %1, ptr @.str.44, i32 %uisitrunc, ptr %10, ptr %ternary)
  ret void
}

; Function Attrs: nounwind
define zeroext i8 @test.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 {
entry:
  %haystack = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %needle_len = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %haystack, align 8
  %ptroffset = getelementptr inbounds i64, ptr %haystack, i64 1
  store i64 %1, ptr %ptroffset, align 8
  store ptr %2, ptr %needle, align 8
  %ptroffset1 = getelementptr inbounds i64, ptr %needle, i64 1
  store i64 %3, ptr %ptroffset1, align 8
  %4 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  store i64 %5, ptr %len, align 8
  %6 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 1
  %7 = load i64, ptr %6, align 8
  store i64 %7, ptr %needle_len, align 8
  %8 = load i64, ptr %len, align 8
  %9 = load i64, ptr %needle_len, align 8
  %lt = icmp ult i64 %8, %9
  br i1 %lt, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i8 0

if.exit:                                          ; preds = %entry
  %10 = load i64, ptr %needle_len, align 8
  %not = icmp eq i64 %10, 0
  br i1 %not, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i8 1

if.exit3:                                         ; preds = %if.exit
  %11 = load i64, ptr %len, align 8
  %12 = load i64, ptr %needle_len, align 8
  %sub = sub i64 %12, 1
  %sub4 = sub i64 %11, %sub
  store i64 %sub4, ptr %len, align 8
  store i64 0, ptr %i, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %if.exit8, %if.exit3
  %13 = load i64, ptr %i, align 8
  %14 = load i64, ptr %len, align 8
  %lt5 = icmp ult i64 %13, %14
  br i1 %lt5, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %15 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = load i64, ptr %i, align 8
  %ptroffset6 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = load i64, ptr %needle_len, align 8
  %21 = call i32 @memcmp(ptr %ptroffset6, ptr %19, i64 %20)
  %eq = icmp eq i32 %21, 0
  br i1 %eq, label %if.then7, label %if.exit8

if.then7:                                         ; preds = %loop.body
  ret i8 1

if.exit8:                                         ; preds = %loop.body
  %22 = load i64, ptr %i, align 8
  %add = add i64 %22, 1
  store i64 %add, ptr %i, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret i8 0
}

; Function Attrs: nounwind
define i64 @test.readDoc(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %literal = alloca %Doc, align 8
  %reterr8 = alloca i64, align 8
  %literal9 = alloca %Doc, align 8
  %error_var = alloca i64, align 8
  %value = alloca %Head, align 8
  %literal10 = alloca %Head, align 8
  %temp = alloca ptr, align 8
  %using = alloca ptr, align 8
  %end_padding = alloca i64, align 8
  %error_var12 = alloca i64, align 8
  %using13 = alloca ptr, align 8
  %end_padding14 = alloca i64, align 8
  %.anon = alloca i64, align 8
  %blockret15 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %reterr23 = alloca i64, align 8
  %literal24 = alloca %Doc, align 8
  %error_var25 = alloca i64, align 8
  %value26 = alloca %Head, align 8
  %literal27 = alloca %Head, align 8
  %error_var28 = alloca i64, align 8
  %value29 = alloca %"char[]", align 8
  %temp30 = alloca ptr, align 8
  %using31 = alloca ptr, align 8
  %end_padding32 = alloca i64, align 8
  %error_var34 = alloca i64, align 8
  %using35 = alloca ptr, align 8
  %end_padding36 = alloca i64, align 8
  %.anon37 = alloca i64, align 8
  %blockret38 = alloca ptr, align 8
  %retparam39 = alloca ptr, align 8
  %temp52 = alloca ptr, align 8
  %using53 = alloca ptr, align 8
  %end_padding54 = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %using57 = alloca ptr, align 8
  %end_padding58 = alloca i64, align 8
  %.anon59 = alloca i64, align 8
  %blockret60 = alloca ptr, align 8
  %retparam61 = alloca ptr, align 8
  %len = alloca i32, align 4
  %str = alloca ptr, align 8
  %using75 = alloca ptr, align 8
  %end_padding76 = alloca i64, align 8
  %error_var77 = alloca i64, align 8
  %using78 = alloca ptr, align 8
  %end_padding79 = alloca i64, align 8
  %.anon80 = alloca i32, align 4
  %blockret82 = alloca ptr, align 8
  %retparam83 = alloca ptr, align 8
  %reterr97 = alloca i64, align 8
  %literal98 = alloca %Doc, align 8
  %error_var99 = alloca i64, align 8
  %value100 = alloca %Head, align 8
  %literal101 = alloca %Head, align 8
  %error_var102 = alloca i64, align 8
  %value103 = alloca %"char[]", align 8
  %temp105 = alloca ptr, align 8
  %using106 = alloca ptr, align 8
  %end_padding107 = alloca i64, align 8
  %error_var109 = alloca i64, align 8
  %using110 = alloca ptr, align 8
  %end_padding111 = alloca i64, align 8
  %.anon112 = alloca i64, align 8
  %blockret113 = alloca ptr, align 8
  %retparam114 = alloca ptr, align 8
  %temp127 = alloca ptr, align 8
  %using128 = alloca ptr, align 8
  %end_padding129 = alloca i64, align 8
  %error_var131 = alloca i64, align 8
  %using132 = alloca ptr, align 8
  %end_padding133 = alloca i64, align 8
  %.anon134 = alloca i64, align 8
  %blockret135 = alloca ptr, align 8
  %retparam136 = alloca ptr, align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i8 @test.contains(ptr %lo, i64 %hi, ptr @.str, i64 4)
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64)

if.exit:                                          ; preds = %entry
  %7 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo1 = load ptr, ptr %7, align 8
  %8 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi2 = load i64, ptr %8, align 8
  %9 = call i8 @test.contains(ptr %lo1, i64 %hi2, ptr @.str.3, i64 12)
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then3, label %if.exit4

if.then3:                                         ; preds = %if.exit
  %11 = getelementptr inbounds %Doc, ptr %literal, i32 0, i32 0
  store ptr null, ptr %11, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 8, i1 false)
  ret i64 0

if.exit4:                                         ; preds = %if.exit
  %12 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo5 = load ptr, ptr %12, align 8
  %13 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi6 = load i64, ptr %13, align 8
  %14 = call i8 @test.contains(ptr %lo5, i64 %hi6, ptr @.str.4, i64 13)
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then7, label %if.exit19

if.then7:                                         ; preds = %if.exit4
  %16 = getelementptr inbounds %Doc, ptr %literal9, i32 0, i32 0
  %17 = getelementptr inbounds %Head, ptr %literal10, i32 0, i32 0
  store ptr null, ptr %17, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %literal10, i32 8, i1 false)
  %18 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %18, ptr %using, align 8
  store i64 0, ptr %end_padding, align 8
  %19 = load ptr, ptr %using, align 8
  store ptr %19, ptr %using13, align 8
  %20 = load i64, ptr %end_padding, align 8
  store i64 %20, ptr %end_padding14, align 8
  store i64 8, ptr %.anon, align 8
  %21 = load ptr, ptr %using13, align 8
  %22 = load i64, ptr %.anon, align 8
  %23 = load i64, ptr %end_padding14, align 8
  %add = add i64 %22, %23
  %24 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam, ptr %21, i64 %add) #3
  %not_err = icmp eq i64 %24, 0
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %25, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %if.then7
  store i64 %24, ptr %error_var12, align 8
  br label %panic_block

after_check:                                      ; preds = %if.then7
  %26 = load ptr, ptr %retparam, align 8
  store ptr %26, ptr %blockret15, align 8
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %after_check
  %27 = load ptr, ptr %blockret15, align 8
  br label %noerr_block

panic_block:                                      ; preds = %assign_optional
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr @.panic_msg, i64 27, ptr @.file, i64 6, ptr @.func
  unreachable

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %27, ptr %temp, align 8
  %29 = load ptr, ptr %temp, align 8
  %not = icmp eq ptr %29, null
  br i1 %not, label %if.then16, label %if.exit17

if.then16:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var, align 8
  br label %guard_block

if.exit17:                                        ; preds = %noerr_block
  %30 = load ptr, ptr %temp, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %30, ptr align 8 %value, i32 8, i1 false)
  br label %noerr_block18

guard_block:                                      ; preds = %if.then16
  %31 = load i64, ptr %error_var, align 8
  ret i64 %31

noerr_block18:                                    ; preds = %if.exit17
  %32 = load ptr, ptr %temp, align 8
  store ptr %32, ptr %16, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal9, i32 8, i1 false)
  ret i64 0

if.exit19:                                        ; preds = %if.exit4
  %33 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo20 = load ptr, ptr %33, align 8
  %34 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi21 = load i64, ptr %34, align 8
  %35 = call i8 @test.contains(ptr %lo20, i64 %hi21, ptr @.str.5, i64 11)
  %36 = trunc i8 %35 to i1
  br i1 %36, label %if.then22, label %if.exit74

if.then22:                                        ; preds = %if.exit19
  %37 = getelementptr inbounds %Doc, ptr %literal24, i32 0, i32 0
  store ptr null, ptr %literal27, align 8
  %38 = getelementptr inbounds %Head, ptr %literal27, i32 0, i32 0
  store %"char[]" zeroinitializer, ptr %value29, align 8
  %39 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %39, ptr %using31, align 8
  store i64 0, ptr %end_padding32, align 8
  %40 = load ptr, ptr %using31, align 8
  store ptr %40, ptr %using35, align 8
  %41 = load i64, ptr %end_padding32, align 8
  store i64 %41, ptr %end_padding36, align 8
  store i64 16, ptr %.anon37, align 8
  %42 = load ptr, ptr %using35, align 8
  %43 = load i64, ptr %.anon37, align 8
  %44 = load i64, ptr %end_padding36, align 8
  %add40 = add i64 %43, %44
  %45 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam39, ptr %42, i64 %add40) #3
  %not_err41 = icmp eq i64 %45, 0
  %46 = call i1 @llvm.expect.i1(i1 %not_err41, i1 true)
  br i1 %46, label %after_check43, label %assign_optional42

assign_optional42:                                ; preds = %if.then22
  store i64 %45, ptr %error_var34, align 8
  br label %panic_block45

after_check43:                                    ; preds = %if.then22
  %47 = load ptr, ptr %retparam39, align 8
  store ptr %47, ptr %blockret38, align 8
  br label %expr_block.exit44

expr_block.exit44:                                ; preds = %after_check43
  %48 = load ptr, ptr %blockret38, align 8
  br label %noerr_block46

panic_block45:                                    ; preds = %assign_optional42
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49(ptr @.panic_msg.7, i64 27, ptr @.file.8, i64 6, ptr @.func.9, i64 7
  unreachable

noerr_block46:                                    ; preds = %expr_block.exit44
  store ptr %48, ptr %temp30, align 8
  %50 = load ptr, ptr %temp30, align 8
  %not47 = icmp eq ptr %50, null
  br i1 %not47, label %if.then48, label %if.exit49

if.then48:                                        ; preds = %noerr_block46
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var28, align 8
  br label %guard_block50

if.exit49:                                        ; preds = %noerr_block46
  %51 = load ptr, ptr %temp30, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %51, ptr align 8 %value29, i32 16, i1 false)
  br label %noerr_block51

guard_block50:                                    ; preds = %if.then48
  %52 = load i64, ptr %error_var28, align 8
  ret i64 %52

noerr_block51:                                    ; preds = %if.exit49
  %53 = load ptr, ptr %temp30, align 8
  store ptr %53, ptr %38, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value26, ptr align 8 %literal27, i32 8, i1 false)
  %54 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %54, ptr %using53, align 8
  store i64 0, ptr %end_padding54, align 8
  %55 = load ptr, ptr %using53, align 8
  store ptr %55, ptr %using57, align 8
  %56 = load i64, ptr %end_padding54, align 8
  store i64 %56, ptr %end_padding58, align 8
  store i64 8, ptr %.anon59, align 8
  %57 = load ptr, ptr %using57, align 8
  %58 = load i64, ptr %.anon59, align 8
  %59 = load i64, ptr %end_padding58, align 8
  %add62 = add i64 %58, %59
  %60 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam61, ptr %57, i64 %add62) #3
  %not_err63 = icmp eq i64 %60, 0
  %61 = call i1 @llvm.expect.i1(i1 %not_err63, i1 true)
  br i1 %61, label %after_check65, label %assign_optional64

assign_optional64:                                ; preds = %noerr_block51
  store i64 %60, ptr %error_var56, align 8
  br label %panic_block67

after_check65:                                    ; preds = %noerr_block51
  %62 = load ptr, ptr %retparam61, align 8
  store ptr %62, ptr %blockret60, align 8
  br label %expr_block.exit66

expr_block.exit66:                                ; preds = %after_check65
  %63 = load ptr, ptr %blockret60, align 8
  br label %noerr_block68

panic_block67:                                    ; preds = %assign_optional64
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr @.panic_msg.10, i64 27, ptr @.file.11, i64 6, ptr @.func.12, i64 7
  unreachable

noerr_block68:                                    ; preds = %expr_block.exit66
  store ptr %63, ptr %temp52, align 8
  %65 = load ptr, ptr %temp52, align 8
  %not69 = icmp eq ptr %65, null
  br i1 %not69, label %if.then70, label %if.exit71

if.then70:                                        ; preds = %noerr_block68
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var25, align 8
  br label %guard_block72

if.exit71:                                        ; preds = %noerr_block68
  %66 = load ptr, ptr %temp52, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %66, ptr align 8 %value26, i32 8, i1 false)
  br label %noerr_block73

guard_block72:                                    ; preds = %if.then70
  %67 = load i64, ptr %error_var25, align 8
  ret i64 %67

noerr_block73:                                    ; preds = %if.exit71
  %68 = load ptr, ptr %temp52, align 8
  store ptr %68, ptr %37, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal24, i32 8, i1 false)
  ret i64 0

if.exit74:                                        ; preds = %if.exit19
  %69 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %70 = load i64, ptr %69, align 8
  %uisitrunc = trunc i64 %70 to i32
  %71 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8
  %73 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr null, i64 0, ptr @.str.13, i32 %uisitrunc, ptr %72)
  store i32 %73, ptr %len, align 4
  %74 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %74, ptr %using75, align 8
  store i64 0, ptr %end_padding76, align 8
  %75 = load ptr, ptr %using75, align 8
  store ptr %75, ptr %using78, align 8
  %76 = load i64, ptr %end_padding76, align 8
  store i64 %76, ptr %end_padding79, align 8
  %77 = load i32, ptr %len, align 4
  %add81 = add i32 %77, 1
  store i32 %add81, ptr %.anon80, align 4
  %78 = load ptr, ptr %using78, align 8
  %79 = load i32, ptr %.anon80, align 4
  %siuiext = sext i32 %79 to i64
  %80 = load i64, ptr %end_padding79, align 8
  %add84 = add i64 %siuiext, %80
  %81 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam83, ptr %78, i64 %add84) #3
  %not_err85 = icmp eq i64 %81, 0
  %82 = call i1 @llvm.expect.i1(i1 %not_err85, i1 true)
  br i1 %82, label %after_check87, label %assign_optional86

assign_optional86:                                ; preds = %if.exit74
  store i64 %81, ptr %error_var77, align 8
  br label %panic_block89

after_check87:                                    ; preds = %if.exit74
  %83 = load ptr, ptr %retparam83, align 8
  store ptr %83, ptr %blockret82, align 8
  br label %expr_block.exit88

expr_block.exit88:                                ; preds = %after_check87
  %84 = load ptr, ptr %blockret82, align 8
  br label %noerr_block90

panic_block89:                                    ; preds = %assign_optional86
  %85 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %85(ptr @.panic_msg.14, i64 27, ptr @.file.15, i64 6, ptr @.func.16
  unreachable

noerr_block90:                                    ; preds = %expr_block.exit88
  store ptr %84, ptr %str, align 8
  %86 = load ptr, ptr %str, align 8
  %not91 = icmp eq ptr %86, null
  br i1 %not91, label %if.then92, label %if.exit93

if.then92:                                        ; preds = %noerr_block90
  ret i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64)

if.exit93:                                        ; preds = %noerr_block90
  %87 = load ptr, ptr %str, align 8
  %88 = load i32, ptr %len, align 4
  %siuiext94 = sext i32 %88 to i64
  %add95 = add i64 %siuiext94, 1
  %89 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %90 = load i64, ptr %89, align 8
  %uisitrunc96 = trunc i64 %90 to i32
  %91 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr %87, i64 %add95, ptr @.str.17, i32 %uisitrunc96, ptr %92)
  %94 = getelementptr inbounds %Doc, ptr %literal98, i32 0, i32 0
  store ptr null, ptr %literal101, align 8
  %95 = getelementptr inbounds %Head, ptr %literal101, i32 0, i32 0
  %96 = load ptr, ptr %str, align 8
  %97 = load i32, ptr %len, align 4
  %sub = sub i32 %97, 1
  %sisiext = sext i32 %sub to i64
  %98 = add i64 %sisiext, 1
  %size = sub i64 %98, 0
  %ptroffset104 = getelementptr inbounds i8, ptr %96, i64 0
  %99 = insertvalue %"char[]" undef, ptr %ptroffset104, 0
  %100 = insertvalue %"char[]" %99, i64 %size, 1
  store %"char[]" %100, ptr %value103, align 8
  %101 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %101, ptr %using106, align 8
  store i64 0, ptr %end_padding107, align 8
  %102 = load ptr, ptr %using106, align 8
  store ptr %102, ptr %using110, align 8
  %103 = load i64, ptr %end_padding107, align 8
  store i64 %103, ptr %end_padding111, align 8
  store i64 16, ptr %.anon112, align 8
  %104 = load ptr, ptr %using110, align 8
  %105 = load i64, ptr %.anon112, align 8
  %106 = load i64, ptr %end_padding111, align 8
  %add115 = add i64 %105, %106
  %107 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam114, ptr %104, i64 %add115) #3
  %not_err116 = icmp eq i64 %107, 0
  %108 = call i1 @llvm.expect.i1(i1 %not_err116, i1 true)
  br i1 %108, label %after_check118, label %assign_optional117

assign_optional117:                               ; preds = %if.exit93
  store i64 %107, ptr %error_var109, align 8
  br label %panic_block120

after_check118:                                   ; preds = %if.exit93
  %109 = load ptr, ptr %retparam114, align 8
  store ptr %109, ptr %blockret113, align 8
  br label %expr_block.exit119

expr_block.exit119:                               ; preds = %after_check118
  %110 = load ptr, ptr %blockret113, align 8
  br label %noerr_block121

panic_block120:                                   ; preds = %assign_optional117
  %111 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %111(ptr @.panic_msg.18, i64 27, ptr @.file.19, i64 6, ptr @.func.20
  unreachable

noerr_block121:                                   ; preds = %expr_block.exit119
  store ptr %110, ptr %temp105, align 8
  %112 = load ptr, ptr %temp105, align 8
  %not122 = icmp eq ptr %112, null
  br i1 %not122, label %if.then123, label %if.exit124

if.then123:                                       ; preds = %noerr_block121
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var102, align 8
  br label %guard_block125

if.exit124:                                       ; preds = %noerr_block121
  %113 = load ptr, ptr %temp105, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %113, ptr align 8 %value103, i32 16, i1 false)
  br label %noerr_block126

guard_block125:                                   ; preds = %if.then123
  %114 = load i64, ptr %error_var102, align 8
  ret i64 %114

noerr_block126:                                   ; preds = %if.exit124
  %115 = load ptr, ptr %temp105, align 8
  store ptr %115, ptr %95, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value100, ptr align 8 %literal101, i32 8, i1 false)
  %116 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %116, ptr %using128, align 8
  store i64 0, ptr %end_padding129, align 8
  %117 = load ptr, ptr %using128, align 8
  store ptr %117, ptr %using132, align 8
  %118 = load i64, ptr %end_padding129, align 8
  store i64 %118, ptr %end_padding133, align 8
  store i64 8, ptr %.anon134, align 8
  %119 = load ptr, ptr %using132, align 8
  %120 = load i64, ptr %.anon134, align 8
  %121 = load i64, ptr %end_padding133, align 8
  %add137 = add i64 %120, %121
  %122 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam136, ptr %119, i64 %add137) #3
  %not_err138 = icmp eq i64 %122, 0
  %123 = call i1 @llvm.expect.i1(i1 %not_err138, i1 true)
  br i1 %123, label %after_check140, label %assign_optional139

assign_optional139:                               ; preds = %noerr_block126
  store i64 %122, ptr %error_var131, align 8
  br label %panic_block142

after_check140:                                   ; preds = %noerr_block126
  %124 = load ptr, ptr %retparam136, align 8
  store ptr %124, ptr %blockret135, align 8
  br label %expr_block.exit141

expr_block.exit141:                               ; preds = %after_check140
  %125 = load ptr, ptr %blockret135, align 8
  br label %noerr_block143

panic_block142:                                   ; preds = %assign_optional139
  %126 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %126(ptr @.panic_msg.21, i64 27, ptr @.file.22, i64 6, ptr @.func.23
  unreachable

noerr_block143:                                   ; preds = %expr_block.exit141
  store ptr %125, ptr %temp127, align 8
  %127 = load ptr, ptr %temp127, align 8
  %not144 = icmp eq ptr %127, null
  br i1 %not144, label %if.then145, label %if.exit146

if.then145:                                       ; preds = %noerr_block143
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var99, align 8
  br label %guard_block147

if.exit146:                                       ; preds = %noerr_block143
  %128 = load ptr, ptr %temp127, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %128, ptr align 8 %value100, i32 8, i1 false)
  br label %noerr_block148

guard_block147:                                   ; preds = %if.then145
  %129 = load i64, ptr %error_var99, align 8
  ret i64 %129

noerr_block148:                                   ; preds = %if.exit146
  %130 = load ptr, ptr %temp127, align 8
  store ptr %130, ptr %94, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal98, i32 8, i1 false)
  ret i64 0
}

; Function Attrs: nounwind
define { ptr, i8 } @test.buildSummary(ptr %0) #0 {
entry:
  %doc = alloca %Doc, align 8
  %literal = alloca %Summary, align 8
  store ptr %0, ptr %doc, align 8
  %1 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %1, align 8
  %2 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %2, align 8
  %3 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %ptrbool = icmp ne ptr %5, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %6 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %Head, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi ptr [ %9, %cond.lhs ], [ null, %cond.rhs ]
  store ptr %val, ptr %3, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 1, ptr %10, align 8
  %11 = load { ptr, i8 }, ptr %literal, align 8
  ret { ptr, i8 } %11
}

; Function Attrs: nounwind
define { ptr, i8 } @test.readAndBuildSummary(ptr %0, i64 %1) #0 {
entry:
  %url = alloca %"char[]", align 8
  %retparam = alloca %Doc, align 8
  %result = alloca %Summary, align 8
  %literal = alloca %Summary, align 8
  %taddr = alloca %Summary, align 8
  store ptr %0, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %3, align 8
  %4 = call i64 @test.readDoc(ptr %retparam, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %4, 0
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %5, label %after_check, label %else_block

after_check:                                      ; preds = %entry
  %6 = load ptr, ptr %retparam, align 8
  %7 = call { ptr, i8 } @test.buildSummary(ptr %6)
  store { ptr, i8 } %7, ptr %result, align 8
  %8 = load %Summary, ptr %result, align 8
  br label %phi_block

else_block:                                       ; preds = %entry
  %9 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %9, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %10, align 8
  %11 = load %Summary, ptr %literal, align 8
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check
  %val = phi %Summary [ %8, %after_check ], [ %11, %else_block ]
  store %Summary %val, ptr %taddr, align 8
  %12 = load { ptr, i8 }, ptr %taddr, align 8
  ret { ptr, i8 } %12
}

; Function Attrs: nounwind
define i64 @test.isTitleNonEmpty(ptr %0, ptr %1) #0 {
entry:
  %doc = alloca %Doc, align 8
  %head = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %doc, align 8
  %2 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %not = icmp eq ptr %3, null
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit:                                          ; preds = %entry
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %Head, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %head, align 8
  %8 = load ptr, ptr %head, align 8
  %not1 = icmp eq ptr %8, null
  br i1 %not1, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit3:                                         ; preds = %if.exit
  %9 = load ptr, ptr %head, align 8
  %10 = getelementptr inbounds %"char[]", ptr %9, i32 0, i32 1
  %11 = load i64, ptr %10, align 8
  %lt = icmp ult i64 0, %11
  %12 = zext i1 %lt to i8
  store i8 %12, ptr %0, align 1
  ret i64 0
}

; Function Attrs: nounwind
define i64 @test.readWhetherTitleNonEmpty(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i8, align 1
  %retparam1 = alloca %Doc, align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i64 @test.readDoc(ptr %retparam1, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %5, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %6, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8
  br label %err_retblock

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam1, align 8
  %8 = call i64 @test.isTitleNonEmpty(ptr %retparam, ptr %7)
  %not_err2 = icmp eq i64 %8, 0
  %9 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true)
  br i1 %9, label %after_check4, label %assign_optional3

assign_optional3:                                 ; preds = %after_check
  store i64 %8, ptr %reterr, align 8
  br label %err_retblock

after_check4:                                     ; preds = %after_check
  %10 = load i8, ptr %retparam, align 1
  store i8 %10, ptr %0, align 1
  ret i64 0

err_retblock:                                     ; preds = %assign_optional3, %assign_optional
  %11 = load i64, ptr %reterr, align 8
  ret i64 %11
}

; Function Attrs: nounwind
define ptr @test.bool_to_string(i8 zeroext %0) #0 {
entry:
  %1 = trunc i8 %0 to i1
  %ternary = select i1 %1, %"char[]" { ptr @.str.24, i64 4 }, %"char[]" { ptr @.str.25, i64 5 }
  %2 = extractvalue %"char[]" %ternary, 0
  ret ptr %2
}

; Function Attrs: nounwind
define ptr @test.nameFromError(i64 %0) #0 {
entry:
  %switch = alloca i64, align 8
  store i64 %0, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %1 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64), %1
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  ret ptr @.str.26

next_if:                                          ; preds = %switch.entry
  %eq1 = icmp eq i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64), %1
  br i1 %eq1, label %switch.case2, label %next_if3

switch.case2:                                     ; preds = %next_if
  ret ptr @.str.27

next_if3:                                         ; preds = %next_if
  %eq4 = icmp eq i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), %1
  br i1 %eq4, label %switch.case5, label %next_if6

switch.case5:                                     ; preds = %next_if3
  ret ptr @.str.28

next_if6:                                         ; preds = %next_if3
  br label %switch.default

switch.default:                                   ; preds = %next_if6
  ret ptr @.str.29
}

; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %URLS = alloca %"char[][]", align 8
  %literal = alloca [5 x %"char[]"], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %url = alloca %"char[]", align 8
  %summary = alloca %Summary, align 8
  %result = alloca %Summary, align 8
  %title_sure = alloca %"char[]", align 8
  %has_title = alloca i8, align 1
  %has_title.f = alloca i64, align 8
  %retparam = alloca i8, align 1
  %0 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 0
  store %"char[]" { ptr @.str.30, i64 4 }, ptr %0, align 8
  %1 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 1
  store %"char[]" { ptr @.str.31, i64 11 }, ptr %1, align 8
  %2 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 2
  store %"char[]" { ptr @.str.32, i64 13 }, ptr %2, align 8
  %3 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 3
  store %"char[]" { ptr @.str.33, i64 12 }, ptr %3, align 8
  %4 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 4
  store %"char[]" { ptr @.str.34, i64 4 }, ptr %4, align 8
  %5 = insertvalue %"char[][]" undef, ptr %literal, 0
  %6 = insertvalue %"char[][]" %5, i64 5, 1
  store %"char[][]" %6, ptr %URLS, align 8
  %7 = getelementptr inbounds %"char[][]", ptr %URLS, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  store i64 %8, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %phi_block12, %entry
  %9 = load i64, ptr %.anon1, align 8
  %10 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %9, %10
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %11 = getelementptr inbounds %"char[][]", ptr %URLS, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds %"char[]", ptr %12, i64 %13
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %url, ptr align 8 %ptroffset, i32 16, i1 false)
  %14 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %15 = load i64, ptr %14, align 8
  %uisitrunc = trunc i64 %15 to i32
  %16 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 (ptr, ...) @printf(ptr @.str.35, i32 %uisitrunc, ptr %17)
  %19 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %19, align 8
  %20 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %20, align 8
  %21 = call { ptr, i8 } @test.readAndBuildSummary(ptr %lo, i64 %hi)
  store { ptr, i8 } %21, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %summary, ptr align 8 %result, i32 16, i1 false)
  %22 = call i32 (ptr, ...) @printf(ptr @.str.36)
  %23 = load ptr, ptr @__stdoutp, align 8
  call void @test.Summary.print(ptr %summary, ptr %23)
  %24 = call i32 (ptr, ...) @printf(ptr @.str.37)
  %25 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %ptrbool = icmp ne ptr %26, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %loop.body
  %27 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = load %"char[]", ptr %28, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %loop.body
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %29, %cond.lhs ], [ zeroinitializer, %cond.rhs ]
  store %"char[]" %val, ptr %title_sure, align 8
  %30 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 1
  %31 = load i64, ptr %30, align 8
  %uisitrunc2 = trunc i64 %31 to i32
  %32 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @.str.39, i32 %uisitrunc2, ptr %33)
  %35 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo3 = load ptr, ptr %35, align 8
  %36 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi4 = load i64, ptr %36, align 8
  %37 = call i64 @test.readWhetherTitleNonEmpty(ptr %retparam, ptr %lo3, i64 %hi4)
  %not_err = icmp eq i64 %37, 0
  %38 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %38, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %cond.phi
  store i64 %37, ptr %has_title.f, align 8
  br label %after_assign

after_check:                                      ; preds = %cond.phi
  %39 = load i8, ptr %retparam, align 1
  store i8 %39, ptr %has_title, align 1
  store i64 0, ptr %has_title.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %assign_optional
  %optval = load i64, ptr %has_title.f, align 8
  %not_err5 = icmp eq i64 %optval, 0
  %40 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %40, label %after_check6, label %else_block

after_check6:                                     ; preds = %after_assign
  %41 = load i8, ptr %has_title, align 1
  %42 = call ptr @test.bool_to_string(i8 zeroext %41)
  br label %phi_block

else_block:                                       ; preds = %after_assign
  %43 = load i64, ptr %has_title.f, align 8
  %44 = call ptr @test.nameFromError(i64 %43)
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check6
  %val7 = phi ptr [ %42, %after_check6 ], [ %44, %else_block ]
  %optval8 = load i64, ptr %has_title.f, align 8
  %not_err9 = icmp eq i64 %optval8, 0
  %45 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true)
  br i1 %45, label %after_check10, label %else_block11

after_check10:                                    ; preds = %phi_block
  %46 = load i8, ptr %has_title, align 1
  %47 = trunc i8 %46 to i1
  br label %phi_block12

else_block11:                                     ; preds = %phi_block
  br label %phi_block12

phi_block12:                                      ; preds = %else_block11, %after_check10
  %val13 = phi i1 [ %47, %after_check10 ], [ false, %else_block11 ]
  %ternary = select i1 %val13, ptr @.str.41, ptr @.str.42
  %48 = call i32 (ptr, ...) @printf(ptr @.str.40, ptr %val7, ptr %ternary)
  %49 = load i64, ptr %.anon1, align 8
  %add = add i64 %49, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret void
}
