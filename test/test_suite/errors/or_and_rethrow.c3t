// #target: macos-x64
module foo;
import std::io;

fault Foo { ABC }

fn void blurb() { io::println("Blurb");}

macro int! tester()
{
	defer blurb();
	return Foo.ABC!;
}
fn void! test(int x)
{
	io::printfln("test(%d)", x);
	if (x || (tester()?)) io::println("Ok1");
	io::println("Test next");
	if (tester()? || x) io::println("Ok?");
	io::println("Test ok");
}

fn void! test2(int x)
{
	io::printfln("test2(%d)", x);
	if (x && (tester()?)) io::println("Ok1");
	io::println("Test next");
	if ((tester()?) && x) io::println("Ok?");
	io::println("Test ok");
}

fn void main()
{
	anyerr a = test(0);
	anyerr b = test(1);
	anyerr c = test2(0);
	anyerr d = test2(1);
}

/* #expect: foo.ll

define i64 @foo_test(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca %"variant[]", align 8
  %error_var = alloca i64, align 8
  %blockret = alloca i32, align 4
  %error_var2 = alloca i64, align 8
  %blockret3 = alloca i32, align 4
  %reterr = alloca i64, align 8
  store i32 %0, i32* %taddr, align 4
  %1 = bitcast i32* %taddr to i8*
  %2 = insertvalue %variant undef, i8* %1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %3, %variant* %4, align 16
  %5 = bitcast [1 x %variant]* %varargslots to %variant*
  %6 = insertvalue %"variant[]" undef, %variant* %5, 0
  %7 = insertvalue %"variant[]" %6, i64 1, 1
  store %"variant[]" %7, %"variant[]"* %taddr1, align 8
  %8 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %lo = load i8*, i8** %9, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %hi = load i64, i64* %10, align 8
  %11 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i64 8, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %11, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %intbool = icmp ne i32 %0, 0
  br i1 %intbool, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %voiderr
  store i64 ptrtoint (%.fault* @"foo_Foo$ABC" to i64), i64* %error_var, align 8
  br label %opt_block_cleanup

opt_block_cleanup:                                ; preds = %or.rhs
  call void @foo_blurb()
  br label %guard_block

guard_block:                                      ; preds = %opt_block_cleanup
  %12 = load i64, i64* %error_var, align 8
  ret i64 %12

or.phi:                                           ; preds = %voiderr
  br label %if.then

if.then:                                          ; preds = %or.phi
  %13 = call i32 @std_io_println(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)) #1
  br label %if.exit

if.exit:                                          ; preds = %if.then
  %14 = call i32 @std_io_println(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0)) #1
  store i64 ptrtoint (%.fault* @"foo_Foo$ABC" to i64), i64* %error_var2, align 8
  br label %opt_block_cleanup4

opt_block_cleanup4:                               ; preds = %if.exit
  call void @foo_blurb()
  br label %guard_block5

guard_block5:                                     ; preds = %opt_block_cleanup4
  %15 = load i64, i64* %error_var2, align 8
  ret i64 %15

if.exit7:                                         ; No predecessors!
  %16 = call i32 @std_io_println(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0)) #1
  ret i64 0
}

; Function Attrs: nounwind
define i64 @foo_test2(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca %"variant[]", align 8
  %error_var = alloca i64, align 8
  %blockret = alloca i32, align 4
  %error_var2 = alloca i64, align 8
  %blockret3 = alloca i32, align 4
  %reterr = alloca i64, align 8
  store i32 %0, i32* %taddr, align 4
  %1 = bitcast i32* %taddr to i8*
  %2 = insertvalue %variant undef, i8* %1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %3, %variant* %4, align 16
  %5 = bitcast [1 x %variant]* %varargslots to %variant*
  %6 = insertvalue %"variant[]" undef, %variant* %5, 0
  %7 = insertvalue %"variant[]" %6, i64 1, 1
  store %"variant[]" %7, %"variant[]"* %taddr1, align 8
  %8 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %lo = load i8*, i8** %9, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %hi = load i64, i64* %10, align 8
  %11 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i64 9, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %11, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %intbool = icmp ne i32 %0, 0
  br i1 %intbool, label %and.rhs, label %and.phi

and.rhs:                                          ; preds = %voiderr
  store i64 ptrtoint (%.fault* @"foo_Foo$ABC" to i64), i64* %error_var, align 8
  br label %opt_block_cleanup

opt_block_cleanup:                                ; preds = %and.rhs
  call void @foo_blurb()
  br label %guard_block

guard_block:                                      ; preds = %opt_block_cleanup
  %12 = load i64, i64* %error_var, align 8
  ret i64 %12

and.phi:                                          ; preds = %voiderr
  br label %if.exit

if.exit:                                          ; preds = %and.phi
  %13 = call i32 @std_io_println(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0)) #1
  store i64 ptrtoint (%.fault* @"foo_Foo$ABC" to i64), i64* %error_var2, align 8
  br label %opt_block_cleanup4

opt_block_cleanup4:                               ; preds = %if.exit
  call void @foo_blurb()
  br label %guard_block5

guard_block5:                                     ; preds = %opt_block_cleanup4
  %14 = load i64, i64* %error_var2, align 8
  ret i64 %14

if.exit6:                                         ; No predecessors!
  %15 = call i32 @std_io_println(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0)) #1
  ret i64 0
}
