// #target: macos-x64

module test;
struct Foo
{
    int x, y;
}

fault MyErr
{
    FOO
}

extern fn int printf(char *c, ...);

fn void main()
{
    int! z = 2;
    Foo*! w = &&Foo{ z, 0 };
    printf("%d\n", w.x);
    z = MyErr.FOO!;
    w = &&Foo{ z, 0 };
    printf("Not visible: %d\n", w.x);
}

/* #expect: test.ll

%Foo = type { i32, i32 }

@"ct$test_Foo" = linkonce constant %.introspect { i8 10, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"test_MyErr$FOO" = linkonce constant %.fault { i64 ptrtoint (ptr @"ct$test_MyErr" to i64), %"char[]" { ptr @.fault, i64 3 } }, align 8
@"ct$test_MyErr" = linkonce constant %.introspect { i8 9, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"Not visible: %d\0A\00", align 1

; Function Attrs: nounwind
declare i32 @printf(ptr, ...) #0

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %z = alloca i32, align 4
  %z.f = alloca i64, align 8
  %w = alloca ptr, align 8
  %w.f = alloca i64, align 8
  %literal = alloca %Foo, align 4
  %literal5 = alloca %Foo, align 4
  store i32 2, ptr %z, align 4
  store i64 0, ptr %z.f, align 8
  %0 = getelementptr inbounds %Foo, ptr %literal, i32 0, i32 0
  %optval = load i64, ptr %z.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %optval, ptr %w.f, align 8
  br label %after_assign

after_check:                                      ; preds = %entry
  %1 = load i32, ptr %z, align 4
  store i32 %1, ptr %0, align 4
  %2 = getelementptr inbounds %Foo, ptr %literal, i32 0, i32 1
  store i32 0, ptr %2, align 4
  store ptr %literal, ptr %w, align 8
  store i64 0, ptr %w.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %assign_optional
  %optval1 = load i64, ptr %w.f, align 8
  %not_err2 = icmp eq i64 %optval1, 0
  br i1 %not_err2, label %after_check3, label %voiderr

after_check3:                                     ; preds = %after_assign
  %3 = load ptr, ptr %w, align 8
  %4 = getelementptr inbounds %Foo, ptr %3, i32 0, i32 0
  %5 = load i32, ptr %4, align 4
  %6 = call i32 (ptr, ...) @printf(ptr @.str, i32 %5)
  br label %voiderr

voiderr:                                          ; preds = %after_check3, %after_assign
  store i64 ptrtoint (ptr @"test_MyErr$FOO" to i64), ptr %z.f, align 8
  br label %after_check4

after_check4:                                     ; preds = %voiderr
  %7 = getelementptr inbounds %Foo, ptr %literal5, i32 0, i32 0
  %optval6 = load i64, ptr %z.f, align 8
  %not_err7 = icmp eq i64 %optval6, 0
  br i1 %not_err7, label %after_check9, label %assign_optional8

assign_optional8:                                 ; preds = %after_check4
  store i64 %optval6, ptr %w.f, align 8
  br label %after_assign10

after_check9:                                     ; preds = %after_check4
  %8 = load i32, ptr %z, align 4
  store i32 %8, ptr %7, align 4
  %9 = getelementptr inbounds %Foo, ptr %literal5, i32 0, i32 1
  store i32 0, ptr %9, align 4
  store ptr %literal5, ptr %w, align 8
  store i64 0, ptr %w.f, align 8
  br label %after_assign10

after_assign10:                                   ; preds = %after_check9, %assign_optional8
  %optval11 = load i64, ptr %w.f, align 8
  %not_err12 = icmp eq i64 %optval11, 0
  br i1 %not_err12, label %after_check13, label %voiderr14

after_check13:                                    ; preds = %after_assign10
  %10 = load ptr, ptr %w, align 8
  %11 = getelementptr inbounds %Foo, ptr %10, i32 0, i32 0
  %12 = load i32, ptr %11, align 4
  %13 = call i32 (ptr, ...) @printf(ptr @.str.1, i32 %12)
  br label %voiderr14

voiderr14:                                        ; preds = %after_check13, %after_assign10
  ret void
}