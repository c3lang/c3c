// #skip
// #target: x64_darwin

extern func char*! readLine();
extern func int! atoi(char*);

extern func int printf(char* fmt, ...);

func void main()
{
    tryx (int val = atoi(readLine()))
    {
            printf("You typed the number %d\n", val);
            return;
    }
    printf("You didn't type an integer :(\n");
}

// #expect: try_with_chained_unwrap.ll

entry:
  %val = alloca i32, align 4
  %retparam = alloca i32, align 4
  %retparam1 = alloca i8*, align 8
  %result = alloca %error_union, align 8
  %result2 = alloca %error_union, align 8
  %0 = call { i64, i64 } @readLine(i8** %retparam1)
  %1 = bitcast %error_union* %result to { i64, i64 }*
  store { i64, i64 } %0, { i64, i64 }* %1, align 8
  %err_domain = getelementptr inbounds %error_union, %error_union* %result, i32 0, i32 0
  %2 = load i64, i64* %err_domain, align 8
  %not_err = icmp eq i64 %2, 0
  br i1 %not_err, label %after_check, label %after_try

after_check:
  %3 = load i8*, i8** %retparam1, align 8
  %4 = call { i64, i64 } @atoi(i32* %retparam, i8* %3)
  %5 = bitcast %error_union* %result2 to { i64, i64 }*
  store { i64, i64 } %4, { i64, i64 }* %5, align 8
  %err_domain3 = getelementptr inbounds %error_union, %error_union* %result2, i32 0, i32 0
  %6 = load i64, i64* %err_domain3, align 8
  %not_err4 = icmp eq i64 %6, 0
  br i1 %not_err4, label %after_check5, label %after_try

after_check5:
  %7 = load i32, i32* %retparam, align 4
  store i32 %7, i32* %val, align 4
  %8 = load i32, i32* %val, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), i32 %8)
  ret void

after_try:
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i32 0, i32 0))
  ret void