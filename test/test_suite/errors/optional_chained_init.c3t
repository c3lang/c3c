// #target: macos-x64
module test;
import std::io;

fault Test { FOO }

fn void test1()
{
	int! a = 1;
	int! b = a = Test.FOO!;
	if (catch err = a) io::printfn("A err was: %s", err);
	if (catch err = b) io::printfn("B err was: %s", err);
	io::printfn("A was: %s", a);
	io::printfn("B was: %s", b);
}

fn void test2()
{
	int! x = Test.FOO!;
	int! a = 1;
	int! b = a = x;
	if (catch err = a) io::printfn("A err was: %s", err);
	if (catch err = b) io::printfn("B err was: %s", err);
	io::printfn("A was: %s", a);
	io::printfn("B was: %s", b);
}


fn void test3()
{
	int! x = 23;
	int! a = 1;
	int! b = a = x;
	if (catch err = a) io::printfn("A err was: %s", err);
	if (catch err = b) io::printfn("B err was: %s", err);
	io::printfn("A was: %s", a);
	io::printfn("B was: %s", b);
}

fn void main()
{
	test1();
	test2();
	test3();
}

/* #expect: test.ll

define void @test_test1() #0 {
entry:
  %a = alloca i32, align 4
  %a.f = alloca i64, align 8
  %b = alloca i32, align 4
  %b.f = alloca i64, align 8
  %err = alloca i64, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %err3 = alloca i64, align 8
  %retparam12 = alloca i64, align 8
  %varargslots13 = alloca [1 x %variant], align 16
  %retparam17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %variant], align 16
  %retparam24 = alloca i64, align 8
  %varargslots25 = alloca [1 x %variant], align 16
  store i32 1, ptr %a, align 4
  store i64 0, ptr %a.f, align 8
  store i64 ptrtoint (ptr @"test_Test$FOO" to i64), ptr %a.f, align 8
  store i64 ptrtoint (ptr @"test_Test$FOO" to i64), ptr %b.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %entry
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %a.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %testblock
  store i64 %optval, ptr %err, align 8
  br label %end_block

after_check:                                      ; preds = %testblock
  store i64 0, ptr %err, align 8
  br label %end_block

end_block:                                        ; preds = %after_check, %assign_optional
  %0 = load i64, ptr %err, align 8
  %neq = icmp ne i64 %0, 0
  br i1 %neq, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  %1 = insertvalue %variant undef, ptr %err, 0
  %2 = insertvalue %variant %1, i64 ptrtoint (ptr @"ct$anyerr" to i64), 1
  %3 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %2, ptr %3, align 16
  %4 = call i64 @std_io_printfn(ptr %retparam, ptr @.str, i64 13, ptr %varargslots, i64 1)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %end_block
  br label %testblock4

testblock4:                                       ; preds = %if.exit
  %optval5 = load i64, ptr %b.f, align 8
  %not_err6 = icmp eq i64 %optval5, 0
  br i1 %not_err6, label %after_check8, label %assign_optional7

assign_optional7:                                 ; preds = %testblock4
  store i64 %optval5, ptr %err3, align 8
  br label %end_block9

after_check8:                                     ; preds = %testblock4
  store i64 0, ptr %err3, align 8
  br label %end_block9

end_block9:                                       ; preds = %after_check8, %assign_optional7
  %5 = load i64, ptr %err3, align 8
  %neq10 = icmp ne i64 %5, 0
  br i1 %neq10, label %if.then11, label %if.exit16

if.then11:                                        ; preds = %end_block9
  %6 = insertvalue %variant undef, ptr %err3, 0
  %7 = insertvalue %variant %6, i64 ptrtoint (ptr @"ct$anyerr" to i64), 1
  %8 = getelementptr inbounds [1 x %variant], ptr %varargslots13, i64 0, i64 0
  store %variant %7, ptr %8, align 16
  %9 = call i64 @std_io_printfn(ptr %retparam12, ptr @.str.1, i64 13, ptr %varargslots13, i64 1)
  br label %if.exit16

if.exit16:                                        ; preds = %if.then11, %end_block9
  %optval19 = load i64, ptr %a.f, align 8
  %not_err20 = icmp eq i64 %optval19, 0
  br i1 %not_err20, label %after_check21, label %after_check23

after_check21:                                    ; preds = %if.exit16
  %10 = insertvalue %variant undef, ptr %a, 0
  %11 = insertvalue %variant %10, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %12 = getelementptr inbounds [1 x %variant], ptr %varargslots18, i64 0, i64 0
  store %variant %11, ptr %12, align 16
  %13 = call i64 @std_io_printfn(ptr %retparam17, ptr @.str.2, i64 9, ptr %varargslots18, i64 1)
  %not_err22 = icmp eq i64 %13, 0
  br i1 %not_err22, label %after_check23, label %after_check23

after_check23:                                    ; preds = %if.exit16, %after_check21, %after_check21
  %optval26 = load i64, ptr %b.f, align 8
  %not_err27 = icmp eq i64 %optval26, 0
  br i1 %not_err27, label %after_check28, label %after_check30

after_check28:                                    ; preds = %after_check23
  %14 = insertvalue %variant undef, ptr %b, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %16 = getelementptr inbounds [1 x %variant], ptr %varargslots25, i64 0, i64 0
  store %variant %15, ptr %16, align 16
  %17 = call i64 @std_io_printfn(ptr %retparam24, ptr @.str.3, i64 9, ptr %varargslots25, i64 1)
  %not_err29 = icmp eq i64 %17, 0
  br i1 %not_err29, label %after_check30, label %after_check30

after_check30:                                    ; preds = %after_check23, %after_check28, %after_check28
  ret void
}

; Function Attrs: nounwind
define void @test_test2() #0 {
entry:
  %x = alloca i32, align 4
  %x.f = alloca i64, align 8
  %a = alloca i32, align 4
  %a.f = alloca i64, align 8
  %b = alloca i32, align 4
  %b.f = alloca i64, align 8
  %err = alloca i64, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %err8 = alloca i64, align 8
  %retparam17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %variant], align 16
  %retparam22 = alloca i64, align 8
  %varargslots23 = alloca [1 x %variant], align 16
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %variant], align 16
  store i64 ptrtoint (ptr @"test_Test$FOO" to i64), ptr %x.f, align 8
  store i32 1, ptr %a, align 4
  store i64 0, ptr %a.f, align 8
  %optval = load i64, ptr %x.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %optval, ptr %a.f, align 8
  br label %optional_assign_jump

after_check:                                      ; preds = %entry
  %0 = load i32, ptr %x, align 4
  store i32 %0, ptr %a, align 4
  store i64 0, ptr %a.f, align 8
  br label %after_assign

optional_assign_jump:                             ; preds = %assign_optional
  %reload_err = load i64, ptr %a.f, align 8
  store i64 %reload_err, ptr %b.f, align 8
  br label %after_assign1

after_assign:                                     ; preds = %after_check
  store i32 %0, ptr %b, align 4
  store i64 0, ptr %b.f, align 8
  br label %after_assign1

after_assign1:                                    ; preds = %after_assign, %optional_assign_jump
  br label %testblock

testblock:                                        ; preds = %after_assign1
  %optval2 = load i64, ptr %a.f, align 8
  %not_err3 = icmp eq i64 %optval2, 0
  br i1 %not_err3, label %after_check5, label %assign_optional4

assign_optional4:                                 ; preds = %testblock
  store i64 %optval2, ptr %err, align 8
  br label %end_block

after_check5:                                     ; preds = %testblock
  store i64 0, ptr %err, align 8
  br label %end_block

end_block:                                        ; preds = %after_check5, %assign_optional4
  %1 = load i64, ptr %err, align 8
  %neq = icmp ne i64 %1, 0
  br i1 %neq, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  %2 = insertvalue %variant undef, ptr %err, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$anyerr" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = call i64 @std_io_printfn(ptr %retparam, ptr @.str.4, i64 13, ptr %varargslots, i64 1)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %end_block
  br label %testblock9

testblock9:                                       ; preds = %if.exit
  %optval10 = load i64, ptr %b.f, align 8
  %not_err11 = icmp eq i64 %optval10, 0
  br i1 %not_err11, label %after_check13, label %assign_optional12

assign_optional12:                                ; preds = %testblock9
  store i64 %optval10, ptr %err8, align 8
  br label %end_block14

after_check13:                                    ; preds = %testblock9
  store i64 0, ptr %err8, align 8
  br label %end_block14

end_block14:                                      ; preds = %after_check13, %assign_optional12
  %6 = load i64, ptr %err8, align 8
  %neq15 = icmp ne i64 %6, 0
  br i1 %neq15, label %if.then16, label %if.exit21

if.then16:                                        ; preds = %end_block14
  %7 = insertvalue %variant undef, ptr %err8, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (ptr @"ct$anyerr" to i64), 1
  %9 = getelementptr inbounds [1 x %variant], ptr %varargslots18, i64 0, i64 0
  store %variant %8, ptr %9, align 16
  %10 = call i64 @std_io_printfn(ptr %retparam17, ptr @.str.5, i64 13, ptr %varargslots18, i64 1)
  br label %if.exit21

if.exit21:                                        ; preds = %if.then16, %end_block14
  %optval24 = load i64, ptr %a.f, align 8
  %not_err25 = icmp eq i64 %optval24, 0
  br i1 %not_err25, label %after_check26, label %after_check28

after_check26:                                    ; preds = %if.exit21
  %11 = insertvalue %variant undef, ptr %a, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], ptr %varargslots23, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = call i64 @std_io_printfn(ptr %retparam22, ptr @.str.6, i64 9, ptr %varargslots23, i64 1)
  %not_err27 = icmp eq i64 %14, 0
  br i1 %not_err27, label %after_check28, label %after_check28

after_check28:                                    ; preds = %if.exit21, %after_check26, %after_check26
  %optval31 = load i64, ptr %b.f, align 8
  %not_err32 = icmp eq i64 %optval31, 0
  br i1 %not_err32, label %after_check33, label %after_check35

after_check33:                                    ; preds = %after_check28
  %15 = insertvalue %variant undef, ptr %b, 0
  %16 = insertvalue %variant %15, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %17 = getelementptr inbounds [1 x %variant], ptr %varargslots30, i64 0, i64 0
  store %variant %16, ptr %17, align 16
  %18 = call i64 @std_io_printfn(ptr %retparam29, ptr @.str.7, i64 9, ptr %varargslots30, i64 1)
  %not_err34 = icmp eq i64 %18, 0
  br i1 %not_err34, label %after_check35, label %after_check35

after_check35:                                    ; preds = %after_check28, %after_check33, %after_check33
  ret void
}

; Function Attrs: nounwind
define void @test_test3() #0 {
entry:
  %x = alloca i32, align 4
  %x.f = alloca i64, align 8
  %a = alloca i32, align 4
  %a.f = alloca i64, align 8
  %b = alloca i32, align 4
  %b.f = alloca i64, align 8
  %err = alloca i64, align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %err8 = alloca i64, align 8
  %retparam17 = alloca i64, align 8
  %varargslots18 = alloca [1 x %variant], align 16
  %retparam22 = alloca i64, align 8
  %varargslots23 = alloca [1 x %variant], align 16
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %variant], align 16
  store i32 23, ptr %x, align 4
  store i64 0, ptr %x.f, align 8
  store i32 1, ptr %a, align 4
  store i64 0, ptr %a.f, align 8
  %optval = load i64, ptr %x.f, align 8
  %not_err = icmp eq i64 %optval, 0
  br i1 %not_err, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %optval, ptr %a.f, align 8
  br label %optional_assign_jump

after_check:                                      ; preds = %entry
  %0 = load i32, ptr %x, align 4
  store i32 %0, ptr %a, align 4
  store i64 0, ptr %a.f, align 8
  br label %after_assign

optional_assign_jump:                             ; preds = %assign_optional
  %reload_err = load i64, ptr %a.f, align 8
  store i64 %reload_err, ptr %b.f, align 8
  br label %after_assign1

after_assign:                                     ; preds = %after_check
  store i32 %0, ptr %b, align 4
  store i64 0, ptr %b.f, align 8
  br label %after_assign1

after_assign1:                                    ; preds = %after_assign, %optional_assign_jump
  br label %testblock

testblock:                                        ; preds = %after_assign1
  %optval2 = load i64, ptr %a.f, align 8
  %not_err3 = icmp eq i64 %optval2, 0
  br i1 %not_err3, label %after_check5, label %assign_optional4

assign_optional4:                                 ; preds = %testblock
  store i64 %optval2, ptr %err, align 8
  br label %end_block

after_check5:                                     ; preds = %testblock
  store i64 0, ptr %err, align 8
  br label %end_block

end_block:                                        ; preds = %after_check5, %assign_optional4
  %1 = load i64, ptr %err, align 8
  %neq = icmp ne i64 %1, 0
  br i1 %neq, label %if.then, label %if.exit

if.then:                                          ; preds = %end_block
  %2 = insertvalue %variant undef, ptr %err, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (ptr @"ct$anyerr" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %3, ptr %4, align 16
  %5 = call i64 @std_io_printfn(ptr %retparam, ptr @.str.8, i64 13, ptr %varargslots, i64 1)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %end_block
  br label %testblock9

testblock9:                                       ; preds = %if.exit
  %optval10 = load i64, ptr %b.f, align 8
  %not_err11 = icmp eq i64 %optval10, 0
  br i1 %not_err11, label %after_check13, label %assign_optional12

assign_optional12:                                ; preds = %testblock9
  store i64 %optval10, ptr %err8, align 8
  br label %end_block14

after_check13:                                    ; preds = %testblock9
  store i64 0, ptr %err8, align 8
  br label %end_block14

end_block14:                                      ; preds = %after_check13, %assign_optional12
  %6 = load i64, ptr %err8, align 8
  %neq15 = icmp ne i64 %6, 0
  br i1 %neq15, label %if.then16, label %if.exit21

if.then16:                                        ; preds = %end_block14
  %7 = insertvalue %variant undef, ptr %err8, 0
  %8 = insertvalue %variant %7, i64 ptrtoint (ptr @"ct$anyerr" to i64), 1
  %9 = getelementptr inbounds [1 x %variant], ptr %varargslots18, i64 0, i64 0
  store %variant %8, ptr %9, align 16
  %10 = call i64 @std_io_printfn(ptr %retparam17, ptr @.str.9, i64 13, ptr %varargslots18, i64 1)
  br label %if.exit21

if.exit21:                                        ; preds = %if.then16, %end_block14
  %optval24 = load i64, ptr %a.f, align 8
  %not_err25 = icmp eq i64 %optval24, 0
  br i1 %not_err25, label %after_check26, label %after_check28

after_check26:                                    ; preds = %if.exit21
  %11 = insertvalue %variant undef, ptr %a, 0
  %12 = insertvalue %variant %11, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %13 = getelementptr inbounds [1 x %variant], ptr %varargslots23, i64 0, i64 0
  store %variant %12, ptr %13, align 16
  %14 = call i64 @std_io_printfn(ptr %retparam22, ptr @.str.10, i64 9, ptr %varargslots23, i64 1)
  %not_err27 = icmp eq i64 %14, 0
  br i1 %not_err27, label %after_check28, label %after_check28

after_check28:                                    ; preds = %if.exit21, %after_check26, %after_check26
  %optval31 = load i64, ptr %b.f, align 8
  %not_err32 = icmp eq i64 %optval31, 0
  br i1 %not_err32, label %after_check33, label %after_check35

after_check33:                                    ; preds = %after_check28
  %15 = insertvalue %variant undef, ptr %b, 0
  %16 = insertvalue %variant %15, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %17 = getelementptr inbounds [1 x %variant], ptr %varargslots30, i64 0, i64 0
  store %variant %16, ptr %17, align 16
  %18 = call i64 @std_io_printfn(ptr %retparam29, ptr @.str.11, i64 9, ptr %varargslots30, i64 1)
  %not_err34 = icmp eq i64 %18, 0
  br i1 %not_err34, label %after_check35, label %after_check35

after_check35:                                    ; preds = %after_check28, %after_check33, %after_check33
  ret void
}
