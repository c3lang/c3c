// #target: x64_darwin

func void! test()
{
    int! i;
    i!!;
}

// #expect: rethrow.ll

entry:
  %i = alloca i32, align 4
  %i1 = alloca %error_union, align 8
  %error_var = alloca %error_union, align 8
  %coerce = alloca { i64, i64 }, align 8
  store %error_union zeroinitializer, %error_union* %i1, align 8
  store i32 0, i32* %i, align 4
  %err_domain = getelementptr inbounds %error_union, %error_union* %i1, i32 0, i32 0
  %0 = load i64, i64* %err_domain, align 8
  %not_err = icmp eq i64 %0, 0
  br i1 %not_err, label %after_check, label %error

error:
  %1 = bitcast %error_union* %error_var to i8*
  %2 = bitcast %error_union* %i1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 %2, i32 16, i1 false)
  br label %guard_block

after_check:
  %3 = load i32, i32* %i, align 4
  br label %noerr_block

guard_block:
  %4 = bitcast %error_union* %error_var to { i64, i64 }*
  %coerced = load { i64, i64 }, { i64, i64 }* %4, align 8
  ret { i64, i64 } %coerced

noerr_block:
  %5 = bitcast { i64, i64 }* %coerce to %error_union*
  store %error_union zeroinitializer, %error_union* %5, align 8
  %coerced2 = load { i64, i64 }, { i64, i64 }* %coerce, align 8
  ret { i64, i64 } %coerced2
