// #target: x64-darwin
extern fn char*! readLine();
extern fn int! atoi(char*);

extern fn int printf(char* fmt, ...);

fn void main()
{
    char*! line = readLine();
    if (try line)
    {
        int! val = atoi(line);
        if (try val)
        {
            printf("You typed the number %d\n", val);
            return;
        }
    }
    printf("You didn't type an integer :(\n");
}

// #expect: try_with_unwrap.ll

 define void @main() #0 {
entry:
  %line = alloca i8*, align 8
  %line.f = alloca i64, align 8
  %retparam = alloca i8*, align 8
  %val = alloca i32, align 4
  %val.f = alloca i64, align 8
  %retparam1 = alloca i32, align 4
  %0 = call i64 @readLine(i8** %retparam)
  %not_err = icmp eq i64 %0, 0
  br i1 %not_err, label %after.errcheck, label %error

error:                                            ; preds = %entry
  store i64 %0, i64* %line.f, align 8
  br label %after_assign

after.errcheck:                                   ; preds = %entry
  %1 = load i8*, i8** %retparam, align 8
  store i8* %1, i8** %line, align 8
  store i64 0, i64* %line.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after.errcheck, %error
  %load.err = load i64, i64* %line.f, align 8
  %result = icmp eq i64 %load.err, 0
  br i1 %result, label %if.then, label %if.exit9

if.then:                                          ; preds = %after_assign
  %2 = load i8*, i8** %line, align 8
  %3 = call i64 @atoi(i32* %retparam1, i8* %2)
  %not_err2 = icmp eq i64 %3, 0
  br i1 %not_err2, label %after.errcheck4, label %error3

error3:                                           ; preds = %if.then
  store i64 %3, i64* %val.f, align 8
  br label %after_assign5

after.errcheck4:                                  ; preds = %if.then
  %4 = load i32, i32* %retparam1, align 4
  store i32 %4, i32* %val, align 4
  store i64 0, i64* %val.f, align 8
  br label %after_assign5

after_assign5:                                    ; preds = %after.errcheck4, %error3
  %load.err6 = load i64, i64* %val.f, align 8
  %result7 = icmp eq i64 %load.err6, 0
  br i1 %result7, label %if.then8, label %if.exit

if.then8:                                         ; preds = %after_assign5
  %5 = load i32, i32* %val, align 4
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), i32 %5)
  ret void

if.exit:                                          ; preds = %after_assign5
  br label %if.exit9

if.exit9:                                         ; preds = %if.exit, %after_assign
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

