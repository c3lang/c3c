// #target: macos-x64
module test;
import libc;
fault Tester { FOO }

fn int! abc()
{
	return Tester.FOO?;
}
macro test()
{
	defer libc::printf("Test2\n");
	return abc();
}

fn void main()
{
	defer libc::printf("Test1\n");
	libc::printf("%d\n", test() ?? 2);
}

/* #expect: test.ll

define i64 @test.abc(ptr %0) #0 {
entry:
  ret i64 ptrtoint (ptr @"test.Tester$FOO" to i64)
}

define void @test.main() #0 {
entry:
  %blockret = alloca i32, align 4
  %retparam = alloca i32, align 4
  %0 = call i64 @test.abc(ptr %retparam)
  %not_err = icmp eq i64 %0, 0
  %1 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %1, label %after_check, label %opt_block_cleanup

after_check:                                      ; preds = %entry
  %2 = call i32 (ptr, ...) @printf(ptr @.str.1)
  %3 = load i32, ptr %retparam, align 4
  store i32 %3, ptr %blockret, align 4
  br label %expr_block.exit

opt_block_cleanup:                                ; preds = %entry
  %4 = call i32 (ptr, ...) @printf(ptr @.str.2)
  br label %else_block

expr_block.exit:                                  ; preds = %after_check
  %5 = load i32, ptr %blockret, align 4
  br label %phi_block

else_block:                                       ; preds = %opt_block_cleanup
  br label %phi_block

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val = phi i32 [ %5, %expr_block.exit ], [ 2, %else_block ]
  %6 = call i32 (ptr, ...) @printf(ptr @.str, i32 %val)
  %7 = call i32 (ptr, ...) @printf(ptr @.str.3)
  ret void
}
