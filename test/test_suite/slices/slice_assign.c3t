// #target: x64-darwin
module test;

extern fn void printf(char*, ...);

fn void main()
{
    int[8] x;
    x[0..1] = 3;
    x[1..2] = 5;
    x[5..7] = 52;
    foreach (i : x)
    {
        printf("%d\n", i);
    }
    x[0..7] = 123;
}

/* #expect: test.ll

@.str = private constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind
declare void @printf(i8*, ...) #0

; Function Attrs: nounwind
define void @main() #0 {
entry:
  %x = alloca [8 x i32], align 16
  %idx = alloca i64, align 8
  %i = alloca i32, align 4
  %0 = bitcast [8 x i32]* %x to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 32, i1 false)
  %1 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 0
  store i32 3, i32* %1, align 4
  %2 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 1
  store i32 3, i32* %2, align 4
  %3 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 1
  store i32 5, i32* %3, align 4
  %4 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 2
  store i32 5, i32* %4, align 4
  %5 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 5
  store i32 52, i32* %5, align 4
  %6 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 6
  store i32 52, i32* %6, align 4
  %7 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 7
  store i32 52, i32* %7, align 4
  store i64 0, i64* %idx, align 8
  br label %foreach.cond
foreach.cond:                                     ; preds = %foreach.inc, %entry
  %8 = load i64, i64* %idx, align 8
  %lt = icmp ult i64 %8, 8
  br i1 %lt, label %foreach.body, label %foreach.exit
foreach.body:                                     ; preds = %foreach.cond
  %ptroffset = getelementptr inbounds i32, [8 x i32]* %x, i64 %8
  %9 = load i32, i32* %ptroffset, align 4
  store i32 %9, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %10)
  br label %foreach.inc
foreach.inc:                                      ; preds = %foreach.body
  %11 = load i64, i64* %idx, align 8
  %12 = add i64 %11, 1
  store i64 %12, i64* %idx, align 8
  br label %foreach.cond
foreach.exit:                                     ; preds = %foreach.cond
  br label %cond
cond:                                             ; preds = %assign, %foreach.exit
  %13 = phi i64 [ 0, %foreach.exit ], [ %add, %assign ]
  %le = icmp sle i64 %13, 7
  br i1 %le, label %assign, label %exit
assign:                                           ; preds = %cond
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* %x, i64 0, i64 %13
  store i32 123, i32* %14, align 4
  %add = add i64 %13, 1
  br label %cond
exit:                                             ; preds = %cond
  ret void
}