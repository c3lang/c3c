// #target: macos-x64
module test;
import std::io;

fn void main()
{
	int[*] z = { 1, 2, 3, 4, 5, 6, 7 };
	int[6] y;
	y[1..3] = z[3..5];
	io::printfn("%s %s", y, z);
	y[4..] = z[5..6];
	io::printfn("%s %s", y, z);
	int[][] a = { int[] { 1 } };
	int[][] b = { int[] { 2 } };
	io::printfn("%s", a);
	a[0..0] = b[0..0];
	io::printfn("%s", a);
	a[0..0] = y[2..4];
	io::printfn("%s", a);
}
/* #expect: test.ll

define void @test.main() #0 {
entry:
  %z = alloca [7 x i32], align 16
  %y = alloca [6 x i32], align 16
  %taddr = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %"any*"], align 16
  %taddr1 = alloca %"int[]", align 8
  %retparam2 = alloca i64, align 8
  %varargslots3 = alloca [2 x %"any*"], align 16
  %a = alloca %"int[][]", align 8
  %literal = alloca [1 x %"int[]"], align 16
  %literal4 = alloca [1 x i32], align 4
  %b = alloca %"int[][]", align 8
  %literal5 = alloca [1 x %"int[]"], align 16
  %literal6 = alloca [1 x i32], align 4
  %retparam7 = alloca i64, align 8
  %varargslots8 = alloca [1 x %"any*"], align 16
  %taddr10 = alloca %"int[][]", align 8
  %retparam11 = alloca i64, align 8
  %varargslots12 = alloca [1 x %"any*"], align 16
  %retparam14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %"any*"], align 16
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %z, ptr align 16 @.__const, i32 28, i1 false)
  call void @llvm.memset.p0.i64(ptr align 16 %y, i8 0, i64 24, i1 false)
  %0 = getelementptr inbounds [7 x i32], ptr %z, i64 0, i64 3
  %1 = insertvalue %"int[]" undef, ptr %0, 0
  %2 = insertvalue %"int[]" %1, i64 3, 1
  %3 = getelementptr inbounds [6 x i32], ptr %y, i64 0, i64 1
  %4 = insertvalue %"int[]" undef, ptr %3, 0
  %5 = insertvalue %"int[]" %4, i64 3, 1
  %6 = extractvalue %"int[]" %5, 0
  %7 = extractvalue %"int[]" %2, 0
  store %"int[]" %2, ptr %taddr, align 8
  %8 = getelementptr inbounds %"int[]", ptr %taddr, i32 0, i32 1
  %9 = load i64, ptr %8, align 8
  %10 = mul i64 %9, 4
  call void @llvm.memmove.p0.p0.i64(ptr align 4 %6, ptr align 4 %7, i64 %10, i1 false)
  %11 = insertvalue %"any*" undef, ptr %y, 0
  %12 = insertvalue %"any*" %11, i64 ptrtoint (ptr @"$ct.a6$int" to i64), 1
  %13 = getelementptr inbounds [2 x %"any*"], ptr %varargslots, i64 0, i64 0
  store %"any*" %12, ptr %13, align 16
  %14 = insertvalue %"any*" undef, ptr %z, 0
  %15 = insertvalue %"any*" %14, i64 ptrtoint (ptr @"$ct.a7$int" to i64), 1
  %16 = getelementptr inbounds [2 x %"any*"], ptr %varargslots, i64 0, i64 1
  store %"any*" %15, ptr %16, align 16
  %17 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 5, ptr %varargslots, i64 2)
  %18 = getelementptr inbounds [7 x i32], ptr %z, i64 0, i64 5
  %19 = insertvalue %"int[]" undef, ptr %18, 0
  %20 = insertvalue %"int[]" %19, i64 2, 1
  %21 = getelementptr inbounds [6 x i32], ptr %y, i64 0, i64 4
  %22 = insertvalue %"int[]" undef, ptr %21, 0
  %23 = insertvalue %"int[]" %22, i64 2, 1
  %24 = extractvalue %"int[]" %23, 0
  %25 = extractvalue %"int[]" %20, 0
  store %"int[]" %20, ptr %taddr1, align 8
  %26 = getelementptr inbounds %"int[]", ptr %taddr1, i32 0, i32 1
  %27 = load i64, ptr %26, align 8
  %28 = mul i64 %27, 4
  call void @llvm.memmove.p0.p0.i64(ptr align 4 %24, ptr align 4 %25, i64 %28, i1 false)
  %29 = insertvalue %"any*" undef, ptr %y, 0
  %30 = insertvalue %"any*" %29, i64 ptrtoint (ptr @"$ct.a6$int" to i64), 1
  %31 = getelementptr inbounds [2 x %"any*"], ptr %varargslots3, i64 0, i64 0
  store %"any*" %30, ptr %31, align 16
  %32 = insertvalue %"any*" undef, ptr %z, 0
  %33 = insertvalue %"any*" %32, i64 ptrtoint (ptr @"$ct.a7$int" to i64), 1
  %34 = getelementptr inbounds [2 x %"any*"], ptr %varargslots3, i64 0, i64 1
  store %"any*" %33, ptr %34, align 16
  %35 = call i64 @std.io.printfn(ptr %retparam2, ptr @.str.1, i64 5, ptr %varargslots3, i64 2)
  %36 = getelementptr inbounds [1 x %"int[]"], ptr %literal, i64 0, i64 0
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal4, ptr align 4 @.__const.2, i32 4, i1 false)
  %37 = insertvalue %"int[]" undef, ptr %literal4, 0
  %38 = insertvalue %"int[]" %37, i64 1, 1
  store %"int[]" %38, ptr %36, align 8
  %39 = insertvalue %"int[][]" undef, ptr %literal, 0
  %40 = insertvalue %"int[][]" %39, i64 1, 1
  store %"int[][]" %40, ptr %a, align 8
  %41 = getelementptr inbounds [1 x %"int[]"], ptr %literal5, i64 0, i64 0
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal6, ptr align 4 @.__const.3, i32 4, i1 false)
  %42 = insertvalue %"int[]" undef, ptr %literal6, 0
  %43 = insertvalue %"int[]" %42, i64 1, 1
  store %"int[]" %43, ptr %41, align 8
  %44 = insertvalue %"int[][]" undef, ptr %literal5, 0
  %45 = insertvalue %"int[][]" %44, i64 1, 1
  store %"int[][]" %45, ptr %b, align 8
  %46 = insertvalue %"any*" undef, ptr %a, 0
  %47 = insertvalue %"any*" %46, i64 ptrtoint (ptr @"$ct.sa$sa$int" to i64), 1
  %48 = getelementptr inbounds [1 x %"any*"], ptr %varargslots8, i64 0, i64 0
  store %"any*" %47, ptr %48, align 16
  %49 = call i64 @std.io.printfn(ptr %retparam7, ptr @.str.4, i64 2, ptr %varargslots8, i64 1)
  %50 = load %"int[][]", ptr %b, align 8
  %51 = extractvalue %"int[][]" %50, 0
  %ptroffset = getelementptr inbounds %"int[]", ptr %51, i64 0
  %52 = insertvalue %"int[][]" undef, ptr %ptroffset, 0
  %53 = insertvalue %"int[][]" %52, i64 1, 1
  %54 = load %"int[][]", ptr %a, align 8
  %55 = extractvalue %"int[][]" %54, 0
  %ptroffset9 = getelementptr inbounds %"int[]", ptr %55, i64 0
  %56 = insertvalue %"int[][]" undef, ptr %ptroffset9, 0
  %57 = insertvalue %"int[][]" %56, i64 1, 1
  %58 = extractvalue %"int[][]" %57, 0
  %59 = extractvalue %"int[][]" %53, 0
  store %"int[][]" %53, ptr %taddr10, align 8
  %60 = getelementptr inbounds %"int[][]", ptr %taddr10, i32 0, i32 1
  %61 = load i64, ptr %60, align 8
  %62 = mul i64 %61, 16
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %58, ptr align 8 %59, i64 %62, i1 false)
  %63 = insertvalue %"any*" undef, ptr %a, 0
  %64 = insertvalue %"any*" %63, i64 ptrtoint (ptr @"$ct.sa$sa$int" to i64), 1
  %65 = getelementptr inbounds [1 x %"any*"], ptr %varargslots12, i64 0, i64 0
  store %"any*" %64, ptr %65, align 16
  %66 = call i64 @std.io.printfn(ptr %retparam11, ptr @.str.5, i64 2, ptr %varargslots12, i64 1)
  %67 = getelementptr inbounds [6 x i32], ptr %y, i64 0, i64 2
  %68 = insertvalue %"int[]" undef, ptr %67, 0
  %69 = insertvalue %"int[]" %68, i64 3, 1
  %70 = load %"int[][]", ptr %a, align 8
  %71 = extractvalue %"int[][]" %70, 0
  %ptroffset13 = getelementptr inbounds %"int[]", ptr %71, i64 0
  store %"int[]" %69, ptr %ptroffset13, align 8
  %72 = insertvalue %"any*" undef, ptr %a, 0
  %73 = insertvalue %"any*" %72, i64 ptrtoint (ptr @"$ct.sa$sa$int" to i64), 1
  %74 = getelementptr inbounds [1 x %"any*"], ptr %varargslots15, i64 0, i64 0
  store %"any*" %73, ptr %74, align 16
  %75 = call i64 @std.io.printfn(ptr %retparam14, ptr @.str.6, i64 2, ptr %varargslots15, i64 1)
  ret void
}
