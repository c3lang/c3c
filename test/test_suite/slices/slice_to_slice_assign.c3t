// #target: macos-x64
module test;
import std::io;

fn void main()
{
	int[*] z = { 1, 2, 3, 4, 5, 6, 7 };
	int[6] y;
	y[1..3] = z[3..5];
	io::printfln("%s %s", y, z);
	y[4..] = z[5..6];
	io::printfln("%s %s", y, z);
	int[][] a = { int[] { 1 } };
	int[][] b = { int[] { 2 } };
	io::printfln("%s", a);
	a[0..0] = b[0..0];
	io::printfln("%s", a);
	a[0..0] = y[2..4];
	io::printfln("%s", a);
}
/* #expect: test.ll

define void @test_main() #0 {
entry:
  %z = alloca [7 x i32], align 16
  %y = alloca [6 x i32], align 16
  %taddr = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %taddr1 = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr4 = alloca %"int[]", align 8
  %retparam5 = alloca i64, align 8
  %taddr6 = alloca %"char[]", align 8
  %vararg9 = alloca %"variant[]", align 8
  %varargslots10 = alloca [2 x %variant], align 16
  %a = alloca %"int[][]", align 8
  %literal = alloca [1 x %"int[]"], align 16
  %literal16 = alloca [1 x i32], align 4
  %b = alloca %"int[][]", align 8
  %literal17 = alloca [1 x %"int[]"], align 16
  %literal18 = alloca [1 x i32], align 4
  %retparam19 = alloca i64, align 8
  %taddr20 = alloca %"char[]", align 8
  %vararg23 = alloca %"variant[]", align 8
  %varargslots24 = alloca [1 x %variant], align 16
  %taddr31 = alloca %"int[][]", align 8
  %retparam32 = alloca i64, align 8
  %taddr33 = alloca %"char[]", align 8
  %vararg36 = alloca %"variant[]", align 8
  %varargslots37 = alloca [1 x %variant], align 16
  %retparam44 = alloca i64, align 8
  %taddr45 = alloca %"char[]", align 8
  %vararg48 = alloca %"variant[]", align 8
  %varargslots49 = alloca [1 x %variant], align 16
  %0 = bitcast [7 x i32]* %z to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32]* @.__const to i8*), i32 28, i1 false)
  %1 = bitcast [6 x i32]* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 24, i1 false)
  %2 = getelementptr inbounds [7 x i32], [7 x i32]* %z, i64 0, i64 3
  %3 = insertvalue %"int[]" undef, i32* %2, 0
  %4 = insertvalue %"int[]" %3, i64 3, 1
  %5 = getelementptr inbounds [6 x i32], [6 x i32]* %y, i64 0, i64 1
  %6 = insertvalue %"int[]" undef, i32* %5, 0
  %7 = insertvalue %"int[]" %6, i64 3, 1
  %8 = extractvalue %"int[]" %7, 0
  %9 = extractvalue %"int[]" %4, 0
  store %"int[]" %4, %"int[]"* %taddr, align 8
  %10 = getelementptr inbounds %"int[]", %"int[]"* %taddr, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, 4
  %13 = bitcast i32* %8 to i8*
  %14 = bitcast i32* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 %12, i1 false)
  store %"char[]" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i64 5 }, %"char[]"* %taddr1, align 8
  %15 = bitcast %"char[]"* %taddr1 to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %lo = load i8*, i8** %16, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %hi = load i64, i64* %17, align 8
  %18 = bitcast [6 x i32]* %y to i8*
  %19 = insertvalue %variant undef, i8* %18, 0
  %20 = insertvalue %variant %19, i64 ptrtoint (%.introspect* @"ct$a6$int" to i64), 1
  %21 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 0
  store %variant %20, %variant* %21, align 16
  %22 = bitcast [7 x i32]* %z to i8*
  %23 = insertvalue %variant undef, i8* %22, 0
  %24 = insertvalue %variant %23, i64 ptrtoint (%.introspect* @"ct$a7$int" to i64), 1
  %25 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 1
  store %variant %24, %variant* %25, align 16
  %26 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 2, i64* %26, align 8
  %27 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %28 = bitcast [2 x %variant]* %varargslots to %variant*
  store %variant* %28, %variant** %27, align 8
  %29 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %lo2 = load i8*, i8** %30, align 8
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %hi3 = load i64, i64* %31, align 8
  %32 = call i64 @std_io_printfln(i64* %retparam, i8* %lo, i64 %hi, i8* %lo2, i64 %hi3)
  %not_err = icmp eq i64 %32, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %33 = getelementptr inbounds [7 x i32], [7 x i32]* %z, i64 0, i64 5
  %34 = insertvalue %"int[]" undef, i32* %33, 0
  %35 = insertvalue %"int[]" %34, i64 2, 1
  %36 = getelementptr inbounds [6 x i32], [6 x i32]* %y, i64 0, i64 4
  %37 = insertvalue %"int[]" undef, i32* %36, 0
  %38 = insertvalue %"int[]" %37, i64 2, 1
  %39 = extractvalue %"int[]" %38, 0
  %40 = extractvalue %"int[]" %35, 0
  store %"int[]" %35, %"int[]"* %taddr4, align 8
  %41 = getelementptr inbounds %"int[]", %"int[]"* %taddr4, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = mul i64 %42, 4
  %44 = bitcast i32* %39 to i8*
  %45 = bitcast i32* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %45, i64 %43, i1 false)
  store %"char[]" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 5 }, %"char[]"* %taddr6, align 8
  %46 = bitcast %"char[]"* %taddr6 to { i8*, i64 }*
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  %lo7 = load i8*, i8** %47, align 8
  %48 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  %hi8 = load i64, i64* %48, align 8
  %49 = bitcast [6 x i32]* %y to i8*
  %50 = insertvalue %variant undef, i8* %49, 0
  %51 = insertvalue %variant %50, i64 ptrtoint (%.introspect* @"ct$a6$int" to i64), 1
  %52 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots10, i64 0, i64 0
  store %variant %51, %variant* %52, align 16
  %53 = bitcast [7 x i32]* %z to i8*
  %54 = insertvalue %variant undef, i8* %53, 0
  %55 = insertvalue %variant %54, i64 ptrtoint (%.introspect* @"ct$a7$int" to i64), 1
  %56 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots10, i64 0, i64 1
  store %variant %55, %variant* %56, align 16
  %57 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg9, i32 0, i32 1
  store i64 2, i64* %57, align 8
  %58 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg9, i32 0, i32 0
  %59 = bitcast [2 x %variant]* %varargslots10 to %variant*
  store %variant* %59, %variant** %58, align 8
  %60 = bitcast %"variant[]"* %vararg9 to { i8*, i64 }*
  %61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %60, i32 0, i32 0
  %lo11 = load i8*, i8** %61, align 8
  %62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %60, i32 0, i32 1
  %hi12 = load i64, i64* %62, align 8
  %63 = call i64 @std_io_printfln(i64* %retparam5, i8* %lo7, i64 %hi8, i8* %lo11, i64 %hi12)
  %not_err13 = icmp eq i64 %63, 0
  br i1 %not_err13, label %after_check14, label %voiderr15

after_check14:                                    ; preds = %voiderr
  br label %voiderr15

voiderr15:                                        ; preds = %after_check14, %voiderr
  %64 = getelementptr inbounds [1 x %"int[]"], [1 x %"int[]"]* %literal, i64 0, i64 0
  %65 = getelementptr inbounds [1 x i32], [1 x i32]* %literal16, i64 0, i64 0
  store i32 1, i32* %65, align 4
  %66 = bitcast [1 x i32]* %literal16 to i32*
  %67 = insertvalue %"int[]" undef, i32* %66, 0
  %68 = insertvalue %"int[]" %67, i64 1, 1
  store %"int[]" %68, %"int[]"* %64, align 8
  %69 = bitcast [1 x %"int[]"]* %literal to %"int[]"*
  %70 = insertvalue %"int[][]" undef, %"int[]"* %69, 0
  %71 = insertvalue %"int[][]" %70, i64 1, 1
  store %"int[][]" %71, %"int[][]"* %a, align 8
  %72 = getelementptr inbounds [1 x %"int[]"], [1 x %"int[]"]* %literal17, i64 0, i64 0
  %73 = getelementptr inbounds [1 x i32], [1 x i32]* %literal18, i64 0, i64 0
  store i32 2, i32* %73, align 4
  %74 = bitcast [1 x i32]* %literal18 to i32*
  %75 = insertvalue %"int[]" undef, i32* %74, 0
  %76 = insertvalue %"int[]" %75, i64 1, 1
  store %"int[]" %76, %"int[]"* %72, align 8
  %77 = bitcast [1 x %"int[]"]* %literal17 to %"int[]"*
  %78 = insertvalue %"int[][]" undef, %"int[]"* %77, 0
  %79 = insertvalue %"int[][]" %78, i64 1, 1
  store %"int[][]" %79, %"int[][]"* %b, align 8
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2 }, %"char[]"* %taddr20, align 8
  %80 = bitcast %"char[]"* %taddr20 to { i8*, i64 }*
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %80, i32 0, i32 0
  %lo21 = load i8*, i8** %81, align 8
  %82 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %80, i32 0, i32 1
  %hi22 = load i64, i64* %82, align 8
  %83 = bitcast %"int[][]"* %a to i8*
  %84 = insertvalue %variant undef, i8* %83, 0
  %85 = insertvalue %variant %84, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %86 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots24, i64 0, i64 0
  store %variant %85, %variant* %86, align 16
  %87 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg23, i32 0, i32 1
  store i64 1, i64* %87, align 8
  %88 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg23, i32 0, i32 0
  %89 = bitcast [1 x %variant]* %varargslots24 to %variant*
  store %variant* %89, %variant** %88, align 8
  %90 = bitcast %"variant[]"* %vararg23 to { i8*, i64 }*
  %91 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %90, i32 0, i32 0
  %lo25 = load i8*, i8** %91, align 8
  %92 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %90, i32 0, i32 1
  %hi26 = load i64, i64* %92, align 8
  %93 = call i64 @std_io_printfln(i64* %retparam19, i8* %lo21, i64 %hi22, i8* %lo25, i64 %hi26)
  %not_err27 = icmp eq i64 %93, 0
  br i1 %not_err27, label %after_check28, label %voiderr29

after_check28:                                    ; preds = %voiderr15
  br label %voiderr29

voiderr29:                                        ; preds = %after_check28, %voiderr15
  %94 = load %"int[][]", %"int[][]"* %b, align 8
  %95 = extractvalue %"int[][]" %94, 0
  %ptroffset = getelementptr inbounds %"int[]", %"int[]"* %95, i64 0
  %96 = insertvalue %"int[][]" undef, %"int[]"* %ptroffset, 0
  %97 = insertvalue %"int[][]" %96, i64 1, 1
  %98 = load %"int[][]", %"int[][]"* %a, align 8
  %99 = extractvalue %"int[][]" %98, 0
  %ptroffset30 = getelementptr inbounds %"int[]", %"int[]"* %99, i64 0
  %100 = insertvalue %"int[][]" undef, %"int[]"* %ptroffset30, 0
  %101 = insertvalue %"int[][]" %100, i64 1, 1
  %102 = extractvalue %"int[][]" %101, 0
  %103 = extractvalue %"int[][]" %97, 0
  store %"int[][]" %97, %"int[][]"* %taddr31, align 8
  %104 = getelementptr inbounds %"int[][]", %"int[][]"* %taddr31, i32 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = mul i64 %105, 16
  %107 = bitcast %"int[]"* %102 to i8*
  %108 = bitcast %"int[]"* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 8 %108, i64 %106, i1 false)
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2 }, %"char[]"* %taddr33, align 8
  %109 = bitcast %"char[]"* %taddr33 to { i8*, i64 }*
  %110 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %109, i32 0, i32 0
  %lo34 = load i8*, i8** %110, align 8
  %111 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %109, i32 0, i32 1
  %hi35 = load i64, i64* %111, align 8
  %112 = bitcast %"int[][]"* %a to i8*
  %113 = insertvalue %variant undef, i8* %112, 0
  %114 = insertvalue %variant %113, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %115 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots37, i64 0, i64 0
  store %variant %114, %variant* %115, align 16
  %116 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg36, i32 0, i32 1
  store i64 1, i64* %116, align 8
  %117 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg36, i32 0, i32 0
  %118 = bitcast [1 x %variant]* %varargslots37 to %variant*
  store %variant* %118, %variant** %117, align 8
  %119 = bitcast %"variant[]"* %vararg36 to { i8*, i64 }*
  %120 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %119, i32 0, i32 0
  %lo38 = load i8*, i8** %120, align 8
  %121 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %119, i32 0, i32 1
  %hi39 = load i64, i64* %121, align 8
  %122 = call i64 @std_io_printfln(i64* %retparam32, i8* %lo34, i64 %hi35, i8* %lo38, i64 %hi39)
  %not_err40 = icmp eq i64 %122, 0
  br i1 %not_err40, label %after_check41, label %voiderr42

after_check41:                                    ; preds = %voiderr29
  br label %voiderr42

voiderr42:                                        ; preds = %after_check41, %voiderr29
  %123 = getelementptr inbounds [6 x i32], [6 x i32]* %y, i64 0, i64 2
  %124 = insertvalue %"int[]" undef, i32* %123, 0
  %125 = insertvalue %"int[]" %124, i64 3, 1
  %126 = load %"int[][]", %"int[][]"* %a, align 8
  %127 = extractvalue %"int[][]" %126, 0
  %ptroffset43 = getelementptr inbounds %"int[]", %"int[]"* %127, i64 0
  store %"int[]" %125, %"int[]"* %ptroffset43, align 8
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i64 2 }, %"char[]"* %taddr45, align 8
  %128 = bitcast %"char[]"* %taddr45 to { i8*, i64 }*
  %129 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %128, i32 0, i32 0
  %lo46 = load i8*, i8** %129, align 8
  %130 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %128, i32 0, i32 1
  %hi47 = load i64, i64* %130, align 8
  %131 = bitcast %"int[][]"* %a to i8*
  %132 = insertvalue %variant undef, i8* %131, 0
  %133 = insertvalue %variant %132, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %134 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots49, i64 0, i64 0
  store %variant %133, %variant* %134, align 16
  %135 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg48, i32 0, i32 1
  store i64 1, i64* %135, align 8
  %136 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg48, i32 0, i32 0
  %137 = bitcast [1 x %variant]* %varargslots49 to %variant*
  store %variant* %137, %variant** %136, align 8
  %138 = bitcast %"variant[]"* %vararg48 to { i8*, i64 }*
  %139 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %138, i32 0, i32 0
  %lo50 = load i8*, i8** %139, align 8
  %140 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %138, i32 0, i32 1
  %hi51 = load i64, i64* %140, align 8
  %141 = call i64 @std_io_printfln(i64* %retparam44, i8* %lo46, i64 %hi47, i8* %lo50, i64 %hi51)
  %not_err52 = icmp eq i64 %141, 0
  br i1 %not_err52, label %after_check53, label %voiderr54

after_check53:                                    ; preds = %voiderr42
  br label %voiderr54

voiderr54:                                        ; preds = %after_check53, %voiderr42
  ret void
}
