// #target: macos-x64
module test;
import std::io;

fn void main()
{
	int[*] z = { 1, 2, 3, 4, 5, 6, 7 };
	int[6] y;
	y[1..3] = z[3..5];
	io::printfln("%s %s", y, z);
	y[4..] = z[5..6];
	io::printfln("%s %s", y, z);
	int[][] a = { int[] { 1 } };
	int[][] b = { int[] { 2 } };
	io::printfln("%s", a);
	a[0..0] = b[0..0];
	io::printfln("%s", a);
	a[0..0] = y[2..4];
	io::printfln("%s", a);
}
/* #expect: test.ll

define void @test_main() #0 {
entry:
  %z = alloca [7 x i32], align 16
  %y = alloca [6 x i32], align 16
  %taddr = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr1 = alloca %"variant[]", align 8
  %taddr2 = alloca %"int[]", align 8
  %retparam3 = alloca i64, align 8
  %varargslots4 = alloca [2 x %variant], align 16
  %taddr5 = alloca %"variant[]", align 8
  %a = alloca %"int[][]", align 8
  %literal = alloca [1 x %"int[]"], align 16
  %literal11 = alloca [1 x i32], align 4
  %b = alloca %"int[][]", align 8
  %literal12 = alloca [1 x %"int[]"], align 16
  %literal13 = alloca [1 x i32], align 4
  %retparam14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %variant], align 16
  %taddr16 = alloca %"variant[]", align 8
  %taddr23 = alloca %"int[][]", align 8
  %retparam24 = alloca i64, align 8
  %varargslots25 = alloca [1 x %variant], align 16
  %taddr26 = alloca %"variant[]", align 8
  %retparam33 = alloca i64, align 8
  %varargslots34 = alloca [1 x %variant], align 16
  %taddr35 = alloca %"variant[]", align 8
  %0 = bitcast [7 x i32]* %z to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([7 x i32]* @.__const to i8*), i32 28, i1 false)
  %1 = bitcast [6 x i32]* %y to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 24, i1 false)
  %2 = getelementptr inbounds [7 x i32], [7 x i32]* %z, i64 0, i64 3
  %3 = insertvalue %"int[]" undef, i32* %2, 0
  %4 = insertvalue %"int[]" %3, i64 3, 1
  %5 = getelementptr inbounds [6 x i32], [6 x i32]* %y, i64 0, i64 1
  %6 = insertvalue %"int[]" undef, i32* %5, 0
  %7 = insertvalue %"int[]" %6, i64 3, 1
  %8 = extractvalue %"int[]" %7, 0
  %9 = extractvalue %"int[]" %4, 0
  store %"int[]" %4, %"int[]"* %taddr, align 8
  %10 = getelementptr inbounds %"int[]", %"int[]"* %taddr, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = mul i64 %11, 4
  %13 = bitcast i32* %8 to i8*
  %14 = bitcast i32* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 %12, i1 false)
  %15 = bitcast [6 x i32]* %y to i8*
  %16 = insertvalue %variant undef, i8* %15, 0
  %17 = insertvalue %variant %16, i64 ptrtoint (%.introspect* @"ct$a6$int" to i64), 1
  %18 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 0
  store %variant %17, %variant* %18, align 16
  %19 = bitcast [7 x i32]* %z to i8*
  %20 = insertvalue %variant undef, i8* %19, 0
  %21 = insertvalue %variant %20, i64 ptrtoint (%.introspect* @"ct$a7$int" to i64), 1
  %22 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 1
  store %variant %21, %variant* %22, align 16
  %23 = bitcast [2 x %variant]* %varargslots to %variant*
  %24 = insertvalue %"variant[]" undef, %variant* %23, 0
  %25 = insertvalue %"variant[]" %24, i64 2, 1
  store %"variant[]" %25, %"variant[]"* %taddr1, align 8
  %26 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %lo = load i8*, i8** %27, align 8
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %hi = load i64, i64* %28, align 8
  %29 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i64 5, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %29, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %30 = getelementptr inbounds [7 x i32], [7 x i32]* %z, i64 0, i64 5
  %31 = insertvalue %"int[]" undef, i32* %30, 0
  %32 = insertvalue %"int[]" %31, i64 2, 1
  %33 = getelementptr inbounds [6 x i32], [6 x i32]* %y, i64 0, i64 4
  %34 = insertvalue %"int[]" undef, i32* %33, 0
  %35 = insertvalue %"int[]" %34, i64 2, 1
  %36 = extractvalue %"int[]" %35, 0
  %37 = extractvalue %"int[]" %32, 0
  store %"int[]" %32, %"int[]"* %taddr2, align 8
  %38 = getelementptr inbounds %"int[]", %"int[]"* %taddr2, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = mul i64 %39, 4
  %41 = bitcast i32* %36 to i8*
  %42 = bitcast i32* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 %40, i1 false)
  %43 = bitcast [6 x i32]* %y to i8*
  %44 = insertvalue %variant undef, i8* %43, 0
  %45 = insertvalue %variant %44, i64 ptrtoint (%.introspect* @"ct$a6$int" to i64), 1
  %46 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots4, i64 0, i64 0
  store %variant %45, %variant* %46, align 16
  %47 = bitcast [7 x i32]* %z to i8*
  %48 = insertvalue %variant undef, i8* %47, 0
  %49 = insertvalue %variant %48, i64 ptrtoint (%.introspect* @"ct$a7$int" to i64), 1
  %50 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots4, i64 0, i64 1
  store %variant %49, %variant* %50, align 16
  %51 = bitcast [2 x %variant]* %varargslots4 to %variant*
  %52 = insertvalue %"variant[]" undef, %variant* %51, 0
  %53 = insertvalue %"variant[]" %52, i64 2, 1
  store %"variant[]" %53, %"variant[]"* %taddr5, align 8
  %54 = bitcast %"variant[]"* %taddr5 to { i8*, i64 }*
  %55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %54, i32 0, i32 0
  %lo6 = load i8*, i8** %55, align 8
  %56 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %54, i32 0, i32 1
  %hi7 = load i64, i64* %56, align 8
  %57 = call i64 @std_io_printfln(i64* %retparam3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 5, i8* %lo6, i64 %hi7)
  %not_err8 = icmp eq i64 %57, 0
  br i1 %not_err8, label %after_check9, label %voiderr10

after_check9:                                     ; preds = %voiderr
  br label %voiderr10

voiderr10:                                        ; preds = %after_check9, %voiderr
  %58 = getelementptr inbounds [1 x %"int[]"], [1 x %"int[]"]* %literal, i64 0, i64 0
  %59 = getelementptr inbounds [1 x i32], [1 x i32]* %literal11, i64 0, i64 0
  store i32 1, i32* %59, align 4
  %60 = bitcast [1 x i32]* %literal11 to i32*
  %61 = insertvalue %"int[]" undef, i32* %60, 0
  %62 = insertvalue %"int[]" %61, i64 1, 1
  store %"int[]" %62, %"int[]"* %58, align 8
  %63 = bitcast [1 x %"int[]"]* %literal to %"int[]"*
  %64 = insertvalue %"int[][]" undef, %"int[]"* %63, 0
  %65 = insertvalue %"int[][]" %64, i64 1, 1
  store %"int[][]" %65, %"int[][]"* %a, align 8
  %66 = getelementptr inbounds [1 x %"int[]"], [1 x %"int[]"]* %literal12, i64 0, i64 0
  %67 = getelementptr inbounds [1 x i32], [1 x i32]* %literal13, i64 0, i64 0
  store i32 2, i32* %67, align 4
  %68 = bitcast [1 x i32]* %literal13 to i32*
  %69 = insertvalue %"int[]" undef, i32* %68, 0
  %70 = insertvalue %"int[]" %69, i64 1, 1
  store %"int[]" %70, %"int[]"* %66, align 8
  %71 = bitcast [1 x %"int[]"]* %literal12 to %"int[]"*
  %72 = insertvalue %"int[][]" undef, %"int[]"* %71, 0
  %73 = insertvalue %"int[][]" %72, i64 1, 1
  store %"int[][]" %73, %"int[][]"* %b, align 8
  %74 = bitcast %"int[][]"* %a to i8*
  %75 = insertvalue %variant undef, i8* %74, 0
  %76 = insertvalue %variant %75, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %77 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots15, i64 0, i64 0
  store %variant %76, %variant* %77, align 16
  %78 = bitcast [1 x %variant]* %varargslots15 to %variant*
  %79 = insertvalue %"variant[]" undef, %variant* %78, 0
  %80 = insertvalue %"variant[]" %79, i64 1, 1
  store %"variant[]" %80, %"variant[]"* %taddr16, align 8
  %81 = bitcast %"variant[]"* %taddr16 to { i8*, i64 }*
  %82 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %81, i32 0, i32 0
  %lo17 = load i8*, i8** %82, align 8
  %83 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %81, i32 0, i32 1
  %hi18 = load i64, i64* %83, align 8
  %84 = call i64 @std_io_printfln(i64* %retparam14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2, i8* %lo17, i64 %hi18)
  %not_err19 = icmp eq i64 %84, 0
  br i1 %not_err19, label %after_check20, label %voiderr21

after_check20:                                    ; preds = %voiderr10
  br label %voiderr21

voiderr21:                                        ; preds = %after_check20, %voiderr10
  %85 = load %"int[][]", %"int[][]"* %b, align 8
  %86 = extractvalue %"int[][]" %85, 0
  %ptroffset = getelementptr inbounds %"int[]", %"int[]"* %86, i64 0
  %87 = insertvalue %"int[][]" undef, %"int[]"* %ptroffset, 0
  %88 = insertvalue %"int[][]" %87, i64 1, 1
  %89 = load %"int[][]", %"int[][]"* %a, align 8
  %90 = extractvalue %"int[][]" %89, 0
  %ptroffset22 = getelementptr inbounds %"int[]", %"int[]"* %90, i64 0
  %91 = insertvalue %"int[][]" undef, %"int[]"* %ptroffset22, 0
  %92 = insertvalue %"int[][]" %91, i64 1, 1
  %93 = extractvalue %"int[][]" %92, 0
  %94 = extractvalue %"int[][]" %88, 0
  store %"int[][]" %88, %"int[][]"* %taddr23, align 8
  %95 = getelementptr inbounds %"int[][]", %"int[][]"* %taddr23, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = mul i64 %96, 16
  %98 = bitcast %"int[]"* %93 to i8*
  %99 = bitcast %"int[]"* %94 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 %97, i1 false)
  %100 = bitcast %"int[][]"* %a to i8*
  %101 = insertvalue %variant undef, i8* %100, 0
  %102 = insertvalue %variant %101, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %103 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots25, i64 0, i64 0
  store %variant %102, %variant* %103, align 16
  %104 = bitcast [1 x %variant]* %varargslots25 to %variant*
  %105 = insertvalue %"variant[]" undef, %variant* %104, 0
  %106 = insertvalue %"variant[]" %105, i64 1, 1
  store %"variant[]" %106, %"variant[]"* %taddr26, align 8
  %107 = bitcast %"variant[]"* %taddr26 to { i8*, i64 }*
  %108 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %107, i32 0, i32 0
  %lo27 = load i8*, i8** %108, align 8
  %109 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %107, i32 0, i32 1
  %hi28 = load i64, i64* %109, align 8
  %110 = call i64 @std_io_printfln(i64* %retparam24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2, i8* %lo27, i64 %hi28)
  %not_err29 = icmp eq i64 %110, 0
  br i1 %not_err29, label %after_check30, label %voiderr31

after_check30:                                    ; preds = %voiderr21
  br label %voiderr31

voiderr31:                                        ; preds = %after_check30, %voiderr21
  %111 = getelementptr inbounds [6 x i32], [6 x i32]* %y, i64 0, i64 2
  %112 = insertvalue %"int[]" undef, i32* %111, 0
  %113 = insertvalue %"int[]" %112, i64 3, 1
  %114 = load %"int[][]", %"int[][]"* %a, align 8
  %115 = extractvalue %"int[][]" %114, 0
  %ptroffset32 = getelementptr inbounds %"int[]", %"int[]"* %115, i64 0
  store %"int[]" %113, %"int[]"* %ptroffset32, align 8
  %116 = bitcast %"int[][]"* %a to i8*
  %117 = insertvalue %variant undef, i8* %116, 0
  %118 = insertvalue %variant %117, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %119 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots34, i64 0, i64 0
  store %variant %118, %variant* %119, align 16
  %120 = bitcast [1 x %variant]* %varargslots34 to %variant*
  %121 = insertvalue %"variant[]" undef, %variant* %120, 0
  %122 = insertvalue %"variant[]" %121, i64 1, 1
  store %"variant[]" %122, %"variant[]"* %taddr35, align 8
  %123 = bitcast %"variant[]"* %taddr35 to { i8*, i64 }*
  %124 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %123, i32 0, i32 0
  %lo36 = load i8*, i8** %124, align 8
  %125 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %123, i32 0, i32 1
  %hi37 = load i64, i64* %125, align 8
  %126 = call i64 @std_io_printfln(i64* %retparam33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i64 2, i8* %lo36, i64 %hi37)
  %not_err38 = icmp eq i64 %126, 0
  br i1 %not_err38, label %after_check39, label %voiderr40

after_check39:                                    ; preds = %voiderr31
  br label %voiderr40

voiderr40:                                        ; preds = %after_check39, %voiderr31
  ret void
}
