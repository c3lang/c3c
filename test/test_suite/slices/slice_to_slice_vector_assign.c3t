// #target: macos-x64
module test;
import std::io;

fn void main()
{
	int[<*>] z = { 1, 2, 3, 4, 5, 6, 7 };
	int[<6>] y;
	y[1..3] = z[3..5];
	io::printfln("%s %s", y, z);
	y[4..] = z[5..6];
	io::printfln("%s %s", y, z);
	int[][] a = { int[] { 1 } };
	int[][] b = { int[] { 2 } };
	io::printfln("%s", a);
	a[0..0] = b[0..0];
	io::printfln("%s", a);
	a[0..0] = y[2..4];
	io::printfln("%s", a);
}
/* #expect: test.ll

define void @test_main() #0 {
entry:
  %z = alloca <7 x i32>, align 32
  %y = alloca <6 x i32>, align 32
  %taddr = alloca %"int[]", align 8
  %retparam = alloca i64, align 8
  %varargslots = alloca [2 x %variant], align 16
  %taddr1 = alloca %"variant[]", align 8
  %taddr2 = alloca %"int[]", align 8
  %retparam3 = alloca i64, align 8
  %varargslots4 = alloca [2 x %variant], align 16
  %taddr5 = alloca %"variant[]", align 8
  %a = alloca %"int[][]", align 8
  %literal = alloca [1 x %"int[]"], align 16
  %literal11 = alloca [1 x i32], align 4
  %b = alloca %"int[][]", align 8
  %literal12 = alloca [1 x %"int[]"], align 16
  %literal13 = alloca [1 x i32], align 4
  %retparam14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %variant], align 16
  %taddr16 = alloca %"variant[]", align 8
  %taddr23 = alloca %"int[][]", align 8
  %retparam24 = alloca i64, align 8
  %varargslots25 = alloca [1 x %variant], align 16
  %taddr26 = alloca %"variant[]", align 8
  %retparam33 = alloca i64, align 8
  %varargslots34 = alloca [1 x %variant], align 16
  %taddr35 = alloca %"variant[]", align 8
  store <7 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, <7 x i32>* %z, align 32
  store <6 x i32> zeroinitializer, <6 x i32>* %y, align 32
  %0 = getelementptr inbounds <7 x i32>, <7 x i32>* %z, i64 0, i64 3
  %1 = insertvalue %"int[]" undef, i32* %0, 0
  %2 = insertvalue %"int[]" %1, i64 3, 1
  %3 = getelementptr inbounds <6 x i32>, <6 x i32>* %y, i64 0, i64 1
  %4 = insertvalue %"int[]" undef, i32* %3, 0
  %5 = insertvalue %"int[]" %4, i64 3, 1
  %6 = extractvalue %"int[]" %5, 0
  %7 = extractvalue %"int[]" %2, 0
  store %"int[]" %2, %"int[]"* %taddr, align 8
  %8 = getelementptr inbounds %"int[]", %"int[]"* %taddr, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, 4
  %11 = bitcast i32* %6 to i8*
  %12 = bitcast i32* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 %10, i1 false)
  %13 = bitcast <6 x i32>* %y to i8*
  %14 = insertvalue %variant undef, i8* %13, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (%.introspect* @"ct$v6$int" to i64), 1
  %16 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 0
  store %variant %15, %variant* %16, align 16
  %17 = bitcast <7 x i32>* %z to i8*
  %18 = insertvalue %variant undef, i8* %17, 0
  %19 = insertvalue %variant %18, i64 ptrtoint (%.introspect* @"ct$v7$int" to i64), 1
  %20 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots, i64 0, i64 1
  store %variant %19, %variant* %20, align 16
  %21 = bitcast [2 x %variant]* %varargslots to %variant*
  %22 = insertvalue %"variant[]" undef, %variant* %21, 0
  %23 = insertvalue %"variant[]" %22, i64 2, 1
  store %"variant[]" %23, %"variant[]"* %taddr1, align 8
  %24 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %24, i32 0, i32 0
  %lo = load i8*, i8** %25, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %24, i32 0, i32 1
  %hi = load i64, i64* %26, align 8
  %27 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i64 5, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %27, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %28 = getelementptr inbounds <7 x i32>, <7 x i32>* %z, i64 0, i64 5
  %29 = insertvalue %"int[]" undef, i32* %28, 0
  %30 = insertvalue %"int[]" %29, i64 2, 1
  %31 = getelementptr inbounds <6 x i32>, <6 x i32>* %y, i64 0, i64 4
  %32 = insertvalue %"int[]" undef, i32* %31, 0
  %33 = insertvalue %"int[]" %32, i64 2, 1
  %34 = extractvalue %"int[]" %33, 0
  %35 = extractvalue %"int[]" %30, 0
  store %"int[]" %30, %"int[]"* %taddr2, align 8
  %36 = getelementptr inbounds %"int[]", %"int[]"* %taddr2, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, 4
  %39 = bitcast i32* %34 to i8*
  %40 = bitcast i32* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %38, i1 false)
  %41 = bitcast <6 x i32>* %y to i8*
  %42 = insertvalue %variant undef, i8* %41, 0
  %43 = insertvalue %variant %42, i64 ptrtoint (%.introspect* @"ct$v6$int" to i64), 1
  %44 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots4, i64 0, i64 0
  store %variant %43, %variant* %44, align 16
  %45 = bitcast <7 x i32>* %z to i8*
  %46 = insertvalue %variant undef, i8* %45, 0
  %47 = insertvalue %variant %46, i64 ptrtoint (%.introspect* @"ct$v7$int" to i64), 1
  %48 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots4, i64 0, i64 1
  store %variant %47, %variant* %48, align 16
  %49 = bitcast [2 x %variant]* %varargslots4 to %variant*
  %50 = insertvalue %"variant[]" undef, %variant* %49, 0
  %51 = insertvalue %"variant[]" %50, i64 2, 1
  store %"variant[]" %51, %"variant[]"* %taddr5, align 8
  %52 = bitcast %"variant[]"* %taddr5 to { i8*, i64 }*
  %53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %52, i32 0, i32 0
  %lo6 = load i8*, i8** %53, align 8
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %52, i32 0, i32 1
  %hi7 = load i64, i64* %54, align 8
  %55 = call i64 @std_io_printfln(i64* %retparam3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 5, i8* %lo6, i64 %hi7)
  %not_err8 = icmp eq i64 %55, 0
  br i1 %not_err8, label %after_check9, label %voiderr10

after_check9:                                     ; preds = %voiderr
  br label %voiderr10

voiderr10:                                        ; preds = %after_check9, %voiderr
  %56 = getelementptr inbounds [1 x %"int[]"], [1 x %"int[]"]* %literal, i64 0, i64 0
  %57 = getelementptr inbounds [1 x i32], [1 x i32]* %literal11, i64 0, i64 0
  store i32 1, i32* %57, align 4
  %58 = bitcast [1 x i32]* %literal11 to i32*
  %59 = insertvalue %"int[]" undef, i32* %58, 0
  %60 = insertvalue %"int[]" %59, i64 1, 1
  store %"int[]" %60, %"int[]"* %56, align 8
  %61 = bitcast [1 x %"int[]"]* %literal to %"int[]"*
  %62 = insertvalue %"int[][]" undef, %"int[]"* %61, 0
  %63 = insertvalue %"int[][]" %62, i64 1, 1
  store %"int[][]" %63, %"int[][]"* %a, align 8
  %64 = getelementptr inbounds [1 x %"int[]"], [1 x %"int[]"]* %literal12, i64 0, i64 0
  %65 = getelementptr inbounds [1 x i32], [1 x i32]* %literal13, i64 0, i64 0
  store i32 2, i32* %65, align 4
  %66 = bitcast [1 x i32]* %literal13 to i32*
  %67 = insertvalue %"int[]" undef, i32* %66, 0
  %68 = insertvalue %"int[]" %67, i64 1, 1
  store %"int[]" %68, %"int[]"* %64, align 8
  %69 = bitcast [1 x %"int[]"]* %literal12 to %"int[]"*
  %70 = insertvalue %"int[][]" undef, %"int[]"* %69, 0
  %71 = insertvalue %"int[][]" %70, i64 1, 1
  store %"int[][]" %71, %"int[][]"* %b, align 8
  %72 = bitcast %"int[][]"* %a to i8*
  %73 = insertvalue %variant undef, i8* %72, 0
  %74 = insertvalue %variant %73, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %75 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots15, i64 0, i64 0
  store %variant %74, %variant* %75, align 16
  %76 = bitcast [1 x %variant]* %varargslots15 to %variant*
  %77 = insertvalue %"variant[]" undef, %variant* %76, 0
  %78 = insertvalue %"variant[]" %77, i64 1, 1
  store %"variant[]" %78, %"variant[]"* %taddr16, align 8
  %79 = bitcast %"variant[]"* %taddr16 to { i8*, i64 }*
  %80 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %79, i32 0, i32 0
  %lo17 = load i8*, i8** %80, align 8
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %79, i32 0, i32 1
  %hi18 = load i64, i64* %81, align 8
  %82 = call i64 @std_io_printfln(i64* %retparam14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2, i8* %lo17, i64 %hi18)
  %not_err19 = icmp eq i64 %82, 0
  br i1 %not_err19, label %after_check20, label %voiderr21

after_check20:                                    ; preds = %voiderr10
  br label %voiderr21

voiderr21:                                        ; preds = %after_check20, %voiderr10
  %83 = load %"int[][]", %"int[][]"* %b, align 8
  %84 = extractvalue %"int[][]" %83, 0
  %ptroffset = getelementptr inbounds %"int[]", %"int[]"* %84, i64 0
  %85 = insertvalue %"int[][]" undef, %"int[]"* %ptroffset, 0
  %86 = insertvalue %"int[][]" %85, i64 1, 1
  %87 = load %"int[][]", %"int[][]"* %a, align 8
  %88 = extractvalue %"int[][]" %87, 0
  %ptroffset22 = getelementptr inbounds %"int[]", %"int[]"* %88, i64 0
  %89 = insertvalue %"int[][]" undef, %"int[]"* %ptroffset22, 0
  %90 = insertvalue %"int[][]" %89, i64 1, 1
  %91 = extractvalue %"int[][]" %90, 0
  %92 = extractvalue %"int[][]" %86, 0
  store %"int[][]" %86, %"int[][]"* %taddr23, align 8
  %93 = getelementptr inbounds %"int[][]", %"int[][]"* %taddr23, i32 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = mul i64 %94, 16
  %96 = bitcast %"int[]"* %91 to i8*
  %97 = bitcast %"int[]"* %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 %95, i1 false)
  %98 = bitcast %"int[][]"* %a to i8*
  %99 = insertvalue %variant undef, i8* %98, 0
  %100 = insertvalue %variant %99, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %101 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots25, i64 0, i64 0
  store %variant %100, %variant* %101, align 16
  %102 = bitcast [1 x %variant]* %varargslots25 to %variant*
  %103 = insertvalue %"variant[]" undef, %variant* %102, 0
  %104 = insertvalue %"variant[]" %103, i64 1, 1
  store %"variant[]" %104, %"variant[]"* %taddr26, align 8
  %105 = bitcast %"variant[]"* %taddr26 to { i8*, i64 }*
  %106 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %105, i32 0, i32 0
  %lo27 = load i8*, i8** %106, align 8
  %107 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %105, i32 0, i32 1
  %hi28 = load i64, i64* %107, align 8
  %108 = call i64 @std_io_printfln(i64* %retparam24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2, i8* %lo27, i64 %hi28)
  %not_err29 = icmp eq i64 %108, 0
  br i1 %not_err29, label %after_check30, label %voiderr31

after_check30:                                    ; preds = %voiderr21
  br label %voiderr31

voiderr31:                                        ; preds = %after_check30, %voiderr21
  %109 = getelementptr inbounds <6 x i32>, <6 x i32>* %y, i64 0, i64 2
  %110 = insertvalue %"int[]" undef, i32* %109, 0
  %111 = insertvalue %"int[]" %110, i64 3, 1
  %112 = load %"int[][]", %"int[][]"* %a, align 8
  %113 = extractvalue %"int[][]" %112, 0
  %ptroffset32 = getelementptr inbounds %"int[]", %"int[]"* %113, i64 0
  store %"int[]" %111, %"int[]"* %ptroffset32, align 8
  %114 = bitcast %"int[][]"* %a to i8*
  %115 = insertvalue %variant undef, i8* %114, 0
  %116 = insertvalue %variant %115, i64 ptrtoint (%.introspect* @"ct$sa$sa$int" to i64), 1
  %117 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots34, i64 0, i64 0
  store %variant %116, %variant* %117, align 16
  %118 = bitcast [1 x %variant]* %varargslots34 to %variant*
  %119 = insertvalue %"variant[]" undef, %variant* %118, 0
  %120 = insertvalue %"variant[]" %119, i64 1, 1
  store %"variant[]" %120, %"variant[]"* %taddr35, align 8
  %121 = bitcast %"variant[]"* %taddr35 to { i8*, i64 }*
  %122 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %121, i32 0, i32 0
  %lo36 = load i8*, i8** %122, align 8
  %123 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %121, i32 0, i32 1
  %hi37 = load i64, i64* %123, align 8
  %124 = call i64 @std_io_printfln(i64* %retparam33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i64 2, i8* %lo36, i64 %hi37)
  %not_err38 = icmp eq i64 %124, 0
  br i1 %not_err38, label %after_check39, label %voiderr40

after_check39:                                    ; preds = %voiderr31
  br label %voiderr40

voiderr40:                                        ; preds = %after_check39, %voiderr31
  ret void
}
