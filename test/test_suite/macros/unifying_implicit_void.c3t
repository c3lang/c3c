// #target: macos-x64
module oups;
import std::io;

fn void! main()
{
	ByteReader r;
	InStream* s = &r;
	s.foo()!;
}

macro InStream.foo(&self)
{
	char! c = self.read_byte();
	if (catch err = c)
	{
		return err?;
	}
	return;
}


/* #expect: oups.ll


define i64 @oups.main() #0 {
entry:
  %r = alloca %ByteReader, align 8
  %s = alloca %"any*", align 8
  %error_var = alloca i64, align 8
  %self = alloca %"any*", align 8
  %c = alloca i8, align 1
  %c.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %retparam = alloca i8, align 1
  %err = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %r, i8 0, i64 24, i1 false)
  %0 = insertvalue %"any*" undef, ptr %r, 0
  %1 = insertvalue %"any*" %0, i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64), 1
  store %"any*" %1, ptr %s, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %self, ptr align 8 %s, i32 16, i1 false)
  %2 = getelementptr inbounds %"any*", ptr %self, i32 0, i32 1
  %3 = load i64, ptr %2, align 8
  %4 = getelementptr inbounds %"any*", ptr %self, i32 0, i32 0
  %5 = inttoptr i64 %3 to ptr
  %type = load ptr, ptr %.cachedtype, align 8
  %6 = icmp eq ptr %5, %type
  br i1 %6, label %cache_hit, label %cache_miss
cache_miss:                                       ; preds = %entry
  %7 = getelementptr inbounds %.introspect, ptr %5, i32 0, i32 2
  %8 = load ptr, ptr %7, align 8
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.read_byte")
  store ptr %9, ptr %.inlinecache, align 8
  store ptr %5, ptr %.cachedtype, align 8
  br label %10
cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %10
10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ]
  %11 = icmp eq ptr %fn_phi, null
  br i1 %11, label %missing_function, label %match
missing_function:                                 ; preds = %10
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr @.panic_msg, i64 46, ptr @.file, i64 25, ptr @.func, i64 4, i32 13)
  unreachable
match:                                            ; preds = %10
  %13 = load ptr, ptr %4, align 8
  %14 = call i64 %fn_phi(ptr %retparam, ptr %13)
  %not_err = icmp eq i64 %14, 0
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %15, label %after_check, label %assign_optional
assign_optional:                                  ; preds = %match
  store i64 %14, ptr %c.f, align 8
  br label %after_assign
after_check:                                      ; preds = %match
  %16 = load i8, ptr %retparam, align 1
  store i8 %16, ptr %c, align 1
  store i64 0, ptr %c.f, align 8
  br label %after_assign
after_assign:                                     ; preds = %after_check, %assign_optional
  br label %testblock
testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %c.f, align 8
  %not_err1 = icmp eq i64 %optval, 0
  %17 = call i1 @llvm.expect.i1(i1 %not_err1, i1 true)
  br i1 %17, label %after_check3, label %assign_optional2
assign_optional2:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8
  br label %end_block
after_check3:                                     ; preds = %testblock
  store i64 0, ptr %err, align 8
  br label %end_block
end_block:                                        ; preds = %after_check3, %assign_optional2
  %18 = load i64, ptr %err, align 8
  %neq = icmp ne i64 %18, 0
  br i1 %neq, label %if.then, label %if.exit
if.then:                                          ; preds = %end_block
  %19 = load i64, ptr %err, align 8
  store i64 %19, ptr %error_var, align 8
  br label %guard_block
if.exit:                                          ; preds = %end_block
  br label %noerr_block
guard_block:                                      ; preds = %if.then
  %20 = load i64, ptr %error_var, align 8
  ret i64 %20
noerr_block:                                      ; preds = %if.exit
  ret i64 0
}