// #target: macos-x64
module test;
import std::io;

macro @hello(...)
{
	int[*] a = { 1, $vasplat(), 3 };
	foreach (i, x : a) io::printfn("%d: %d", i, x);
}

macro @hello1(...)
{
	int[*] a = { 1, $vasplat() };
	foreach (i, x : a) io::printfn("x:%d: %d", i, x);
}

macro @hello2(...)
{
	int[*] a = { $vasplat(), 888 };
	foreach (i, x : a) io::printfn("x:%d: %d", i, x);
}

macro @hello3(...)
{
	int[*] a = { $vasplat() };
	foreach (i, x : a) io::printfn("x:%d: %d", i, x);
}

macro @hello4(...)
{
	int[*] a = { 5, $vasplat(2..4), 77 };
	foreach (i, x : a) io::printfn("y:%d: %d", i, x);
}

macro @hello5(...)
{
	int[*] a = { 5, $vasplat(2..), 77 };
	foreach (i, x : a) io::printfn("y:%d: %d", i, x);
	int[*] b = { 55, $vasplat(2..^2), 88 };
	foreach (i, x : b) io::printfn("z:%d: %d", i, x);
	int[*] c = { 55, $vasplat(0:^2), 88 };
	foreach (i, x : c) io::printfn("zz:%d: %d", i, x);
}

macro @hello6(...)
{
	@hello(66, $vasplat());
}
fn void main()
{
  @hello1(223, 326);
  @hello1();
  @hello(26, 36);
  @hello();
  @hello2(2123, 3326);
  @hello2();
  @hello3(2123, 3326);
  @hello4(1, 2, 3, 4, 5, 6, 7, 8);
  @hello5(1, 2, 3, 4, 5, 6, 7, 8);
  @hello6(1, 2, 3);
}

/* #expect: test.ll

define void @test.main() #0 {
entry:
  %a = alloca [3 x i32], align 4
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %x = alloca i32, align 4
  %varargslots = alloca [2 x %"any*"], align 16
  %retparam = alloca i64, align 8
  %a1 = alloca [1 x i32], align 4
  %.anon2 = alloca i64, align 8
  %i3 = alloca i64, align 8
  %x4 = alloca i32, align 4
  %varargslots5 = alloca [2 x %"any*"], align 16
  %retparam7 = alloca i64, align 8
  %a8 = alloca [4 x i32], align 16
  %.anon9 = alloca i64, align 8
  %i13 = alloca i64, align 8
  %x14 = alloca i32, align 4
  %varargslots16 = alloca [2 x %"any*"], align 16
  %retparam18 = alloca i64, align 8
  %a21 = alloca [2 x i32], align 4
  %.anon22 = alloca i64, align 8
  %i26 = alloca i64, align 8
  %x27 = alloca i32, align 4
  %varargslots29 = alloca [2 x %"any*"], align 16
  %retparam31 = alloca i64, align 8
  %a34 = alloca [3 x i32], align 4
  %.anon35 = alloca i64, align 8
  %i39 = alloca i64, align 8
  %x40 = alloca i32, align 4
  %varargslots42 = alloca [2 x %"any*"], align 16
  %retparam44 = alloca i64, align 8
  %a47 = alloca [1 x i32], align 4
  %.anon48 = alloca i64, align 8
  %i49 = alloca i64, align 8
  %x50 = alloca i32, align 4
  %varargslots51 = alloca [2 x %"any*"], align 16
  %retparam53 = alloca i64, align 8
  %a54 = alloca [2 x i32], align 4
  %.anon55 = alloca i64, align 8
  %i59 = alloca i64, align 8
  %x60 = alloca i32, align 4
  %varargslots62 = alloca [2 x %"any*"], align 16
  %retparam64 = alloca i64, align 8
  %a67 = alloca [5 x i32], align 16
  %.anon68 = alloca i64, align 8
  %i72 = alloca i64, align 8
  %x73 = alloca i32, align 4
  %varargslots75 = alloca [2 x %"any*"], align 16
  %retparam77 = alloca i64, align 8
  %a80 = alloca [8 x i32], align 16
  %.anon81 = alloca i64, align 8
  %i85 = alloca i64, align 8
  %x86 = alloca i32, align 4
  %varargslots88 = alloca [2 x %"any*"], align 16
  %retparam90 = alloca i64, align 8
  %b = alloca [7 x i32], align 16
  %.anon93 = alloca i64, align 8
  %i97 = alloca i64, align 8
  %x98 = alloca i32, align 4
  %varargslots100 = alloca [2 x %"any*"], align 16
  %retparam102 = alloca i64, align 8
  %c = alloca [8 x i32], align 16
  %.anon105 = alloca i64, align 8
  %i109 = alloca i64, align 8
  %x110 = alloca i32, align 4
  %varargslots112 = alloca [2 x %"any*"], align 16
  %retparam114 = alloca i64, align 8
  %a117 = alloca [6 x i32], align 16
  %.anon118 = alloca i64, align 8
  %i122 = alloca i64, align 8
  %x123 = alloca i32, align 4
  %varargslots125 = alloca [2 x %"any*"], align 16
  %retparam127 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a, ptr align 4 @.__const, i32 12, i1 false)
  store i64 0, ptr %.anon, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %0 = load i64, ptr %.anon, align 8
  %gt = icmp ugt i64 3, %0
  br i1 %gt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %1 = load i64, ptr %.anon, align 8
  store i64 %1, ptr %i, align 8
  %2 = load i64, ptr %.anon, align 8
  %ptroffset = getelementptr inbounds [4 x i8], ptr %a, i64 %2
  %3 = load i32, ptr %ptroffset, align 4
  store i32 %3, ptr %x, align 4
  %4 = insertvalue %"any*" undef, ptr %i, 0
  %5 = insertvalue %"any*" %4, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %5, ptr %varargslots, align 16
  %6 = insertvalue %"any*" undef, ptr %x, 0
  %7 = insertvalue %"any*" %6, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %"any*" %7, ptr %ptradd, align 16
  %8 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 8, ptr %varargslots, i64 2)
  %9 = load i64, ptr %.anon, align 8
  %add = add i64 %9, 1
  store i64 %add, ptr %.anon, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a1, ptr align 4 @.__const.1, i32 4, i1 false)
  store i64 0, ptr %.anon2, align 8
  %10 = load i64, ptr %.anon2, align 8
  store i64 %10, ptr %i3, align 8
  %11 = load i32, ptr %a1, align 4
  store i32 %11, ptr %x4, align 4
  %12 = insertvalue %"any*" undef, ptr %i3, 0
  %13 = insertvalue %"any*" %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %13, ptr %varargslots5, align 16
  %14 = insertvalue %"any*" undef, ptr %x4, 0
  %15 = insertvalue %"any*" %14, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots5, i64 16
  store %"any*" %15, ptr %ptradd6, align 16
  %16 = call i64 @std.io.printfn(ptr %retparam7, ptr @.str.2, i64 8, ptr %varargslots5, i64 2)
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %a8, ptr align 16 @.__const.3, i32 16, i1 false)
  store i64 0, ptr %.anon9, align 8
  br label %loop.cond10

loop.cond10:                                      ; preds = %loop.body12, %loop.exit
  %17 = load i64, ptr %.anon9, align 8
  %gt11 = icmp ugt i64 4, %17
  br i1 %gt11, label %loop.body12, label %loop.exit20

loop.body12:                                      ; preds = %loop.cond10
  %18 = load i64, ptr %.anon9, align 8
  store i64 %18, ptr %i13, align 8
  %19 = load i64, ptr %.anon9, align 8
  %ptroffset15 = getelementptr inbounds [4 x i8], ptr %a8, i64 %19
  %20 = load i32, ptr %ptroffset15, align 4
  store i32 %20, ptr %x14, align 4
  %21 = insertvalue %"any*" undef, ptr %i13, 0
  %22 = insertvalue %"any*" %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %22, ptr %varargslots16, align 16
  %23 = insertvalue %"any*" undef, ptr %x14, 0
  %24 = insertvalue %"any*" %23, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %"any*" %24, ptr %ptradd17, align 16
  %25 = call i64 @std.io.printfn(ptr %retparam18, ptr @.str.4, i64 6, ptr %varargslots16, i64 2)
  %26 = load i64, ptr %.anon9, align 8
  %add19 = add i64 %26, 1
  store i64 %add19, ptr %.anon9, align 8
  br label %loop.cond10

loop.exit20:                                      ; preds = %loop.cond10
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a21, ptr align 4 @.__const.5, i32 8, i1 false)
  store i64 0, ptr %.anon22, align 8
  br label %loop.cond23

loop.cond23:                                      ; preds = %loop.body25, %loop.exit20
  %27 = load i64, ptr %.anon22, align 8
  %gt24 = icmp ugt i64 2, %27
  br i1 %gt24, label %loop.body25, label %loop.exit33

loop.body25:                                      ; preds = %loop.cond23
  %28 = load i64, ptr %.anon22, align 8
  store i64 %28, ptr %i26, align 8
  %29 = load i64, ptr %.anon22, align 8
  %ptroffset28 = getelementptr inbounds [4 x i8], ptr %a21, i64 %29
  %30 = load i32, ptr %ptroffset28, align 4
  store i32 %30, ptr %x27, align 4
  %31 = insertvalue %"any*" undef, ptr %i26, 0
  %32 = insertvalue %"any*" %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %32, ptr %varargslots29, align 16
  %33 = insertvalue %"any*" undef, ptr %x27, 0
  %34 = insertvalue %"any*" %33, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %"any*" %34, ptr %ptradd30, align 16
  %35 = call i64 @std.io.printfn(ptr %retparam31, ptr @.str.6, i64 6, ptr %varargslots29, i64 2)
  %36 = load i64, ptr %.anon22, align 8
  %add32 = add i64 %36, 1
  store i64 %add32, ptr %.anon22, align 8
  br label %loop.cond23

loop.exit33:                                      ; preds = %loop.cond23
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a34, ptr align 4 @.__const.7, i32 12, i1 false)
  store i64 0, ptr %.anon35, align 8
  br label %loop.cond36

loop.cond36:                                      ; preds = %loop.body38, %loop.exit33
  %37 = load i64, ptr %.anon35, align 8
  %gt37 = icmp ugt i64 3, %37
  br i1 %gt37, label %loop.body38, label %loop.exit46

loop.body38:                                      ; preds = %loop.cond36
  %38 = load i64, ptr %.anon35, align 8
  store i64 %38, ptr %i39, align 8
  %39 = load i64, ptr %.anon35, align 8
  %ptroffset41 = getelementptr inbounds [4 x i8], ptr %a34, i64 %39
  %40 = load i32, ptr %ptroffset41, align 4
  store i32 %40, ptr %x40, align 4
  %41 = insertvalue %"any*" undef, ptr %i39, 0
  %42 = insertvalue %"any*" %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %42, ptr %varargslots42, align 16
  %43 = insertvalue %"any*" undef, ptr %x40, 0
  %44 = insertvalue %"any*" %43, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %"any*" %44, ptr %ptradd43, align 16
  %45 = call i64 @std.io.printfn(ptr %retparam44, ptr @.str.8, i64 8, ptr %varargslots42, i64 2)
  %46 = load i64, ptr %.anon35, align 8
  %add45 = add i64 %46, 1
  store i64 %add45, ptr %.anon35, align 8
  br label %loop.cond36

loop.exit46:                                      ; preds = %loop.cond36
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a47, ptr align 4 @.__const.9, i32 4, i1 false)
  store i64 0, ptr %.anon48, align 8
  %47 = load i64, ptr %.anon48, align 8
  store i64 %47, ptr %i49, align 8
  %48 = load i32, ptr %a47, align 4
  store i32 %48, ptr %x50, align 4
  %49 = insertvalue %"any*" undef, ptr %i49, 0
  %50 = insertvalue %"any*" %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %50, ptr %varargslots51, align 16
  %51 = insertvalue %"any*" undef, ptr %x50, 0
  %52 = insertvalue %"any*" %51, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %"any*" %52, ptr %ptradd52, align 16
  %53 = call i64 @std.io.printfn(ptr %retparam53, ptr @.str.10, i64 8, ptr %varargslots51, i64 2)
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %a54, ptr align 4 @.__const.11, i32 8, i1 false)
  store i64 0, ptr %.anon55, align 8
  br label %loop.cond56

loop.cond56:                                      ; preds = %loop.body58, %loop.exit46
  %54 = load i64, ptr %.anon55, align 8
  %gt57 = icmp ugt i64 2, %54
  br i1 %gt57, label %loop.body58, label %loop.exit66

loop.body58:                                      ; preds = %loop.cond56
  %55 = load i64, ptr %.anon55, align 8
  store i64 %55, ptr %i59, align 8
  %56 = load i64, ptr %.anon55, align 8
  %ptroffset61 = getelementptr inbounds [4 x i8], ptr %a54, i64 %56
  %57 = load i32, ptr %ptroffset61, align 4
  store i32 %57, ptr %x60, align 4
  %58 = insertvalue %"any*" undef, ptr %i59, 0
  %59 = insertvalue %"any*" %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %59, ptr %varargslots62, align 16
  %60 = insertvalue %"any*" undef, ptr %x60, 0
  %61 = insertvalue %"any*" %60, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %"any*" %61, ptr %ptradd63, align 16
  %62 = call i64 @std.io.printfn(ptr %retparam64, ptr @.str.12, i64 8, ptr %varargslots62, i64 2)
  %63 = load i64, ptr %.anon55, align 8
  %add65 = add i64 %63, 1
  store i64 %add65, ptr %.anon55, align 8
  br label %loop.cond56

loop.exit66:                                      ; preds = %loop.cond56
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %a67, ptr align 16 @.__const.13, i32 20, i1 false)
  store i64 0, ptr %.anon68, align 8
  br label %loop.cond69

loop.cond69:                                      ; preds = %loop.body71, %loop.exit66
  %64 = load i64, ptr %.anon68, align 8
  %gt70 = icmp ugt i64 5, %64
  br i1 %gt70, label %loop.body71, label %loop.exit79

loop.body71:                                      ; preds = %loop.cond69
  %65 = load i64, ptr %.anon68, align 8
  store i64 %65, ptr %i72, align 8
  %66 = load i64, ptr %.anon68, align 8
  %ptroffset74 = getelementptr inbounds [4 x i8], ptr %a67, i64 %66
  %67 = load i32, ptr %ptroffset74, align 4
  store i32 %67, ptr %x73, align 4
  %68 = insertvalue %"any*" undef, ptr %i72, 0
  %69 = insertvalue %"any*" %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %69, ptr %varargslots75, align 16
  %70 = insertvalue %"any*" undef, ptr %x73, 0
  %71 = insertvalue %"any*" %70, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %"any*" %71, ptr %ptradd76, align 16
  %72 = call i64 @std.io.printfn(ptr %retparam77, ptr @.str.14, i64 8, ptr %varargslots75, i64 2)
  %73 = load i64, ptr %.anon68, align 8
  %add78 = add i64 %73, 1
  store i64 %add78, ptr %.anon68, align 8
  br label %loop.cond69

loop.exit79:                                      ; preds = %loop.cond69
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %a80, ptr align 16 @.__const.15, i32 32, i1 false)
  store i64 0, ptr %.anon81, align 8
  br label %loop.cond82

loop.cond82:                                      ; preds = %loop.body84, %loop.exit79
  %74 = load i64, ptr %.anon81, align 8
  %gt83 = icmp ugt i64 8, %74
  br i1 %gt83, label %loop.body84, label %loop.exit92

loop.body84:                                      ; preds = %loop.cond82
  %75 = load i64, ptr %.anon81, align 8
  store i64 %75, ptr %i85, align 8
  %76 = load i64, ptr %.anon81, align 8
  %ptroffset87 = getelementptr inbounds [4 x i8], ptr %a80, i64 %76
  %77 = load i32, ptr %ptroffset87, align 4
  store i32 %77, ptr %x86, align 4
  %78 = insertvalue %"any*" undef, ptr %i85, 0
  %79 = insertvalue %"any*" %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %79, ptr %varargslots88, align 16
  %80 = insertvalue %"any*" undef, ptr %x86, 0
  %81 = insertvalue %"any*" %80, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %"any*" %81, ptr %ptradd89, align 16
  %82 = call i64 @std.io.printfn(ptr %retparam90, ptr @.str.16, i64 8, ptr %varargslots88, i64 2)
  %83 = load i64, ptr %.anon81, align 8
  %add91 = add i64 %83, 1
  store i64 %add91, ptr %.anon81, align 8
  br label %loop.cond82

loop.exit92:                                      ; preds = %loop.cond82
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %b, ptr align 16 @.__const.17, i32 28, i1 false)
  store i64 0, ptr %.anon93, align 8
  br label %loop.cond94

loop.cond94:                                      ; preds = %loop.body96, %loop.exit92
  %84 = load i64, ptr %.anon93, align 8
  %gt95 = icmp ugt i64 7, %84
  br i1 %gt95, label %loop.body96, label %loop.exit104

loop.body96:                                      ; preds = %loop.cond94
  %85 = load i64, ptr %.anon93, align 8
  store i64 %85, ptr %i97, align 8
  %86 = load i64, ptr %.anon93, align 8
  %ptroffset99 = getelementptr inbounds [4 x i8], ptr %b, i64 %86
  %87 = load i32, ptr %ptroffset99, align 4
  store i32 %87, ptr %x98, align 4
  %88 = insertvalue %"any*" undef, ptr %i97, 0
  %89 = insertvalue %"any*" %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %89, ptr %varargslots100, align 16
  %90 = insertvalue %"any*" undef, ptr %x98, 0
  %91 = insertvalue %"any*" %90, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %"any*" %91, ptr %ptradd101, align 16
  %92 = call i64 @std.io.printfn(ptr %retparam102, ptr @.str.18, i64 8, ptr %varargslots100, i64 2)
  %93 = load i64, ptr %.anon93, align 8
  %add103 = add i64 %93, 1
  store i64 %add103, ptr %.anon93, align 8
  br label %loop.cond94

loop.exit104:                                     ; preds = %loop.cond94
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %c, ptr align 16 @.__const.19, i32 32, i1 false)
  store i64 0, ptr %.anon105, align 8
  br label %loop.cond106

loop.cond106:                                     ; preds = %loop.body108, %loop.exit104
  %94 = load i64, ptr %.anon105, align 8
  %gt107 = icmp ugt i64 8, %94
  br i1 %gt107, label %loop.body108, label %loop.exit116

loop.body108:                                     ; preds = %loop.cond106
  %95 = load i64, ptr %.anon105, align 8
  store i64 %95, ptr %i109, align 8
  %96 = load i64, ptr %.anon105, align 8
  %ptroffset111 = getelementptr inbounds [4 x i8], ptr %c, i64 %96
  %97 = load i32, ptr %ptroffset111, align 4
  store i32 %97, ptr %x110, align 4
  %98 = insertvalue %"any*" undef, ptr %i109, 0
  %99 = insertvalue %"any*" %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %99, ptr %varargslots112, align 16
  %100 = insertvalue %"any*" undef, ptr %x110, 0
  %101 = insertvalue %"any*" %100, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd113 = getelementptr inbounds i8, ptr %varargslots112, i64 16
  store %"any*" %101, ptr %ptradd113, align 16
  %102 = call i64 @std.io.printfn(ptr %retparam114, ptr @.str.20, i64 9, ptr %varargslots112, i64 2)
  %103 = load i64, ptr %.anon105, align 8
  %add115 = add i64 %103, 1
  store i64 %add115, ptr %.anon105, align 8
  br label %loop.cond106

loop.exit116:                                     ; preds = %loop.cond106
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %a117, ptr align 16 @.__const.21, i32 24, i1 false)
  store i64 0, ptr %.anon118, align 8
  br label %loop.cond119

loop.cond119:                                     ; preds = %loop.body121, %loop.exit116
  %104 = load i64, ptr %.anon118, align 8
  %gt120 = icmp ugt i64 6, %104
  br i1 %gt120, label %loop.body121, label %loop.exit129

loop.body121:                                     ; preds = %loop.cond119
  %105 = load i64, ptr %.anon118, align 8
  store i64 %105, ptr %i122, align 8
  %106 = load i64, ptr %.anon118, align 8
  %ptroffset124 = getelementptr inbounds [4 x i8], ptr %a117, i64 %106
  %107 = load i32, ptr %ptroffset124, align 4
  store i32 %107, ptr %x123, align 4
  %108 = insertvalue %"any*" undef, ptr %i122, 0
  %109 = insertvalue %"any*" %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"any*" %109, ptr %varargslots125, align 16
  %110 = insertvalue %"any*" undef, ptr %x123, 0
  %111 = insertvalue %"any*" %110, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  %ptradd126 = getelementptr inbounds i8, ptr %varargslots125, i64 16
  store %"any*" %111, ptr %ptradd126, align 16
  %112 = call i64 @std.io.printfn(ptr %retparam127, ptr @.str.22, i64 6, ptr %varargslots125, i64 2)
  %113 = load i64, ptr %.anon118, align 8
  %add128 = add i64 %113, 1
  store i64 %add128, ptr %.anon118, align 8
  br label %loop.cond119

loop.exit129:                                     ; preds = %loop.cond119
  ret void
}
