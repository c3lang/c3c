// #target: x64-darwin

macro testbitcast(expr, $Type)
{
    $assert($sizeof(expr) == $sizeof($Type), "Cannot bitcast between types of different size.");
    $Type x = void;
    var $size = (usize)($sizeof(expr));
    $if ($alignof(expr) >= 8 && $alignof($Type) >= 8):
        ulong *b = (ulong*)(&expr);
        ulong *to = (ulong*)(&x);
        for (usize i = 0; i < $size; i += 8)
        {
            to[i] = b[i];
        }
    $elif ($alignof(expr) >= 4 && $alignof($Type) >= 4):
        uint* b = (uint*)(&expr);
        uint* to = (uint*)(&x);
        for (usize i = 0; i < $size; i += 4)
        {
            to[i] = b[i];
        }
    $elif ($alignof(expr) >= 2 && $alignof($Type) >= 2):
        ushort* b = (ushort*)(&expr);
        ushort* to = (ushort*)(&x);
        for (usize i = 0; i < $size; i += 2)
        {
            to[i] = b[i];
        }
    $else:
        char* b = (char*)(&expr);
        char* to = (char*)(&x);
        for (usize i = 0; i < $size; i++)
        {
            to[i] = b[i];
        }
    $endif;
    return x;
}

extern fn void printf(char*, ...);

struct Foo
{
    short a;
    char b;
    char c;
    short d;
    short e;
}

fn ulong testFoo(short x)
{
    Foo z;
    z.a = x;
    return @testbitcast(z, ulong);
}

fn char[4] test(float x)
{
    return @testbitcast(x, char[4]);
}

fn void main()
{
    float f = 12.353;
    int i = @testbitcast(f, int);
    float f2 = @testbitcast(i, float);
    printf("%f => %d => %f\n", f, i, f2);
    double d = 12.353e267;
    ulong l = @testbitcast(d, ulong);
    double d2 = @testbitcast(d, double);
    printf("%e => %llu => %e\n", d, l, d2);

}

/* #expect: userland_bitcast.ll

%Foo = type { i16, i8, i8, i16, i16 }

@Foo = linkonce_odr constant i8 1
@.str = private constant [16 x i8] c"%f => %d => %f\0A\00", align 1
@.str.1 = private constant [18 x i8] c"%e => %llu => %e\0A\00", align 1

; Function Attrs: nounwind
define i64 @userland_bitcast.testFoo(i16 signext %0) #0 {
entry:
  %x = alloca i16, align 2
  %z = alloca %Foo, align 2
  %expr = alloca %Foo, align 2
  %x1 = alloca i64, align 8
  %b = alloca i16*, align 8
  %to = alloca i16*, align 8
  %i = alloca i64, align 8
  store i16 %0, i16* %x, align 2
  %1 = bitcast %Foo* %z to i8*
  call void @llvm.memset.p0i8.i64(i8* align 2 %1, i8 0, i64 8, i1 false)
  %2 = getelementptr inbounds %Foo, %Foo* %z, i32 0, i32 0
  %3 = load i16, i16* %x, align 2
  store i16 %3, i16* %2, align 2
  %4 = load %Foo, %Foo* %z, align 2
  store %Foo %4, %Foo* %expr, align 2
  %ptrptr = bitcast %Foo* %expr to i16*
  store i16* %ptrptr, i16** %b, align 8
  %ptrptr2 = bitcast i64* %x1 to i16*
  store i16* %ptrptr2, i16** %to, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %i, align 8
  %lt = icmp ult i64 %5, 8
  br i1 %lt, label %for.body, label %for.exit

for.body:                                         ; preds = %for.cond
  %6 = load i16*, i16** %to, align 8
  %7 = load i64, i64* %i, align 8
  %ptroffset = getelementptr inbounds i16, i16* %6, i64 %7
  %8 = load i16*, i16** %b, align 8
  %9 = load i64, i64* %i, align 8
  %ptroffset3 = getelementptr inbounds i16, i16* %8, i64 %9
  %10 = load i16, i16* %ptroffset3, align 2
  store i16 %10, i16* %ptroffset, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64, i64* %i, align 8
  %add = add i64 %11, 2
  store i64 %add, i64* %i, align 8
  br label %for.cond

for.exit:                                         ; preds = %for.cond
  %12 = load i64, i64* %x1, align 8
  ret i64 %12
}

; Function Attrs: nounwind
define i32 @userland_bitcast.test(float %0) #0 {
entry:
  %x = alloca float, align 4
  %expr = alloca float, align 4
  %x1 = alloca [4 x i8], align 1
  %b = alloca i8*, align 8
  %to = alloca i8*, align 8
  %i = alloca i64, align 8
  %tempcoerce = alloca i32, align 4
  store float %0, float* %x, align 4
  %1 = load float, float* %x, align 4
  store float %1, float* %expr, align 4
  %ptrptr = bitcast float* %expr to i8*
  store i8* %ptrptr, i8** %b, align 8
  %ptrptr2 = bitcast [4 x i8]* %x1 to i8*
  store i8* %ptrptr2, i8** %to, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8
  %lt = icmp ult i64 %2, 4
  br i1 %lt, label %for.body, label %for.exit

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %to, align 8
  %4 = load i64, i64* %i, align 8
  %ptroffset = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8*, i8** %b, align 8
  %6 = load i64, i64* %i, align 8
  %ptroffset3 = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8, i8* %ptroffset3, align 1
  store i8 %7, i8* %ptroffset, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %i, align 8
  %add = add i64 %8, 1
  store i64 %add, i64* %i, align 8
  br label %for.cond

for.exit:                                         ; preds = %for.cond
  %9 = bitcast i32* %tempcoerce to i8*
  %10 = bitcast [4 x i8]* %x1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %9, i8* align 1 %10, i32 4, i1 false)
  %11 = load i32, i32* %tempcoerce, align 4
  ret i32 %11
}

; Function Attrs: nounwind
define void @main() #0 {
entry:
  %f = alloca float, align 4
  %i = alloca i32, align 4
  %expr = alloca float, align 4
  %x = alloca i32, align 4
  %b = alloca i32*, align 8
  %to = alloca i32*, align 8
  %i1 = alloca i64, align 8
  %f2 = alloca float, align 4
  %expr3 = alloca i32, align 4
  %x4 = alloca float, align 4
  %b5 = alloca i32*, align 8
  %to6 = alloca i32*, align 8
  %i8 = alloca i64, align 8
  %d = alloca double, align 8
  %l = alloca i64, align 8
  %expr18 = alloca double, align 8
  %x19 = alloca i64, align 8
  %b20 = alloca i64*, align 8
  %to22 = alloca i64*, align 8
  %i23 = alloca i64, align 8
  %d2 = alloca double, align 8
  %expr32 = alloca double, align 8
  %x33 = alloca double, align 8
  %b34 = alloca i64*, align 8
  %to36 = alloca i64*, align 8
  %i38 = alloca i64, align 8
  store float 0x4028B4BC60000000, float* %f, align 4
  %0 = load float, float* %f, align 4
  store float %0, float* %expr, align 4
  %ptrptr = bitcast float* %expr to i32*
  store i32* %ptrptr, i32** %b, align 8
  store i32* %x, i32** %to, align 8
  store i64 0, i64* %i1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i1, align 8
  %lt = icmp ult i64 %1, 4
  br i1 %lt, label %for.body, label %for.exit

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %to, align 8
  %3 = load i64, i64* %i1, align 8
  %ptroffset = getelementptr inbounds i32, i32* %2, i64 %3
  %4 = load i32*, i32** %b, align 8
  %5 = load i64, i64* %i1, align 8
  %ptroffset2 = getelementptr inbounds i32, i32* %4, i64 %5
  %6 = load i32, i32* %ptroffset2, align 4
  store i32 %6, i32* %ptroffset, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %i1, align 8
  %add = add i64 %7, 4
  store i64 %add, i64* %i1, align 8
  br label %for.cond

for.exit:                                         ; preds = %for.cond
  %8 = load i32, i32* %x, align 4
  store i32 %8, i32* %i, align 4
  %9 = load i32, i32* %i, align 4
  store i32 %9, i32* %expr3, align 4
  store i32* %expr3, i32** %b5, align 8
  %ptrptr7 = bitcast float* %x4 to i32*
  store i32* %ptrptr7, i32** %to6, align 8
  store i64 0, i64* %i8, align 8
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc14, %for.exit
  %10 = load i64, i64* %i8, align 8
  %lt10 = icmp ult i64 %10, 4
  br i1 %lt10, label %for.body11, label %for.exit16

for.body11:                                       ; preds = %for.cond9
  %11 = load i32*, i32** %to6, align 8
  %12 = load i64, i64* %i8, align 8
  %ptroffset12 = getelementptr inbounds i32, i32* %11, i64 %12
  %13 = load i32*, i32** %b5, align 8
  %14 = load i64, i64* %i8, align 8
  %ptroffset13 = getelementptr inbounds i32, i32* %13, i64 %14
  %15 = load i32, i32* %ptroffset13, align 4
  store i32 %15, i32* %ptroffset12, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %16 = load i64, i64* %i8, align 8
  %add15 = add i64 %16, 4
  store i64 %add15, i64* %i8, align 8
  br label %for.cond9

for.exit16:                                       ; preds = %for.cond9
  %17 = load float, float* %x4, align 4
  store float %17, float* %f2, align 4
  %18 = load float, float* %f, align 4
  %fpfpext = fpext float %18 to double
  %19 = load i32, i32* %i, align 4
  %20 = load float, float* %f2, align 4
  %fpfpext17 = fpext float %20 to double
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double %fpfpext, i32 %19, double %fpfpext17)
  store double 1.235300e+268, double* %d, align 8
  %21 = load double, double* %d, align 8
  store double %21, double* %expr18, align 8
  %ptrptr21 = bitcast double* %expr18 to i64*
  store i64* %ptrptr21, i64** %b20, align 8
  store i64* %x19, i64** %to22, align 8
  store i64 0, i64* %i23, align 8
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc29, %for.exit16
  %22 = load i64, i64* %i23, align 8
  %lt25 = icmp ult i64 %22, 8
  br i1 %lt25, label %for.body26, label %for.exit31

for.body26:                                       ; preds = %for.cond24
  %23 = load i64*, i64** %to22, align 8
  %24 = load i64, i64* %i23, align 8
  %ptroffset27 = getelementptr inbounds i64, i64* %23, i64 %24
  %25 = load i64*, i64** %b20, align 8
  %26 = load i64, i64* %i23, align 8
  %ptroffset28 = getelementptr inbounds i64, i64* %25, i64 %26
  %27 = load i64, i64* %ptroffset28, align 8
  store i64 %27, i64* %ptroffset27, align 8
  br label %for.inc29

for.inc29:                                        ; preds = %for.body26
  %28 = load i64, i64* %i23, align 8
  %add30 = add i64 %28, 8
  store i64 %add30, i64* %i23, align 8
  br label %for.cond24

for.exit31:                                       ; preds = %for.cond24
  %29 = load i64, i64* %x19, align 8
  store i64 %29, i64* %l, align 8
  %30 = load double, double* %d, align 8
  store double %30, double* %expr32, align 8
  %ptrptr35 = bitcast double* %expr32 to i64*
  store i64* %ptrptr35, i64** %b34, align 8
  %ptrptr37 = bitcast double* %x33 to i64*
  store i64* %ptrptr37, i64** %to36, align 8
  store i64 0, i64* %i38, align 8
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc44, %for.exit31
  %31 = load i64, i64* %i38, align 8
  %lt40 = icmp ult i64 %31, 8
  br i1 %lt40, label %for.body41, label %for.exit46

for.body41:                                       ; preds = %for.cond39
  %32 = load i64*, i64** %to36, align 8
  %33 = load i64, i64* %i38, align 8
  %ptroffset42 = getelementptr inbounds i64, i64* %32, i64 %33
  %34 = load i64*, i64** %b34, align 8
  %35 = load i64, i64* %i38, align 8
  %ptroffset43 = getelementptr inbounds i64, i64* %34, i64 %35
  %36 = load i64, i64* %ptroffset43, align 8
  store i64 %36, i64* %ptroffset42, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body41
  %37 = load i64, i64* %i38, align 8
  %add45 = add i64 %37, 8
  store i64 %add45, i64* %i38, align 8
  br label %for.cond39

for.exit46:                                       ; preds = %for.cond39
  %38 = load double, double* %x33, align 8
  store double %38, double* %d2, align 8
  %39 = load double, double* %d, align 8
  %40 = load i64, i64* %l, align 8
  %41 = load double, double* %d2, align 8
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), double %39, i64 %40, double %41)
  ret void
}