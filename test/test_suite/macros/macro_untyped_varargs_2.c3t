// #target: macos-x64

module test;

import std::io;

macro @foo(...)
{
	int i = $vaarg(1) + $vaarg(1);
	int j = $vaexpr(2) + $vaexpr(2);
	$for (var $i = 0; $i < $vacount; $i++):
		io::printfln("%d", $vaarg($i));
	$endfor;
}

macro foo2(...)
{
	$for (var $i = 0; $i < $vacount; $i++):
		{
			$vatype($i) x;
		}
		io::printfln("%s", $vatype($i).nameof);
	$endfor;
}

macro foo3(...)
{
	var $x = 0;
	$for (var $i = 0; $i < $vacount; $i++):
		$x += $vaconst($i);
	$endfor;
	return $x;
}

macro @foo4(...)
{
	$typeof($varef(0)) a = $varef(0);
	$varef(0) = $varef(1);
	$varef(1) = a;
}
fn int ping(int val)
{
	io::printfln("Ping[%d]", val);
	return val;
}

fn void main()
{
	@foo(ping(1), ping(-1), ping(3141), ping(999 + 1));
	foo2(int, double);
	var $x = foo3(1, 4, 100);
	io::printfln("%d", $x);
	int x = 123;
	int y = 33;
	@foo4(x, y);
	io::printfln("%d, %d", x, y);
	@foo4(x, y);
	io::printfln("%d, %d", x, y);
}

/* #expect: test.ll

define i32 @test_ping(i32 %0) #0 {
entry:
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr1 = alloca %"variant[]", align 8
  store i32 %0, i32* %taddr, align 4
  %1 = bitcast i32* %taddr to i8*
  %2 = insertvalue %variant undef, i8* %1, 0
  %3 = insertvalue %variant %2, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %4 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %3, %variant* %4, align 16
  %5 = bitcast [1 x %variant]* %varargslots to %variant*
  %6 = insertvalue %"variant[]" undef, %variant* %5, 0
  %7 = insertvalue %"variant[]" %6, i64 1, 1
  store %"variant[]" %7, %"variant[]"* %taddr1, align 8
  %8 = bitcast %"variant[]"* %taddr1 to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %lo = load i8*, i8** %9, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %hi = load i64, i64* %10, align 8
  %11 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i64 8, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %11, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  ret i32 %0
}

; Function Attrs: nounwind
define void @test_main() #0 {
entry:
  %.anon = alloca i32, align 4
  %.anon1 = alloca i32, align 4
  %.anon2 = alloca i32, align 4
  %.anon3 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %taddr = alloca %"variant[]", align 8
  %retparam5 = alloca i64, align 8
  %varargslots6 = alloca [1 x %variant], align 16
  %taddr7 = alloca %"variant[]", align 8
  %retparam13 = alloca i64, align 8
  %varargslots14 = alloca [1 x %variant], align 16
  %taddr15 = alloca %"variant[]", align 8
  %retparam21 = alloca i64, align 8
  %varargslots22 = alloca [1 x %variant], align 16
  %taddr23 = alloca %"variant[]", align 8
  %x = alloca i32, align 4
  %retparam29 = alloca i64, align 8
  %varargslots30 = alloca [1 x %variant], align 16
  %taddr31 = alloca [3 x i8]*, align 8
  %taddr32 = alloca %"variant[]", align 8
  %x38 = alloca double, align 8
  %retparam39 = alloca i64, align 8
  %varargslots40 = alloca [1 x %variant], align 16
  %taddr41 = alloca [6 x i8]*, align 8
  %taddr42 = alloca %"variant[]", align 8
  %retparam48 = alloca i64, align 8
  %varargslots49 = alloca [1 x %variant], align 16
  %taddr50 = alloca i32, align 4
  %taddr51 = alloca %"variant[]", align 8
  %x57 = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i32, align 4
  %retparam58 = alloca i64, align 8
  %varargslots59 = alloca [2 x %variant], align 16
  %taddr60 = alloca %"variant[]", align 8
  %a66 = alloca i32, align 4
  %retparam67 = alloca i64, align 8
  %varargslots68 = alloca [2 x %variant], align 16
  %taddr69 = alloca %"variant[]", align 8
  %0 = call i32 @test_ping(i32 -1)
  store i32 %0, i32* %.anon, align 4
  %1 = call i32 @test_ping(i32 1)
  store i32 %1, i32* %.anon1, align 4
  %2 = call i32 @test_ping(i32 3141)
  store i32 %2, i32* %.anon2, align 4
  %3 = call i32 @test_ping(i32 1000)
  store i32 %3, i32* %.anon3, align 4
  %4 = load i32, i32* %.anon, align 4
  %5 = load i32, i32* %.anon, align 4
  %add = add i32 %4, %5
  store i32 %add, i32* %i, align 4
  %6 = call i32 @test_ping(i32 3141)
  %7 = call i32 @test_ping(i32 3141)
  %add4 = add i32 %6, %7
  store i32 %add4, i32* %j, align 4
  %8 = bitcast i32* %.anon1 to i8*
  %9 = insertvalue %variant undef, i8* %8, 0
  %10 = insertvalue %variant %9, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %11 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %10, %variant* %11, align 16
  %12 = bitcast [1 x %variant]* %varargslots to %variant*
  %13 = insertvalue %"variant[]" undef, %variant* %12, 0
  %14 = insertvalue %"variant[]" %13, i64 1, 1
  store %"variant[]" %14, %"variant[]"* %taddr, align 8
  %15 = bitcast %"variant[]"* %taddr to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %lo = load i8*, i8** %16, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %hi = load i64, i64* %17, align 8
  %18 = call i64 @std_io_printfln(i64* %retparam, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i64 2, i8* %lo, i64 %hi)
  %not_err = icmp eq i64 %18, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %entry
  br label %voiderr

voiderr:                                          ; preds = %after_check, %entry
  %19 = bitcast i32* %.anon to i8*
  %20 = insertvalue %variant undef, i8* %19, 0
  %21 = insertvalue %variant %20, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %22 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots6, i64 0, i64 0
  store %variant %21, %variant* %22, align 16
  %23 = bitcast [1 x %variant]* %varargslots6 to %variant*
  %24 = insertvalue %"variant[]" undef, %variant* %23, 0
  %25 = insertvalue %"variant[]" %24, i64 1, 1
  store %"variant[]" %25, %"variant[]"* %taddr7, align 8
  %26 = bitcast %"variant[]"* %taddr7 to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %lo8 = load i8*, i8** %27, align 8
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %hi9 = load i64, i64* %28, align 8
  %29 = call i64 @std_io_printfln(i64* %retparam5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2, i8* %lo8, i64 %hi9)
  %not_err10 = icmp eq i64 %29, 0
  br i1 %not_err10, label %after_check11, label %voiderr12

after_check11:                                    ; preds = %voiderr
  br label %voiderr12

voiderr12:                                        ; preds = %after_check11, %voiderr
  %30 = bitcast i32* %.anon2 to i8*
  %31 = insertvalue %variant undef, i8* %30, 0
  %32 = insertvalue %variant %31, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %33 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots14, i64 0, i64 0
  store %variant %32, %variant* %33, align 16
  %34 = bitcast [1 x %variant]* %varargslots14 to %variant*
  %35 = insertvalue %"variant[]" undef, %variant* %34, 0
  %36 = insertvalue %"variant[]" %35, i64 1, 1
  store %"variant[]" %36, %"variant[]"* %taddr15, align 8
  %37 = bitcast %"variant[]"* %taddr15 to { i8*, i64 }*
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 0
  %lo16 = load i8*, i8** %38, align 8
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 1
  %hi17 = load i64, i64* %39, align 8
  %40 = call i64 @std_io_printfln(i64* %retparam13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i64 2, i8* %lo16, i64 %hi17)
  %not_err18 = icmp eq i64 %40, 0
  br i1 %not_err18, label %after_check19, label %voiderr20

after_check19:                                    ; preds = %voiderr12
  br label %voiderr20

voiderr20:                                        ; preds = %after_check19, %voiderr12
  %41 = bitcast i32* %.anon3 to i8*
  %42 = insertvalue %variant undef, i8* %41, 0
  %43 = insertvalue %variant %42, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %44 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots22, i64 0, i64 0
  store %variant %43, %variant* %44, align 16
  %45 = bitcast [1 x %variant]* %varargslots22 to %variant*
  %46 = insertvalue %"variant[]" undef, %variant* %45, 0
  %47 = insertvalue %"variant[]" %46, i64 1, 1
  store %"variant[]" %47, %"variant[]"* %taddr23, align 8
  %48 = bitcast %"variant[]"* %taddr23 to { i8*, i64 }*
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %48, i32 0, i32 0
  %lo24 = load i8*, i8** %49, align 8
  %50 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %48, i32 0, i32 1
  %hi25 = load i64, i64* %50, align 8
  %51 = call i64 @std_io_printfln(i64* %retparam21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i64 2, i8* %lo24, i64 %hi25)
  %not_err26 = icmp eq i64 %51, 0
  br i1 %not_err26, label %after_check27, label %voiderr28

after_check27:                                    ; preds = %voiderr20
  br label %voiderr28

voiderr28:                                        ; preds = %after_check27, %voiderr20
  store i32 0, i32* %x, align 4
  store [3 x i8]* bitcast ([4 x i8]* @.str.6 to [3 x i8]*), [3 x i8]** %taddr31, align 8
  %52 = bitcast [3 x i8]** %taddr31 to i8*
  %53 = insertvalue %variant undef, i8* %52, 0
  %54 = insertvalue %variant %53, i64 ptrtoint (%.introspect* @"ct$p$a3$char" to i64), 1
  %55 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots30, i64 0, i64 0
  store %variant %54, %variant* %55, align 16
  %56 = bitcast [1 x %variant]* %varargslots30 to %variant*
  %57 = insertvalue %"variant[]" undef, %variant* %56, 0
  %58 = insertvalue %"variant[]" %57, i64 1, 1
  store %"variant[]" %58, %"variant[]"* %taddr32, align 8
  %59 = bitcast %"variant[]"* %taddr32 to { i8*, i64 }*
  %60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %59, i32 0, i32 0
  %lo33 = load i8*, i8** %60, align 8
  %61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %59, i32 0, i32 1
  %hi34 = load i64, i64* %61, align 8
  %62 = call i64 @std_io_printfln(i64* %retparam29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i64 2, i8* %lo33, i64 %hi34)
  %not_err35 = icmp eq i64 %62, 0
  br i1 %not_err35, label %after_check36, label %voiderr37

after_check36:                                    ; preds = %voiderr28
  br label %voiderr37

voiderr37:                                        ; preds = %after_check36, %voiderr28
  store double 0.000000e+00, double* %x38, align 8
  store [6 x i8]* bitcast ([7 x i8]* @.str.8 to [6 x i8]*), [6 x i8]** %taddr41, align 8
  %63 = bitcast [6 x i8]** %taddr41 to i8*
  %64 = insertvalue %variant undef, i8* %63, 0
  %65 = insertvalue %variant %64, i64 ptrtoint (%.introspect* @"ct$p$a6$char" to i64), 1
  %66 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots40, i64 0, i64 0
  store %variant %65, %variant* %66, align 16
  %67 = bitcast [1 x %variant]* %varargslots40 to %variant*
  %68 = insertvalue %"variant[]" undef, %variant* %67, 0
  %69 = insertvalue %"variant[]" %68, i64 1, 1
  store %"variant[]" %69, %"variant[]"* %taddr42, align 8
  %70 = bitcast %"variant[]"* %taddr42 to { i8*, i64 }*
  %71 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %70, i32 0, i32 0
  %lo43 = load i8*, i8** %71, align 8
  %72 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %70, i32 0, i32 1
  %hi44 = load i64, i64* %72, align 8
  %73 = call i64 @std_io_printfln(i64* %retparam39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i64 2, i8* %lo43, i64 %hi44)
  %not_err45 = icmp eq i64 %73, 0
  br i1 %not_err45, label %after_check46, label %voiderr47

after_check46:                                    ; preds = %voiderr37
  br label %voiderr47

voiderr47:                                        ; preds = %after_check46, %voiderr37
  store i32 105, i32* %taddr50, align 4
  %74 = bitcast i32* %taddr50 to i8*
  %75 = insertvalue %variant undef, i8* %74, 0
  %76 = insertvalue %variant %75, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %77 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots49, i64 0, i64 0
  store %variant %76, %variant* %77, align 16
  %78 = bitcast [1 x %variant]* %varargslots49 to %variant*
  %79 = insertvalue %"variant[]" undef, %variant* %78, 0
  %80 = insertvalue %"variant[]" %79, i64 1, 1
  store %"variant[]" %80, %"variant[]"* %taddr51, align 8
  %81 = bitcast %"variant[]"* %taddr51 to { i8*, i64 }*
  %82 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %81, i32 0, i32 0
  %lo52 = load i8*, i8** %82, align 8
  %83 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %81, i32 0, i32 1
  %hi53 = load i64, i64* %83, align 8
  %84 = call i64 @std_io_printfln(i64* %retparam48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i64 2, i8* %lo52, i64 %hi53)
  %not_err54 = icmp eq i64 %84, 0
  br i1 %not_err54, label %after_check55, label %voiderr56

after_check55:                                    ; preds = %voiderr47
  br label %voiderr56

voiderr56:                                        ; preds = %after_check55, %voiderr47
  store i32 123, i32* %x57, align 4
  store i32 33, i32* %y, align 4
  %85 = load i32, i32* %x57, align 4
  store i32 %85, i32* %a, align 4
  %86 = load i32, i32* %y, align 4
  store i32 %86, i32* %x57, align 4
  %87 = load i32, i32* %a, align 4
  store i32 %87, i32* %y, align 4
  %88 = bitcast i32* %x57 to i8*
  %89 = insertvalue %variant undef, i8* %88, 0
  %90 = insertvalue %variant %89, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %91 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots59, i64 0, i64 0
  store %variant %90, %variant* %91, align 16
  %92 = bitcast i32* %y to i8*
  %93 = insertvalue %variant undef, i8* %92, 0
  %94 = insertvalue %variant %93, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %95 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots59, i64 0, i64 1
  store %variant %94, %variant* %95, align 16
  %96 = bitcast [2 x %variant]* %varargslots59 to %variant*
  %97 = insertvalue %"variant[]" undef, %variant* %96, 0
  %98 = insertvalue %"variant[]" %97, i64 2, 1
  store %"variant[]" %98, %"variant[]"* %taddr60, align 8
  %99 = bitcast %"variant[]"* %taddr60 to { i8*, i64 }*
  %100 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %99, i32 0, i32 0
  %lo61 = load i8*, i8** %100, align 8
  %101 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %99, i32 0, i32 1
  %hi62 = load i64, i64* %101, align 8
  %102 = call i64 @std_io_printfln(i64* %retparam58, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i64 6, i8* %lo61, i64 %hi62)
  %not_err63 = icmp eq i64 %102, 0
  br i1 %not_err63, label %after_check64, label %voiderr65

after_check64:                                    ; preds = %voiderr56
  br label %voiderr65

voiderr65:                                        ; preds = %after_check64, %voiderr56
  %103 = load i32, i32* %x57, align 4
  store i32 %103, i32* %a66, align 4
  %104 = load i32, i32* %y, align 4
  store i32 %104, i32* %x57, align 4
  %105 = load i32, i32* %a66, align 4
  store i32 %105, i32* %y, align 4
  %106 = bitcast i32* %x57 to i8*
  %107 = insertvalue %variant undef, i8* %106, 0
  %108 = insertvalue %variant %107, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %109 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots68, i64 0, i64 0
  store %variant %108, %variant* %109, align 16
  %110 = bitcast i32* %y to i8*
  %111 = insertvalue %variant undef, i8* %110, 0
  %112 = insertvalue %variant %111, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %113 = getelementptr inbounds [2 x %variant], [2 x %variant]* %varargslots68, i64 0, i64 1
  store %variant %112, %variant* %113, align 16
  %114 = bitcast [2 x %variant]* %varargslots68 to %variant*
  %115 = insertvalue %"variant[]" undef, %variant* %114, 0
  %116 = insertvalue %"variant[]" %115, i64 2, 1
  store %"variant[]" %116, %"variant[]"* %taddr69, align 8
  %117 = bitcast %"variant[]"* %taddr69 to { i8*, i64 }*
  %118 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %117, i32 0, i32 0
  %lo70 = load i8*, i8** %118, align 8
  %119 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %117, i32 0, i32 1
  %hi71 = load i64, i64* %119, align 8
  %120 = call i64 @std_io_printfln(i64* %retparam67, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i64 6, i8* %lo70, i64 %hi71)
  %not_err72 = icmp eq i64 %120, 0
  br i1 %not_err72, label %after_check73, label %voiderr74

after_check73:                                    ; preds = %voiderr65
  br label %voiderr74

voiderr74:                                        ; preds = %after_check73, %voiderr65
  ret void
}
