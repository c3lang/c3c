// #target: macos-x64

module test;

import std::io;

macro foo(int... x)
{
	foreach (i : x)
	{
		io::printfln("%d", i);
	}
}

macro foo2(x...)
{
	foreach (i : x)
	{
		io::printfln("%d", *(int*)i);
	}
}

fn void main()
{
	foo(1, -1, 3141, 999 + 1);
	foo2(1, -1, 3141, 999 + 1);
}

/* #expect: test.ll


define void @test_main() #0 {
entry:
  %x = alloca %"int[]", align 8
  %literal = alloca [4 x i32], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i32, align 4
  %retparam = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %vararg = alloca %"variant[]", align 8
  %varargslots = alloca [1 x %variant], align 16
  %x4 = alloca %"variant[]", align 8
  %literal5 = alloca [4 x %variant], align 16
  %taddr6 = alloca i32, align 4
  %taddr7 = alloca i32, align 4
  %taddr8 = alloca i32, align 4
  %taddr9 = alloca i32, align 4
  %.anon10 = alloca i64, align 8
  %.anon11 = alloca i64, align 8
  %i15 = alloca %variant, align 8
  %retparam17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %vararg21 = alloca %"variant[]", align 8
  %varargslots22 = alloca [1 x %variant], align 16
  %0 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 0
  store i32 1, i32* %0, align 4
  %1 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 1
  store i32 -1, i32* %1, align 4
  %2 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 2
  store i32 3141, i32* %2, align 4
  %3 = getelementptr inbounds [4 x i32], [4 x i32]* %literal, i64 0, i64 3
  store i32 1000, i32* %3, align 4
  %4 = bitcast [4 x i32]* %literal to i32*
  %5 = insertvalue %"int[]" undef, i32* %4, 0
  %6 = insertvalue %"int[]" %5, i64 4, 1
  store %"int[]" %6, %"int[]"* %x, align 8
  %7 = getelementptr inbounds %"int[]", %"int[]"* %x, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %.anon, align 8
  store i64 0, i64* %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %voiderr, %entry
  %9 = load i64, i64* %.anon1, align 8
  %10 = load i64, i64* %.anon, align 8
  %lt = icmp ult i64 %9, %10
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %11 = getelementptr inbounds %"int[]", %"int[]"* %x, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = load i64, i64* %.anon1, align 8
  %ptroffset = getelementptr inbounds i32, i32* %12, i64 %13
  %14 = load i32, i32* %ptroffset, align 4
  store i32 %14, i32* %i, align 4
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i64 2 }, %"char[]"* %taddr, align 8
  %15 = bitcast %"char[]"* %taddr to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %lo = load i8*, i8** %16, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %hi = load i64, i64* %17, align 8
  %18 = bitcast i32* %i to i8*
  %19 = insertvalue %variant undef, i8* %18, 0
  %20 = insertvalue %variant %19, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %21 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots, i64 0, i64 0
  store %variant %20, %variant* %21, align 16
  %22 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 1
  store i64 1, i64* %22, align 8
  %23 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg, i32 0, i32 0
  %24 = bitcast [1 x %variant]* %varargslots to %variant*
  store %variant* %24, %variant** %23, align 8
  %25 = bitcast %"variant[]"* %vararg to { i8*, i64 }*
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  %lo2 = load i8*, i8** %26, align 8
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  %hi3 = load i64, i64* %27, align 8
  %28 = call i64 @std_io_printfln(i64* %retparam, i8* %lo, i64 %hi, i8* %lo2, i64 %hi3)
  %not_err = icmp eq i64 %28, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %loop.body
  br label %voiderr

voiderr:                                          ; preds = %after_check, %loop.body
  %29 = load i64, i64* %.anon1, align 8
  %add = add i64 %29, 1
  store i64 %add, i64* %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  %30 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal5, i64 0, i64 0
  store i32 1, i32* %taddr6, align 4
  %31 = bitcast i32* %taddr6 to i8*
  %32 = insertvalue %variant undef, i8* %31, 0
  %33 = insertvalue %variant %32, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %33, %variant* %30, align 8
  %34 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal5, i64 0, i64 1
  store i32 -1, i32* %taddr7, align 4
  %35 = bitcast i32* %taddr7 to i8*
  %36 = insertvalue %variant undef, i8* %35, 0
  %37 = insertvalue %variant %36, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %37, %variant* %34, align 8
  %38 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal5, i64 0, i64 2
  store i32 3141, i32* %taddr8, align 4
  %39 = bitcast i32* %taddr8 to i8*
  %40 = insertvalue %variant undef, i8* %39, 0
  %41 = insertvalue %variant %40, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %41, %variant* %38, align 8
  %42 = getelementptr inbounds [4 x %variant], [4 x %variant]* %literal5, i64 0, i64 3
  store i32 1000, i32* %taddr9, align 4
  %43 = bitcast i32* %taddr9 to i8*
  %44 = insertvalue %variant undef, i8* %43, 0
  %45 = insertvalue %variant %44, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  store %variant %45, %variant* %42, align 8
  %46 = bitcast [4 x %variant]* %literal5 to %variant*
  %47 = insertvalue %"variant[]" undef, %variant* %46, 0
  %48 = insertvalue %"variant[]" %47, i64 4, 1
  store %"variant[]" %48, %"variant[]"* %x4, align 8
  %49 = getelementptr inbounds %"variant[]", %"variant[]"* %x4, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %.anon10, align 8
  store i64 0, i64* %.anon11, align 8
  br label %loop.cond12

loop.cond12:                                      ; preds = %voiderr27, %loop.exit
  %51 = load i64, i64* %.anon11, align 8
  %52 = load i64, i64* %.anon10, align 8
  %lt13 = icmp ult i64 %51, %52
  br i1 %lt13, label %loop.body14, label %loop.exit29

loop.body14:                                      ; preds = %loop.cond12
  %53 = getelementptr inbounds %"variant[]", %"variant[]"* %x4, i32 0, i32 0
  %54 = load %variant*, %variant** %53, align 8
  %55 = load i64, i64* %.anon11, align 8
  %ptroffset16 = getelementptr inbounds %variant, %variant* %54, i64 %55
  %56 = bitcast %variant* %i15 to i8*
  %57 = bitcast %variant* %ptroffset16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 16, i1 false)
  store %"char[]" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i64 2 }, %"char[]"* %taddr18, align 8
  %58 = bitcast %"char[]"* %taddr18 to { i8*, i64 }*
  %59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %58, i32 0, i32 0
  %lo19 = load i8*, i8** %59, align 8
  %60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %58, i32 0, i32 1
  %hi20 = load i64, i64* %60, align 8
  %61 = getelementptr inbounds %variant, %variant* %i15, i32 0, i32 0
  %62 = bitcast i8** %61 to i32**
  %63 = load i32*, i32** %62, align 8
  %64 = bitcast i32* %63 to i8*
  %65 = insertvalue %variant undef, i8* %64, 0
  %66 = insertvalue %variant %65, i64 ptrtoint (%.introspect* @"ct$int" to i64), 1
  %67 = getelementptr inbounds [1 x %variant], [1 x %variant]* %varargslots22, i64 0, i64 0
  store %variant %66, %variant* %67, align 16
  %68 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg21, i32 0, i32 1
  store i64 1, i64* %68, align 8
  %69 = getelementptr inbounds %"variant[]", %"variant[]"* %vararg21, i32 0, i32 0
  %70 = bitcast [1 x %variant]* %varargslots22 to %variant*
  store %variant* %70, %variant** %69, align 8
  %71 = bitcast %"variant[]"* %vararg21 to { i8*, i64 }*
  %72 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %71, i32 0, i32 0
  %lo23 = load i8*, i8** %72, align 8
  %73 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %71, i32 0, i32 1
  %hi24 = load i64, i64* %73, align 8
  %74 = call i64 @std_io_printfln(i64* %retparam17, i8* %lo19, i64 %hi20, i8* %lo23, i64 %hi24)
  %not_err25 = icmp eq i64 %74, 0
  br i1 %not_err25, label %after_check26, label %voiderr27

after_check26:                                    ; preds = %loop.body14
  br label %voiderr27

voiderr27:                                        ; preds = %after_check26, %loop.body14
  %75 = load i64, i64* %.anon11, align 8
  %add28 = add i64 %75, 1
  store i64 %add28, i64* %.anon11, align 8
  br label %loop.cond12

loop.exit29:                                      ; preds = %loop.cond12
  ret void
}

