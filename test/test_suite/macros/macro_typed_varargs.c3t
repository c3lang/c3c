// #target: macos-x64

module test;

import std::io;

macro foo(int... x)
{
	foreach (i : x)
	{
		io::printfn("%d", i);
	}
}

macro foo2(x...)
{
	foreach (i : x)
	{
		io::printfn("%d", *(int*)i);
	}
}

fn void main()
{
	foo(1, -1, 3141, 999 + 1);
	foo2(1, -1, 3141, 999 + 1);
}

/* #expect: test.ll

define void @test.main() #0 {
entry:
  %literal = alloca [4 x i32], align 16
  %x = alloca %"int[]", align 8
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i32, align 4
  %varargslots = alloca [1 x %"any*"], align 16
  %retparam = alloca i64, align 8
  %literal2 = alloca [4 x %"any*"], align 16
  %taddr = alloca i32, align 4
  %taddr4 = alloca i32, align 4
  %taddr6 = alloca i32, align 4
  %taddr8 = alloca i32, align 4
  %x9 = alloca %"any*[]", align 8
  %.anon10 = alloca i64, align 8
  %.anon12 = alloca i64, align 8
  %i16 = alloca %"any*", align 8
  %varargslots18 = alloca [1 x %"any*"], align 16
  %retparam19 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %literal, ptr align 16 @.__const, i32 16, i1 false)
  %0 = insertvalue %"int[]" undef, ptr %literal, 0
  %1 = insertvalue %"int[]" %0, i64 4, 1
  store %"int[]" %1, ptr %x, align 8
  %ptradd = getelementptr inbounds i8, ptr %x, i64 8
  %2 = load i64, ptr %ptradd, align 8
  store i64 %2, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %loop.body, %entry
  %3 = load i64, ptr %.anon1, align 8
  %4 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %3, %4
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %5 = load ptr, ptr %x, align 8
  %6 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds [4 x i8], ptr %5, i64 %6
  %7 = load i32, ptr %ptroffset, align 4
  store i32 %7, ptr %i, align 4
  %8 = insertvalue %"any*" undef, ptr %i, 0
  %9 = insertvalue %"any*" %8, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %9, ptr %varargslots, align 16
  %10 = call i64 @std.io.printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %11 = load i64, ptr %.anon1, align 8
  %add = add i64 %11, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  store i32 1, ptr %taddr, align 4
  %12 = insertvalue %"any*" undef, ptr %taddr, 0
  %13 = insertvalue %"any*" %12, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %13, ptr %literal2, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %literal2, i64 16
  store i32 -1, ptr %taddr4, align 4
  %14 = insertvalue %"any*" undef, ptr %taddr4, 0
  %15 = insertvalue %"any*" %14, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %15, ptr %ptradd3, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %literal2, i64 32
  store i32 3141, ptr %taddr6, align 4
  %16 = insertvalue %"any*" undef, ptr %taddr6, 0
  %17 = insertvalue %"any*" %16, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %17, ptr %ptradd5, align 8
  %ptradd7 = getelementptr inbounds i8, ptr %literal2, i64 48
  store i32 1000, ptr %taddr8, align 4
  %18 = insertvalue %"any*" undef, ptr %taddr8, 0
  %19 = insertvalue %"any*" %18, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %19, ptr %ptradd7, align 8
  %20 = insertvalue %"any*[]" undef, ptr %literal2, 0
  %21 = insertvalue %"any*[]" %20, i64 4, 1
  store %"any*[]" %21, ptr %x9, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %x9, i64 8
  %22 = load i64, ptr %ptradd11, align 8
  store i64 %22, ptr %.anon10, align 8
  store i64 0, ptr %.anon12, align 8
  br label %loop.cond13

loop.cond13:                                      ; preds = %loop.body15, %loop.exit
  %23 = load i64, ptr %.anon12, align 8
  %24 = load i64, ptr %.anon10, align 8
  %lt14 = icmp ult i64 %23, %24
  br i1 %lt14, label %loop.body15, label %loop.exit21

loop.body15:                                      ; preds = %loop.cond13
  %25 = load ptr, ptr %x9, align 8
  %26 = load i64, ptr %.anon12, align 8
  %ptroffset17 = getelementptr inbounds [16 x i8], ptr %25, i64 %26
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %i16, ptr align 8 %ptroffset17, i32 16, i1 false)
  %27 = load ptr, ptr %i16, align 8
  %28 = insertvalue %"any*" undef, ptr %27, 0
  %29 = insertvalue %"any*" %28, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"any*" %29, ptr %varargslots18, align 16
  %30 = call i64 @std.io.printfn(ptr %retparam19, ptr @.str.1, i64 2, ptr %varargslots18, i64 1)
  %31 = load i64, ptr %.anon12, align 8
  %add20 = add i64 %31, 1
  store i64 %add20, ptr %.anon12, align 8
  br label %loop.cond13

loop.exit21:                                      ; preds = %loop.cond13
  ret void
}
