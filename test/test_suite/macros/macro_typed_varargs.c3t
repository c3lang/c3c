// #target: macos-x64

module test;

import std::io;

macro foo(int... x)
{
	foreach (i : x)
	{
		io::printfn("%d", i);
	}
}

macro foo2(x...)
{
	foreach (i : x)
	{
		io::printfn("%d", *(int*)i);
	}
}

fn void main()
{
	foo(1, -1, 3141, 999 + 1);
	foo2(1, -1, 3141, 999 + 1);
}

/* #expect: test.ll

define void @test_main() #0 {
entry:
  %x = alloca %"int[]", align 8
  %literal = alloca [4 x i32], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i32, align 4
  %retparam = alloca i64, align 8
  %varargslots = alloca [1 x %variant], align 16
  %x2 = alloca %"variant[]", align 8
  %literal3 = alloca [4 x %variant], align 16
  %taddr = alloca i32, align 4
  %taddr4 = alloca i32, align 4
  %taddr5 = alloca i32, align 4
  %taddr6 = alloca i32, align 4
  %.anon7 = alloca i64, align 8
  %.anon8 = alloca i64, align 8
  %i12 = alloca %variant, align 8
  %retparam14 = alloca i64, align 8
  %varargslots15 = alloca [1 x %variant], align 16
  %0 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 0
  store i32 1, ptr %0, align 4
  %1 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 1
  store i32 -1, ptr %1, align 4
  %2 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 2
  store i32 3141, ptr %2, align 4
  %3 = getelementptr inbounds [4 x i32], ptr %literal, i64 0, i64 3
  store i32 1000, ptr %3, align 4
  %4 = insertvalue %"int[]" undef, ptr %literal, 0
  %5 = insertvalue %"int[]" %4, i64 4, 1
  store %"int[]" %5, ptr %x, align 8
  %6 = getelementptr inbounds %"int[]", ptr %x, i32 0, i32 1
  %7 = load i64, ptr %6, align 8
  store i64 %7, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %voiderr, %entry
  %8 = load i64, ptr %.anon1, align 8
  %9 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %8, %9
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %10 = getelementptr inbounds %"int[]", ptr %x, i32 0, i32 0
  %11 = load ptr, ptr %10, align 8
  %12 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds i32, ptr %11, i64 %12
  %13 = load i32, ptr %ptroffset, align 4
  store i32 %13, ptr %i, align 4
  %14 = insertvalue %variant undef, ptr %i, 0
  %15 = insertvalue %variant %14, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %16 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %15, ptr %16, align 16
  %17 = call i64 @std_io_printfn(ptr %retparam, ptr @.str, i64 2, ptr %varargslots, i64 1)
  %not_err = icmp eq i64 %17, 0
  br i1 %not_err, label %after_check, label %voiderr

after_check:                                      ; preds = %loop.body
  br label %voiderr

voiderr:                                          ; preds = %after_check, %loop.body
  %18 = load i64, ptr %.anon1, align 8
  %add = add i64 %18, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  %19 = getelementptr inbounds [4 x %variant], ptr %literal3, i64 0, i64 0
  store i32 1, ptr %taddr, align 4
  %20 = insertvalue %variant undef, ptr %taddr, 0
  %21 = insertvalue %variant %20, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %21, ptr %19, align 8
  %22 = getelementptr inbounds [4 x %variant], ptr %literal3, i64 0, i64 1
  store i32 -1, ptr %taddr4, align 4
  %23 = insertvalue %variant undef, ptr %taddr4, 0
  %24 = insertvalue %variant %23, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %24, ptr %22, align 8
  %25 = getelementptr inbounds [4 x %variant], ptr %literal3, i64 0, i64 2
  store i32 3141, ptr %taddr5, align 4
  %26 = insertvalue %variant undef, ptr %taddr5, 0
  %27 = insertvalue %variant %26, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %27, ptr %25, align 8
  %28 = getelementptr inbounds [4 x %variant], ptr %literal3, i64 0, i64 3
  store i32 1000, ptr %taddr6, align 4
  %29 = insertvalue %variant undef, ptr %taddr6, 0
  %30 = insertvalue %variant %29, i64 ptrtoint (ptr @"ct$int" to i64), 1
  store %variant %30, ptr %28, align 8
  %31 = insertvalue %"variant[]" undef, ptr %literal3, 0
  %32 = insertvalue %"variant[]" %31, i64 4, 1
  store %"variant[]" %32, ptr %x2, align 8
  %33 = getelementptr inbounds %"variant[]", ptr %x2, i32 0, i32 1
  %34 = load i64, ptr %33, align 8
  store i64 %34, ptr %.anon7, align 8
  store i64 0, ptr %.anon8, align 8
  br label %loop.cond9

loop.cond9:                                       ; preds = %voiderr18, %loop.exit
  %35 = load i64, ptr %.anon8, align 8
  %36 = load i64, ptr %.anon7, align 8
  %lt10 = icmp ult i64 %35, %36
  br i1 %lt10, label %loop.body11, label %loop.exit20

loop.body11:                                      ; preds = %loop.cond9
  %37 = getelementptr inbounds %"variant[]", ptr %x2, i32 0, i32 0
  %38 = load ptr, ptr %37, align 8
  %39 = load i64, ptr %.anon8, align 8
  %ptroffset13 = getelementptr inbounds %variant, ptr %38, i64 %39
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %i12, ptr align 8 %ptroffset13, i32 16, i1 false)
  %40 = getelementptr inbounds %variant, ptr %i12, i32 0, i32 0
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue %variant undef, ptr %41, 0
  %43 = insertvalue %variant %42, i64 ptrtoint (ptr @"ct$int" to i64), 1
  %44 = getelementptr inbounds [1 x %variant], ptr %varargslots15, i64 0, i64 0
  store %variant %43, ptr %44, align 16
  %45 = call i64 @std_io_printfn(ptr %retparam14, ptr @.str.1, i64 2, ptr %varargslots15, i64 1)
  %not_err16 = icmp eq i64 %45, 0
  br i1 %not_err16, label %after_check17, label %voiderr18

after_check17:                                    ; preds = %loop.body11
  br label %voiderr18

voiderr18:                                        ; preds = %after_check17, %loop.body11
  %46 = load i64, ptr %.anon8, align 8
  %add19 = add i64 %46, 1
  store i64 %add19, ptr %.anon8, align 8
  br label %loop.cond9

loop.exit20:                                      ; preds = %loop.cond9
  ret void
}
