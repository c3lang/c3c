// #target: macos-x64
module test;
fn int! xy()
{
	return 1;
}
macro int! foo()
{
	xy()?;
	return 1;
}
fn void main()
{
	foo()!!;
}

/* #expect: test.ll

define void @test.main() #0 {
entry:
  %error_var = alloca i64, align 8
  %blockret = alloca i32, align 4
  %error_var1 = alloca i64, align 8
  %retparam = alloca i32, align 4
  %0 = call i64 @test.xy(i32* %retparam)
  %not_err = icmp eq i64 %0, 0
  br i1 %not_err, label %after.errcheck, label %error

error:                                            ; preds = %entry
  store i64 %0, i64* %error_var1, align 8
  br label %guard_block

after.errcheck:                                   ; preds = %entry
  br label %noerr_block

guard_block:                                      ; preds = %error
  ret void

noerr_block:                                      ; preds = %after.errcheck
  store i32 1, i32* %blockret, align 4
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %noerr_block
  %1 = load i32, i32* %blockret, align 4
  br label %noerr_block2

noerr_block2:                                     ; preds = %expr_block.exit
  ret void
}