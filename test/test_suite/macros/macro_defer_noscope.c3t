// #target: x64-darwin
module foo;
extern fn void puts(char *);

fn void foo1()
{
    puts("foo1");
}

module foo2;
import foo;
fn void foo2()
{
    foo::puts("foo2");
}
module bar;
import foo2;
macro bar1(#test) @noscope
{
    defer foo2::foo2();
    #test;
    #test;
}

module baz;
import foo;
import bar;
extern fn void printf(char *, ...);
fn void main()
{
    var $foo = 1;
    @bar::bar1(foo::foo1());
    @bar::bar1($foo += 1);
    printf("End: %d\n", $foo);
}

/* #expect: baz.ll

declare void @foo2.foo2()
declare void @foo.foo1()

define void @baz.main() #0 {
entry:
  call void @foo.foo1()
  call void @foo.foo1()
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 3)
  call void @foo2.foo2()
  call void @foo2.foo2()
  ret void
}
