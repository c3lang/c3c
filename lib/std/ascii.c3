module std::ascii;

macro bool in_range(c, start, len) => (uint)(c - start) < len;
macro bool is_lower(c) => in_range(c, 0x61, 26);
macro bool is_upper(c) => in_range(c, 0x41, 26);
macro bool is_digit(c) => in_range(c, 0x30, 10);
macro bool is_bdigit(c) => in_range(c, 0x30, 2);
macro bool is_odigit(c) => in_range(c, 0x30, 8);
macro bool is_xdigit(c) => in_range(c | 32, 0x61, 6) || is_digit(c);
macro bool is_alpha(c) => in_range(c | 32, 0x61, 26);
macro bool is_print(c) => in_range(c, 0x20, 95);
macro bool is_graph(c) => in_range(c, 0x21, 94);
macro bool is_space(c) => in_range(c, 0x9, 5) || c == 0x20;
macro bool is_alnum(c) => is_alpha(c) || is_digit(c);
macro bool is_punct(c) => !is_alnum(c) && is_graph(c);
macro bool is_blank(c) => c == 0x20 || c == 0x9;
macro bool is_cntrl(c) => c < 0x20 || c == 0x7f;
macro to_lower(c) => is_upper(c) ? c + 0x20 : c;
macro to_upper(c) => is_lower(c) ? c - 0x20 : c;

fn bool char.in_range(char c, char start, char len) => in_range(c, start, len);
fn bool char.is_lower(char c) => is_lower(c);
fn bool char.is_upper(char c) => is_upper(c);
fn bool char.is_digit(char c) => is_digit(c);
fn bool char.is_bdigit(char c) => is_bdigit(c);
fn bool char.is_odigit(char c) => is_odigit(c);
fn bool char.is_xdigit(char c) => is_xdigit(c);
fn bool char.is_alpha(char c) => is_alpha(c);
fn bool char.is_print(char c) => is_print(c);
fn bool char.is_graph(char c) => is_graph(c);
fn bool char.is_space(char c) => is_space(c);
fn bool char.is_alnum(char c) => is_alnum(c);
fn bool char.is_punct(char c) => is_punct(c);
fn bool char.is_blank(char c) => is_blank(c);
fn bool char.is_cntrl(char c) => is_cntrl(c);
fn char char.to_lower(char c) => (char)to_lower(c);
fn char char.to_upper(char c) => (char)to_upper(c);

fn bool uint.in_range(uint c, uint start, uint len) => in_range(c, start, len);
fn bool uint.is_lower(uint c) => is_lower(c);
fn bool uint.is_upper(uint c) => is_upper(c);
fn bool uint.is_digit(uint c) => is_digit(c);
fn bool uint.is_bdigit(uint c) => is_bdigit(c);
fn bool uint.is_odigit(uint c) => is_odigit(c);
fn bool uint.is_xdigit(uint c) => is_xdigit(c);
fn bool uint.is_alpha(uint c) => is_alpha(c);
fn bool uint.is_print(uint c) => is_print(c);
fn bool uint.is_graph(uint c) => is_graph(c);
fn bool uint.is_space(uint c) => is_space(c);
fn bool uint.is_alnum(uint c) => is_alnum(c);
fn bool uint.is_punct(uint c) => is_punct(c);
fn bool uint.is_blank(uint c) => is_blank(c);
fn bool uint.is_cntrl(uint c) => is_cntrl(c);
fn uint uint.to_lower(uint c) => (uint)to_lower(c);
fn uint uint.to_upper(uint c) => (uint)to_upper(c);
